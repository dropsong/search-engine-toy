<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Steven's Blog</title><link>https://blog.hly0928.com/</link><description>Recent content on Steven's Blog</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><copyright>© This post is licensed under a &lt;a href="https://creativecommons.org/licenses/by-nc-sa/4.0/"&gt;Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License&lt;/a&gt; (CC BY-NC-SA 4.0) unless otherwise specified.</copyright><lastBuildDate>Sun, 01 Jan 2023 00:00:00 +0800</lastBuildDate><atom:link href="https://blog.hly0928.com/index.xml" rel="self" type="application/rss+xml"/><item><title>2022 年终总结</title><link>https://blog.hly0928.com/post/2022-year-end-summary/</link><pubDate>Sun, 01 Jan 2023 00:00:00 +0800</pubDate><author> Steven</author><guid>https://blog.hly0928.com/post/2022-year-end-summary/</guid><description>&lt;p&gt;对许多人而言，2022 都称得上是艰难的一年。但客观来说，2022 一年中的种种混乱并没有对我造成多少实际上的影响，因而今年可以算是「偷着乐的一年」。&lt;/p&gt;
&lt;h3 id="大事记"&gt;大事记&lt;/h3&gt;
&lt;p&gt;今年还是一如既往地摸了，不过还是完成了几件非常重要的大事：&lt;/p&gt;
&lt;h4 id="我润你别劝我劝你也润"&gt;我润你别劝，我劝你也润&lt;/h4&gt;
&lt;p&gt;年初经历了一番纠结和权衡，还是 &lt;a href="https://twitter.com/hly0928/status/1517421208916328448"&gt;决定&lt;/a&gt; 了明年去澳，估计会转码去到某个偏远地区…人少真好。&lt;del&gt;其实想润的话也没太多可选项，不是吗？&lt;/del&gt;&lt;/p&gt;
&lt;h4 id="拿了两个-master-的-offer"&gt;拿了两个 Master 的 Offer&lt;/h4&gt;
&lt;p&gt;没啥好多说的，两所学校基本属于申了就有 Offer 的水平。&lt;del&gt;毕竟结合上一条都能推测出是什么学校了吧？&lt;/del&gt;&lt;/p&gt;
&lt;h4 id="非常艰难地考过了雅思"&gt;非常艰难地考过了雅思&lt;/h4&gt;
&lt;p&gt;经历了两三个月的 &lt;del&gt;紧张&lt;/del&gt; 划水准备和两次考试取消，终于是在成都 8 月的酷暑之下，赶在封城前幸运地 &lt;a href="https://twitter.com/hly0928/status/1562708993776029696"&gt;考完&lt;/a&gt; 了雅思。Overall 8.5 的成绩确实还是让我有点意外，&lt;del&gt;主要还是没想到雅思这么简单。&lt;/del&gt;&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/2022-year-end-summary/01.png" width="75%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;真不戳（&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="体验了一次印版画"&gt;体验了一次印版画&lt;/h4&gt;
&lt;p&gt;其实是某个选修课的期末作业，不过真的挺有意思。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/2022-year-end-summary/02.jpg" width="60%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;意味不明的山&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="终于把学分修完了"&gt;终于把学分修完了&lt;/h4&gt;
&lt;p&gt;前三年摸得太狠，于是大四上有足足 6 门选修课得上…还好无论如何都结束了。除开毕业设计，最后的加权平均分大概有 88+ 的样子？能摸到这个水准我也很满意了。&lt;/p&gt;
&lt;h4 id="不出意外地阳了"&gt;不出意外地阳了&lt;/h4&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/2022-year-end-summary/03.jpg" width="40%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;别急，该来的都会来&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;12 月初的放开让人猝不及防，在我校应阳尽阳的环境下我自然也 &lt;a href="https://twitter.com/hly0928/status/1603279947543764994"&gt;难逃一劫&lt;/a&gt;。将近 3 周的时间过去了，目前可以算是基本恢复，但仍在消极怠工的味觉和嗅觉系统还是让我非常怨念…&lt;/p&gt;
&lt;h4 id="意料之外的面基"&gt;意料之外的面基&lt;/h4&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/2022-year-end-summary/04.jpg" width="60%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;可爱推友、我、可爱推友&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;也是得益于 12 月初的放开，实现了计划之中但意料之外的面基。和 &lt;a href="https://twitter.com/AUwatermeter"&gt;@水表&lt;/a&gt; 在蓉转了几天、吃了几顿 &lt;del&gt;并白嫖了高档的🛞餐厅&lt;/del&gt;。尽管由于尚未康复，部分游玩计划未能成行，但这也算是给 2022 画上了一个圆满的句号吧。今年我没有什么遗憾，真的。&lt;/p&gt;
&lt;h3 id="新玩意"&gt;新玩意&lt;/h3&gt;
&lt;p&gt;2022 年买/换的设备不多，但也不算少：&lt;/p&gt;
&lt;h4 id="apple-watch-series-7-41mm-gps-starlight"&gt;Apple Watch Series 7 (41mm GPS, Starlight)&lt;/h4&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/2022-year-end-summary/05.jpg" width="75%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;首先是好看，其次是好看…&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;2 月底封校之前跑了趟 Apple Store，把手里的 Series 4 &lt;a href="https://twitter.com/hly0928/status/1496853812120031233"&gt;折抵换购&lt;/a&gt; 成了 Series 7，详情可以参考《&lt;a href="https://hly0928.notion.site/Apple-Watch-5cdfbcc811324ff4ab03adb3bb118884"&gt;Apple Watch 线下折抵换购小记&lt;/a&gt;》。从 4 代换到 7 代带来的常亮显示、更大的屏幕、血氧测量等体验升级都让我非常满意；结合 8 代的挤牙膏表现，这块表应该能成为跟 4 代一样的传家宝产品。&lt;/p&gt;
&lt;h4 id="airpods-3rd-generation"&gt;AirPods (3rd generation)&lt;/h4&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/2022-year-end-summary/06.jpg" width="75%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;就是白开水而已&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;4 月初在 Apple Store 通过音频质量服务计划换了一副 AirPods Pro &lt;del&gt;（尽管因为上海疫情等了足足 48 天才拿回来）&lt;/del&gt;，顺便 &lt;a href="https://twitter.com/hly0928/status/1510999478534565888"&gt;买了&lt;/a&gt; 一副 AirPods 3。简单来说，它很好地解决了我用 AirPods Pro 1 代时的续航焦虑（尤其是通话），详细体验可以看 &lt;a href="https://twitter.com/hly0928/status/1530209882364071938"&gt;这条推文&lt;/a&gt;。&lt;del&gt;穷了，等明年有钱了一定换 AirPods Pro 2。&lt;/del&gt;&lt;/p&gt;
&lt;h4 id="philips-shp9500"&gt;Philips SHP9500&lt;/h4&gt;
&lt;p&gt;买了个入门级的开放式大耳来听古典，但听了半天也 &lt;a href="https://twitter.com/hly0928/status/1520023230878478336"&gt;没听出&lt;/a&gt; 到底好在哪儿…好在较大的单元尺寸带来了非常舒适的佩戴感，平时戴着看看剧也没毛病？&lt;/p&gt;
&lt;h4 id="ipad-pro-11-m2-256gb-silver"&gt;iPad Pro 11” (M2, 256GB, Silver)&lt;/h4&gt;
&lt;p&gt;准确地说是 iPad Pro + 妙控键盘 + 智能双面夹 + Apple Pencil 的终极 &lt;del&gt;大冤种&lt;/del&gt; 全家桶。不过我本来也没指望用它干什么生产力方面的正事，摆在那精致好看 &lt;del&gt;能充当气氛组&lt;/del&gt; 就行了。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/2022-year-end-summary/07.jpg" width="75%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;假装很有生产力的样子&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="iphone-se-3rd-generation-64gb-starlight"&gt;iPhone SE (3rd generation, 64GB, Starlight)&lt;/h4&gt;
&lt;p&gt;出于安全原因购入的备用机。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/2022-year-end-summary/08.jpg" width="40%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;我们都是清插，来把我们都抓走啊&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="好康的"&gt;好康的&lt;/h3&gt;
&lt;p&gt;今年看的剧和番不多，不过有两部特别值得单独拿出来一说：&lt;/p&gt;
&lt;h4 id="莉可丽丝-lycoris-recoil"&gt;莉可丽丝 Lycoris Recoil&lt;/h4&gt;
&lt;p&gt;剧情略微有点高开低走，但精致的人设和作画足以让其称得上佳作了。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/2022-year-end-summary/09.jpg" width="75%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;🥰🥰🥰&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="孤独摇滚bocchi-the-rock"&gt;孤独摇滚！Bocchi the Rock!&lt;/h4&gt;
&lt;p&gt;&lt;del&gt;呜呜呜呜我现在就要看《孤独摇滚！第二季先行 PV》！MD 忍不了了一拳把下北泽打爆！MD 忍不了了一拳把下北泽打爆！呜呜呜我的波奇酱呜呜呜我的波奇酱呜呜呜我的波奇酱！&lt;/del&gt; Every decade has its own &lt;em&gt;&lt;strong&gt;K-ON!&lt;/strong&gt;&lt;/em&gt;, and this is &lt;em&gt;&lt;strong&gt;K-ON!&lt;/strong&gt;&lt;/em&gt; of the year 2022. 神作，看就对了。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/2022-year-end-summary/10.jpg" width="75%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;🙏 波门 🙏&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="小愿望"&gt;小愿望&lt;/h3&gt;
&lt;p&gt;顺利毕业、顺利 ▇▇、世界和平，愿 2023 还能继续偷着乐。&lt;/p&gt;</description></item><item><title>真假 Apple Watch 尼龙回环表带大对比</title><link>https://blog.hly0928.com/post/comparing-real-and-imitated-apple-watch-bands/</link><pubDate>Sun, 27 Mar 2022 02:00:00 +0800</pubDate><author> Steven</author><guid>https://blog.hly0928.com/post/comparing-real-and-imitated-apple-watch-bands/</guid><description>&lt;p&gt;总有人认为 Apple 官方的各种配件都是在收智商税 —— Apple Watch 表带也不例外。一条平平无奇的回环式尼龙表带，其官方售价就高达 ¥379，说是「智商税」的确不无道理。不过，某宝上一大堆百元以内的高仿，质量和做工真的能媲美官方吗？正好，我最近分别购入了一条「高仿」尼龙回环和一条原价的官方正品，借此机会对二者进行一下详细对比。&lt;/p&gt;
&lt;h3 id="价格"&gt;价格&lt;/h3&gt;
&lt;p&gt;当你决定购买果子官方表带时，价格肯定就不是你的第一考量因素了 —— 但当你挑选一根高仿表带时，价格还是十分重要的。我买的这条到手价不到 60 元，换言之一条官方表带可以买足足 6 条高仿。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/comparing-real-and-imitated-apple-watch-bands/01.jpg" width="80%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;官方和高仿之间的价差高达六倍多&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="外观"&gt;外观&lt;/h3&gt;
&lt;p&gt;我买的两条表带并不是同一个颜色 &lt;del&gt;（谁让官方出了春季新配色就把之前的颜色都下架了）&lt;/del&gt;，但外观的其他方面还是可以对比的。首先是长度：官方尼龙回环表带根据对应表壳的两种尺寸，拥有两种不同长度，41 mm 表带相比 45 mm 要稍短一些；而我买的这家高仿则只有一种长度，比官方长了大约 2 cm。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/comparing-real-and-imitated-apple-watch-bands/02.jpg" width="80%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;长度对比&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;具体到佩戴体验上，高仿尽管能适应更多腕围较大的用户，但对我这种小腕子而言就不太友好，粘贴扣几乎得粘到表带末端才能服帖，相比之下官方表带长度就更合适一些。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/comparing-real-and-imitated-apple-watch-bands/03.jpg" width="60%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;官方（下）的长度对小腕子更友好&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;除了长度以外，我手上这条高仿表带还奇怪地弯曲了一个弧度，而官方则毫无这个问题；同时，高仿表带的内侧也是没有表壳尺寸标记的。&lt;/p&gt;
&lt;h3 id="五金件"&gt;五金件&lt;/h3&gt;
&lt;p&gt;官方表带的一大特色就是做工精湛的五金件。的确，我手里的这条官方表带在拆装、使用上都严丝合缝，不会有松动、异响等情况出现。而高仿的这条虽然能做到官方八九成的水平，但固定表耳的弹簧卡扣弹力不太均匀，并且有一侧表耳在装上后略有松动，左右滑动会出现异响。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/comparing-real-and-imitated-apple-watch-bands/04.jpg" width="60%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;高仿表带表耳连接处细节&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;放大仔细观察也可以看出，官方和高仿在表耳的弧度、形状等方面还是存在一定的差别，这也使得官方表带装好后能够与手表弧线更为贴合。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/comparing-real-and-imitated-apple-watch-bands/05.jpg" width="80%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;五金件对比，官方更严丝合缝&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="细节"&gt;细节&lt;/h3&gt;
&lt;p&gt;表带的其他细节上，可以说是官方与高仿差别最大的地方。&lt;/p&gt;
&lt;p&gt;首先是颜色。从 &lt;a href="https://web.archive.org/web/20220101150939/https://www.apple.com.cn/shop/product/ML2N3FE/A"&gt;Web Archive&lt;/a&gt; 中可以查看到，官方的黍米色配白色表带两侧都是粉色包边，而高仿表带有一侧的包边却出现了一条细细的白色，&lt;del&gt;简直是一眼假。&lt;/del&gt;&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/comparing-real-and-imitated-apple-watch-bands/06.jpg" width="60%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;解释解释这条白线是怎么回事？&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;然后是粘接条部分，可以明显看出官方的粘贴条更精致、细密。同时，官方表带粘贴条部分的尼龙基底是十分平整的，与旁边区域形成了明显的对比；而高仿表带这部分的处理则多多少少有些敷衍了。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/comparing-real-and-imitated-apple-watch-bands/07.jpg" width="80%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;粘贴条对比，官方（上）更细密&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;除此之外，在官网对于尼龙回环表带的介绍中也提到，「表带以双层尼龙精织而成，贴近皮肤的一面更显致密」。放大之后的确可以看出，官方表带两侧的尼龙线纺织密度是不同的，贴近手腕的一侧要更加密集，有助于增加佩戴舒适度。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/comparing-real-and-imitated-apple-watch-bands/08.jpg" width="60%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;官方表带两侧尼龙纺织密度不同&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;而高仿则完全没有这种设计，两侧的尼龙纺织密度是完全相同的，而且似乎都要比官方的纺织密度更低。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/comparing-real-and-imitated-apple-watch-bands/09.jpg" width="80%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;官方（上）和高仿（下）的纺织密度对比&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;反映到手感上，官方表带与皮肤接触时会显得更加柔软、贴合，而高仿则偏硬。&lt;/p&gt;
&lt;p&gt;说了这么多高仿的不好，但它有一处居然比官方处理得更好 —— 表带末端的限位塑料件。官方表带在这里居然有一个很大的缝隙，塑料边缘也有不少毛刺，实属不应该。&lt;del&gt;实锤了，官方表带做工竟不如价格 1/6 的高仿！&lt;/del&gt;&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/comparing-real-and-imitated-apple-watch-bands/10.jpg" width="80%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;限位塑料件，官方（上）有一条明显缝隙&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="小结"&gt;小结&lt;/h3&gt;
&lt;p&gt;说了这么多，其实本文并不是要表达「官方就是更好」或是「高仿就是性价比高」这些观点，而是想说明官方表带贵有贵的道理、高仿必然在做工上多多少少有所妥协。你当然可以认为「官方将近四百块一条表带就是智商税」，但同时你也很难找到一条比官方便宜、做工还能持平甚至赶超官方的「平替」。所以，二者的选择并没有对错之分，纯粹只是看你愿不愿意为了那多出的一点点体验，付出数倍的边际成本罢了。&lt;/p&gt;</description></item><item><title>Steven’s Desk 2021</title><link>https://blog.hly0928.com/post/stevens-desk-2021/</link><pubDate>Wed, 19 Jan 2022 22:00:00 +0800</pubDate><author> Steven</author><guid>https://blog.hly0928.com/post/stevens-desk-2021/</guid><description>&lt;p&gt;作为一个「能呆在寝室就绝不出门」的人，布置一张能让我舒舒服服摸鱼 &lt;del&gt;摆烂&lt;/del&gt; 的桌面是十分有必要的事。自从 20 年底看到少数派的「&lt;a href="https://sspai.com/tag/%E6%97%A0%E9%99%90%E6%A1%8C%E9%9D%A2"&gt;无限桌面&lt;/a&gt;」征文以来，我也开始了对寝室桌面的改造，就以本文简单记录一下整个 2021 年的改造结果。&lt;/p&gt;
&lt;h3 id="一面日常"&gt;一面日常&lt;/h3&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/stevens-desk-2021/01.jpg"/&gt;
&lt;/figure&gt;
&lt;p&gt;对 Windows 深恶痛绝的我，不到万不得已绝不会打开 PC —— 因此，我桌面的「日常」一面是以 M1 MacBook Air 为绝对核心的。MacBook Air 通过一根 USB-C 全功能线连接到 Dell P2421DC 显示器 —— 选择这款参数并不出众的 2K 显示器，纯粹是因为它支持 C-C 直连和 60W 反向供电。&lt;/p&gt;
&lt;p&gt;显示器增高架下面收纳着平时用不到的机械键盘，上面放着 Yeelight 屏幕挂灯控制器和 iQunix Candy —— 这个小玩意值得一提，因为它可能是铝厂最失败的产品之一，并不能稳定地固定好 Apple Watch Charger，因而强烈&lt;strong&gt;不推荐&lt;/strong&gt;购买…&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/stevens-desk-2021/02.jpg" width="50%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;稳定性堪忧的 iQunix Candy&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;显示器左侧是公牛的插线板收纳盒 GN-F2161，负责为桌面上的所有电子设备供电；盒子上有 AirPods Pro 专属充电位 —— 小米无线充电器，以及一个威高的相机气吹 —— 这玩意用来清理 MacBook 屏幕上的灰尘既方便又安全，绝对不会划伤屏幕。另外，收纳盒前还常备一根 A-C 和一根 A to Micro-USB 短线，方便给鼠标、无线耳机等外设充电；离人位最近的则是 Apple 的 MagSafe Charger，有关它的更多体验可以去看看我之前写的《&lt;a href="https://hly0928.notion.site/MagSafe-Charger-eb18db18f2f84537b255eb23697b8c55"&gt;MagSafe Charger：样样都好，唯独充电不行&lt;/a&gt;》。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/stevens-desk-2021/03.jpg" width="50%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;小贵，但比一众便宜气吹效果更好&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;桌面右侧则是小米魔方插座、为 iPhone 和 iPad 有线充电准备的 C-L 和 C-C 线缆，以及倍思能量堆（充电宝插头二合一）—— 寝室断电的晚上每每都会需要它。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/stevens-desk-2021/04.jpg" width="50%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;有线充电区&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;想追求「极致生产力」的时候，可以使用 Sidecar 将 iPad mini 作为 MacBook 的第二块附屏 —— 不过对我来说，这种布置更多还是噱头大于实际。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/stevens-desk-2021/05.jpg" width="80%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;生产力的完全体？&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;想放松看剧的时候，还可以关掉屏幕挂灯的主光，只保留后侧的氛围光，护眼的同时氛围感满满。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/stevens-desk-2021/06.jpg" width="80%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;就想轻松摸个鱼！&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="一面娱乐"&gt;一面娱乐&lt;/h3&gt;
&lt;p&gt;「万不得已」（和想玩游戏）的时候，我也会打开放在显示器上方书架上的 PC，并稍稍改变一下桌面的布局。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/stevens-desk-2021/07.jpg" width="60%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;冷白光也是一种 RGB！&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;收起笔电，抽出键盘，再拿出鼠标和手柄，就可以开始游戏时间了。罗技的 G304 其实没什么好说的，无线游戏鼠标里的爆款；IKBC W200 虽然相比前几年用的 Filco Minila Air 少了几分精致，但红轴手感还是十分出色的。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/stevens-desk-2021/08.jpg"/&gt;
&lt;/figure&gt;
&lt;p&gt;有时学校作业需要同时用到两台电脑时，寝室的桌面就稍显局促了，不过好在还是能勉强放下：&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/stevens-desk-2021/09.jpg" width="80%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;这才是生产力的完全体&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="线材管理"&gt;线材管理&lt;/h3&gt;
&lt;p&gt;为了给桌面上如此之多的电子设备供电，我选用了上文所述的公牛插线板收纳盒 GN-F2161。这款收纳盒内部有 7 个插座孔位，刚好被我用完：&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/stevens-desk-2021/10.jpg"/&gt;
&lt;/figure&gt;
&lt;p&gt;显示器后方的两个 USB-A 也没闲着，分别给 Bose SLMii 充电底座和顶部的充电式夜灯供电；PC 的电源线、网线、键盘连接线、3.5 mm 音频延长线等等线缆则全部从桌子后方左侧向上走线，眼不见心不烦。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/stevens-desk-2021/11.jpg" width="60%"/&gt;
&lt;/figure&gt;
&lt;p&gt;最后是桌底的键盘托，刚好放下 Bose QC35、MX Master 3、路由器及路由器 UPS。&lt;/p&gt;
&lt;h3 id="小结"&gt;小结&lt;/h3&gt;
&lt;p&gt;&lt;del&gt;因为我已经穷了，&lt;/del&gt; 在可预见的大学所剩时间里，这套桌面应该不会发生什么大的变动了。目前的桌面还是存在许多遗憾的，比如 2K 显示器在 macOS 下的表现不尽人意、便宜的 Yeelight 在体验上仍然不比明基、受制于寝室环境桌面空间十分局促等等，而这些遗憾就只有等将来毕业后再去弥补了。&lt;/p&gt;</description></item><item><title>新玩意｜AirTag</title><link>https://blog.hly0928.com/post/new-stuff-airtag/</link><pubDate>Mon, 27 Dec 2021 21:00:00 +0800</pubDate><author> Steven</author><guid>https://blog.hly0928.com/post/new-stuff-airtag/</guid><description>&lt;p&gt;&lt;em&gt;*题图引自 &lt;a href="https://unsplash.com/photos/p4ammwR83NI"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;我并不是一个丢三落四的人。所以在年初 Apple 推出 &lt;a href="https://www.apple.com.cn/airtag/"&gt;AirTag&lt;/a&gt;，宣称要「让丢三落四这门绝技失传」的时候，我是不屑一顾的，也不认为自己会需要它。&lt;/p&gt;
&lt;p&gt;但就在一个多月前，我跟朋友看完夜场的《007：无暇赴死》出来，一路兴奋地讨论着剧情和演员，就这么走出了影院、走出了商场、走过了天桥、走到了校门口 —— 才想起挎包落在了影院座位上，于是被迫拔腿飞奔回去，上演了一场现实版的「007」，所幸赶回去时包还躺在原处。气喘吁吁地回到寝室，买个 AirTag 这个想法就冒了出来，并在其挥之不去了大半个月之后，终于让我决心剁手。&lt;/p&gt;
&lt;p&gt;AirTag 本身倒不是什么新玩意，不过在 iOS 15 中，Apple 为它增加了一项名为「&lt;a href="https://support.apple.com/zh-cn/guide/iphone/iph5fe280d90/ios"&gt;分离提醒&lt;/a&gt;」的新功能，可以让 AirTag 在与 iPhone 分离一段时间、且不处于信任位置时推送通知，避免物品遗失。这一功能让 AirTag 摆脱了过去的只能被动「查找」，而可以主动地提醒用户，也是吸引我购买的直接原因。&lt;/p&gt;
&lt;p&gt;对于 AirTag 的外观，想必大家都非常熟悉了。考虑到它的不锈钢护盖极其不耐刮，我在选购钥匙扣的同时还搭配了两张贴纸，毕竟可爱的猫猫谁不喜欢呢！&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/new-stuff-airtag/01.png" width="80%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;SkinAT 家的贴纸，真的不错！&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;上手之后，我也对最关心的「分离提醒」功能进行了测试。首先我在「查找」app 的信任位置中移除了寝室，然后将 AirTag 留在室内，自己带着手机出门。实测下来我在下午 4:40 出门，4:44 时手机上就弹出了 AirTag 遗落的提醒，表现不错。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/new-stuff-airtag/02.png" width="30%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;从分离到提示大约用时 4 分钟&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;此时打开「查找」app，也能查看 AirTag 的位置。这一位置是通过「查找」网络获得的，因此位置下方还会显示最后一次刷新（即连接到附近的 Apple 设备）的时间。我的 Mac 和 iPad 都还留在寝室里，所以 AirTag 的位置也能一直刷新 🤣。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/new-stuff-airtag/03.png" width="30%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;在「查找」app 中可以查看 AirTag 大致位置&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;总而言之，从体验结果来看，我对 AirTag 能否帮我避免下一次「丢包」悲剧还是很有信心的。不过，一想到包里装着一颗两百块的钥匙扣，也许我根本就不敢再把它忘掉了。&lt;/p&gt;</description></item><item><title>新玩意｜iPad mini 的生产力搭档：Sanwa Supply 折叠式蓝牙键盘</title><link>https://blog.hly0928.com/post/new-stuff-sanwa-400-skb070-keyboard/</link><pubDate>Tue, 30 Nov 2021 22:00:00 +0800</pubDate><author> Steven</author><guid>https://blog.hly0928.com/post/new-stuff-sanwa-400-skb070-keyboard/</guid><description>&lt;h3 id="给-ipad-mini-配个键盘吧"&gt;给 iPad mini 配个键盘吧！&lt;/h3&gt;
&lt;p&gt;在我卖掉 iPad Air 3 而买了 iPad mini 6 之后，就一直在为其物色一款合适的键盘。&lt;del&gt;尽管我实际上并没有多少在 iPad 上进行文字输入的需求。&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;之前 Air 3 一直使用的都是官方 Smart Keyboard：价格奇贵、手感奇差、还不能保护背面，但无需充电、吸上即用，拥有任何其他键盘都无法相比的一体性。可惜的是，Apple 并未给 iPad mini 提供官方的键盘解决方案，而是仅注明了其支持「蓝牙键盘」。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/new-stuff-sanwa-400-skb070-keyboard/01.png" width="80%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;iPad mini 仅支持「蓝牙键盘」&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;这并不奇怪，毕竟 iPad mini 的尺寸决定了它更偏向于一款内容消费设备，而非生产设备；不过这也不妨碍我为 mini 选配一款便携式的蓝牙键盘，以随时随地完成轻量的文字处理任务。&lt;/p&gt;
&lt;h3 id="2021-年还有人在用-micro-usb"&gt;2021 年，还有人在用 Micro-USB？&lt;/h3&gt;
&lt;p&gt;我最先看中的是 Logitech 的 &lt;a href="https://www.logitech.com.cn/zh-cn/products/ipad-keyboards/keys-to-go.html"&gt;Keys-To-Go 键盘&lt;/a&gt;。作为上架 &lt;a href="https://www.apple.com.cn/shop/product/HLPU2CH/A"&gt;Apple Store&lt;/a&gt; 的产品，这款键盘有着简洁漂亮的外观和专为 iOS 设备优化的快捷键。同时，作为非折叠式的传统键盘，Keys-To-Go 的尺寸也只有 24.2*13.7 cm，仅仅比 iPad mini 6 (19.5*13.5 cm) 大上一点。抛开略显昂贵的售价 (¥480) 不谈，它的确是 iPad mini 的理想搭档。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/new-stuff-sanwa-400-skb070-keyboard/02.jpg" width="60%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;Logitech Keys-To-Go｜图：Apple&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;不过，经过一番搜索，我也成功被 Keys-To-Go 的问题劝退了。首先是&lt;strong&gt;耐用性&lt;/strong&gt;。有不少网友 (&lt;a href="https://sspai.com/post/55447"&gt;1&lt;/a&gt;, &lt;a href="https://zhuanlan.zhihu.com/p/50838973"&gt;2&lt;/a&gt;, &lt;a href="https://post.smzdm.com/p/ax0rnkwd/"&gt;3&lt;/a&gt;, 见评论区) 都表示 Keys-To-Go 在使用一两年之后可能会出现按键鼓包等现象，这样的耐用性让我很难把它当作「传家宝」。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/new-stuff-sanwa-400-skb070-keyboard/03.png" width="75%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;有关按键鼓包的评论不少&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;其次是&lt;strong&gt;手感&lt;/strong&gt;。Keys-To-Go 由「FabricSkin 材质密封」的一体化结构决定了它与 Smart Keyboard 无异的糟糕手感：我真的不想再在这种比蝶式键盘更烂的织物表面上敲字了。然后是&lt;strong&gt;连接能力&lt;/strong&gt;。Keys-To-Go 并不像 Logitech 热门的 K380 等型号，拥有多设备切换的功能，而是仅能连接并记忆一台设备。受限于寝室拥挤的桌面，我同时使用 MacBook 和 PC 时总是十分局促。此时若是能用更迷你的蓝牙键盘暂时替换大号的机械键盘，将绝杀，可惜 Keys-To-Go 换不得。最后是&lt;strong&gt;接口&lt;/strong&gt;。作为一款 2014 年 &lt;a href="https://www.zdnet.com/article/logitech-unveils-keys-to-go-waterproof-keyboard-for-any-ipad/"&gt;发布&lt;/a&gt; 且后续也未大改的设备，Keys-To-Go 不意外地采用了 Micro-USB 作为充电接口。然而现在都 2021 年了，&lt;del&gt;这种电子垃圾应该从生产线直连回收车间，&lt;/del&gt; 没人还想再多一件用 Micro-USB 线才能充电的外设了。&lt;/p&gt;
&lt;h3 id="microsoft-果然是家硬件厂"&gt;Microsoft 果然是家硬件厂？&lt;/h3&gt;
&lt;p&gt;否定 Keys-To-Go 之后，我很快把目光转向了微软。2015 年，微软 &lt;a href="https://news.microsoft.com/zh-cn/%E5%BE%AE%E8%BD%AF%E5%8F%91%E5%B8%83%E5%85%A8%E6%96%B0%E6%97%A0%E7%BA%BF%E9%80%9A%E7%94%A8%E6%8A%98%E5%8F%A0%E9%94%AE%E7%9B%98/"&gt;推出&lt;/a&gt; 了一款「通用折叠键盘」。这款键盘有着微软外设一如既往的优雅外观，同时采用了剪刀式结构、支持双设备切换功能，解决了 Keys-To-Go 的两大痛点。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/new-stuff-sanwa-400-skb070-keyboard/04.jpg" width="75%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;微软通用折叠键盘｜图：Microsoft&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;当然，微软的产品也总是不能尽善尽美 —— 通用折叠键盘同样采用了&lt;strong&gt;极为落后的&lt;/strong&gt; Micro-USB 充电接口。不过，让我真正放弃它的原因则是：这款键盘目前已经停产了，市面上仍在售的不是二手，就是来路不明的水货。而且作为一款折叠键盘，它超过 500 元的原价无疑有些过高了。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/new-stuff-sanwa-400-skb070-keyboard/05.png" width="60%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;某宝已无法搜到该商品，只能到小黄鱼等平台购买&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="日系厂商总能带来惊喜"&gt;日系厂商总能带来惊喜&lt;/h3&gt;
&lt;p&gt;看了一圈，我终于找到了一款符合「2021 年标准」的选项，也就是今天的主角 —— Sanwa Supply 400-SKB070 折叠式蓝牙键盘。作为一款今年刚刚推出的产品，它在硬件参数上满足了当下的主流标准：蓝牙 5.0、三设备切换，甚至还是 USB-C 充电！键盘折叠后，其大小仅有 8.3*16.5 cm，只比 iPhone 13 Pro Max 裸机 (7.8*16.1 cm) 稍大，可以无感地与 iPad mini 一同携带。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/new-stuff-sanwa-400-skb070-keyboard/06.jpg" width="60%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;与 iPhone 13 和 iPad mini 的尺寸对比&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;同时，作为一块专为 iPad 打造的键盘，它在按键区右侧还放置了一枚 2.5*3.5 cm 的迷你触控板。抛开使用体验不谈，这的确算是个十分独特的设计。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/new-stuff-sanwa-400-skb070-keyboard/07.jpg" width="50%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;400-SKB070 带有触控板｜图：Sanwa&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;可以说，除开折叠键盘本身的按键尺寸和手感等问题，400-SKB070 看上去的确是个完美的选择…吗？&lt;/p&gt;
&lt;h3 id="有一瞬间甚至以为买到了假货"&gt;有一瞬间甚至以为买到了假货？&lt;/h3&gt;
&lt;p&gt;10 月底，经过上述一番对比和纠结，我在一家某宝店铺购入了这款键盘。没有选择某猫或者狗东的原因也很简单：那些看上去最为靠谱的官方旗舰店、自营旗舰店，这款产品均是「无货」的状态，让人不禁怀疑它究竟是卖得太好而脱销，还是无人问津而没有备货。&lt;/p&gt;
&lt;p&gt;拆开快递、打开包装、开盖、配对 —— 事情到这就变得不对劲了起来。当我按照说明书和 &lt;a href="https://youtu.be/EW001Gg-WzQ"&gt;官方使用指南&lt;/a&gt; (YouTube) 进行配对操作时，长按 Fn + C 数秒后配对指示灯却没有如期闪烁起来。经过充电、反复开关等一系列挣扎后，我偶然发现短按 Fn + C 竟然又可以进入配对模式并正常配对。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/new-stuff-sanwa-400-skb070-keyboard/08.jpg" width="50%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;说明书有关配对的部分&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;有过之前在某宝 &lt;a href="https://blog.hly0928.com/post/returning-a-fake-bose-slmii-se"&gt;买到假货&lt;/a&gt; 教训的我马上怀疑是不是又买到了假货。由于这款产品在互联网上的评价少得可怜（甚至本文应该是第一篇深度中文测评），我顾不得多想，马上找到卖家询问。对方表示说明书的操作没有问题，但也没法解释我遇到的情况。所幸经过一番交涉，卖家比较爽快地同意了退货。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/new-stuff-sanwa-400-skb070-keyboard/09.png" width="60%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;这款产品的搜索结果里只有购物平台…&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;11 月 1 日凌晨，我惊喜地发现这款键盘在狗东 Sanwa 自营旗舰店竟然补货了。遂当即下单，10 余个小时之后就已到手。拆开快递、打开包装、开盖、配对 —— 一模一样的情况又发生了。照说明书所写的长按 Fn + C 时键盘毫无反应，而短按则能顺利进入配对。由于狗东自营卖假货的概率无限接近于零，而连续两次买到故障产品的概率也无限接近于零，我只能合理推测：就是说明书写错了…&lt;/p&gt;
&lt;h3 id="让我们重新开个箱"&gt;让我们重新开个箱…&lt;/h3&gt;
&lt;p&gt;确认了买到的是正品无误，那就让我们重新看看这款键盘：&lt;/p&gt;
&lt;p&gt;产品包装比较简单，包装盒上只印了 Sanwa 的 logo，背面有一张中文的说明贴纸。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/new-stuff-sanwa-400-skb070-keyboard/10.png" width="80%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;外包装&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;打开包装，内部依次是中英两种语言的说明书、键盘本体和 USB-C to A 的充电线。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/new-stuff-sanwa-400-skb070-keyboard/11.jpg" width="60%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;内包装：数据线、键盘本体和说明书&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;键盘外侧使用了与微软通用折叠键盘类似的软磨砂材质，可以提升放在桌面上的摩擦力，摸上去的手感也不错。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/new-stuff-sanwa-400-skb070-keyboard/12.jpg" width="75%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;键盘外侧&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;翻开键盘，左上角是 USB-C 的充电接口和充电指示灯，下方贴有产品型号信息。键盘采用分体式设计，但保留了常规键盘的布局和错位对齐方式，有助于盲打。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/new-stuff-sanwa-400-skb070-keyboard/13.jpg" width="75%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;充电指示灯、贴纸和键帽&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;键盘右侧就是这块迷你触控板，不能按压、不支持手势操作。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/new-stuff-sanwa-400-skb070-keyboard/14.jpg" width="75%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;非常迷你的触控板&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;键盘整体还是比较低调 &lt;del&gt;朴实无华&lt;/del&gt; 的，与普通键盘最大的不同也仅仅是中间的折缝。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/new-stuff-sanwa-400-skb070-keyboard/15.jpg" width="80%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;朴实无华的键盘面&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="核心体验如何"&gt;核心体验如何？&lt;/h3&gt;
&lt;p&gt;看完外观，自然要说说一块键盘的核心体验 —— 打字。作为折叠式键盘，400-SKB070 无疑在尺寸和手感上作出了妥协。字母区键帽大小仅有约 1.6 cm，比全尺寸键盘更小；并且按键之间的距离也有所缩减，上手时不免有些局促感。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/new-stuff-sanwa-400-skb070-keyboard/16.jpg" width="80%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;与 MacBook Air 键盘对比，主键区尺寸明显更小&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;由于按键采用了大约 2 毫米键程的剪刀式结构，在敲击时有着清脆有力的回弹，手感比 Smart Keyboard 这类产品好了太多。不过，键轴的触发力度较大（60±20g，与机械青轴接近），加上极短的键程，按上去有一种介于剪刀式键盘和蝶式键盘之间的触感。&lt;/p&gt;
&lt;p&gt;另外，分体式的折叠键盘在布局上也和常规键盘有所不同。这款键盘根据标准指法在 6、T、G、B 键右侧分开约 1.5 cm，我在刚开始使用时并没有明显不适；但如果你的打字指法不太标准，则可能需要适应。同时，为了填满键盘区域，部分按键的长度反而有所增加，可能导致误触，如 Caps lock 键在写作本文的过程中至少被我误按了五六次…&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/new-stuff-sanwa-400-skb070-keyboard/17.jpg" width="60%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;标准指法（不过数字 6 划给了右手）&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;折叠键盘在极大程度上方便携带的同时，也有一个结构上的硬伤：必须放置于水平表面上才能稳定使用。写这句话时我也尝试了一下把键盘放在腿上打字，那体验可谓是一言难尽。如果你经常需要在不平整的表面上使用，那么传统的一体式键盘应该是更好的选择。&lt;/p&gt;
&lt;p&gt;总的说来，这款键盘在核心体验上还是让我满意的。在同等尺寸下，它的手感不一定最好，但也绝对不算差，唯一需要适应的可能就是紧凑和分体式的布局了。&lt;/p&gt;
&lt;h3 id="还有什么值得一提的地方"&gt;还有什么值得一提的地方？&lt;/h3&gt;
&lt;h4 id="蓝牙连接稳定性"&gt;蓝牙连接稳定性&lt;/h4&gt;
&lt;p&gt;几周使用下来，搭载了蓝牙 5.0 的 400-SKB070 在连接上表现稳定，没有明显卡顿或断连的情况出现。与大多数蓝牙键盘相同，这款键盘在闲置约 10 分钟后会自动休眠，按任意键可在数秒内重连。&lt;/p&gt;
&lt;p&gt;唯一值得一提的是，键盘在连接到 iPad 后，蓝牙设置中出现了「此设备可能会干扰无线连接」的提示。目前尚不清楚这一提示有何影响，而我也测试了将 AirPods Pro 与本键盘同时连接到 iPad，二者亦均可正常使用。另外系统蓝牙列表中显示的设备名称为「S&lt;strong&gt;NA&lt;/strong&gt;WA BT KEYBOARD」，若不是产品购于狗东自营，我真的怀疑买到了假货。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/new-stuff-sanwa-400-skb070-keyboard/18.jpg" width="80%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;「使用该配件可能会影响 WLAN 和蓝牙连接」&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="续航与充电"&gt;续航与充电&lt;/h4&gt;
&lt;p&gt;这款键盘的标称续航为 35 小时，按照每天使用约 2 小时计算，可以坚持超过两周的时间。尽管这远远比不上 Keys-To-Go 或微软通用折叠键盘长达数月的标称续航，但考虑到更小的携带尺寸和更通用的 USB-C 接口，我也可以接受。&lt;/p&gt;
&lt;p&gt;键盘的充电时间在 2 小时左右，中规中矩；充电的同时键盘可以正常使用，但无法进行蓝牙配对或切换等操作，让人迷惑。&lt;/p&gt;
&lt;h4 id="触控板"&gt;触控板&lt;/h4&gt;
&lt;p&gt;也许有 iPad 用户会因为触控板对这款键盘产生兴趣，但我劝你打消这个念头。如上文所述，这块触控板尺寸很小，也不支持按压或手势操作，甚至连双指滚动都非常困难，使用体验上只能说是聊胜于无。而且在当前的 iPadOS 操作逻辑下，大部分时候还是直接点按屏幕效率更高。&lt;/p&gt;
&lt;h4 id="缺失的-f1---f12"&gt;缺失的 F1 - F12&lt;/h4&gt;
&lt;p&gt;如果你使用的是 Windows / Android 设备，需要注意这款键盘并不能通过组合键等方式输入 F1 - F12，并且 Fn + 0-9 的快捷键也是专为 iOS 设备设计的，在其他系统下不一定能正常工作。&lt;/p&gt;
&lt;h3 id="小结ipad-mini-的生产力搭档"&gt;小结：iPad mini 的生产力搭档&lt;/h3&gt;
&lt;p&gt;本文并不会讨论「iPad 是否具有生产力」这一饱受争议的话题。但不可否认的是，Sanwa 400-SKB070 赋予了 iPad mini 这样一台小尺寸设备更多的可能，本文的全部文字也正是用 iPad mini + 400-SKB070 写下的。&lt;/p&gt;
&lt;p&gt;不久前，我也在少数派看到了作者 &lt;a href="https://sspai.com/u/Kiririn"&gt;@Kiririn&lt;/a&gt; 介绍「世界最薄」折叠键盘 MIPOW MPC-003 的 &lt;a href="https://sspai.com/post/69537"&gt;文章&lt;/a&gt;。相比 MPC-003，400-SKB070 少了些对极致的追求，多了份「没啥短板」的中庸。灵活的形态和瑕不掩瑜的使用体验，让它在搭配 iPad Air/Pro 等设备使用时仍可表现不俗；而 200 元出头的价格，也是它面对妙控键盘等一众竞品时的优势所在。&lt;/p&gt;</description></item><item><title>Shame on you, Apple</title><link>https://blog.hly0928.com/post/shame-on-you-apple/</link><pubDate>Fri, 12 Nov 2021 20:00:00 +0800</pubDate><author> Steven</author><guid>https://blog.hly0928.com/post/shame-on-you-apple/</guid><description>&lt;p&gt;我选择 Apple 产品的理由很简单：相对稳定的系统和更为用心的设计。&lt;/p&gt;
&lt;p&gt;对于前者，近几年 Apple 产品的软件质量可以说是每况愈下。&lt;a href="https://twitter.com/hly0928/status/1458771732685221889"&gt;昨天&lt;/a&gt; macOS 的一个小 bug 就浪费了我一两个小时的时间，让我对 Apple 产品的系统究竟是否相对更「稳定」打了许多问号。&lt;/p&gt;
&lt;p&gt;但更让我失望的是，我没想到一向以设计上的完美主义著称的 Apple，也变得越来越「金玉其外，败絮其中」了。今天早上我偶然瞥了一眼 Mac 上的菜单栏，然后我强迫症的 DNA 就动了：&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/shame-on-you-apple/01.png" width="80%"/&gt;
&lt;/figure&gt;
&lt;p&gt;没看出有什么问题？那我们加几条参考线：&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/shame-on-you-apple/02.png" width="80%"/&gt;
&lt;/figure&gt;
&lt;p&gt;注意到了吗？这些系统图标在垂直方向上根本就没有对齐。最明显的就是蓝牙图标，肉眼可见地比旁边的 WiFi 和音量图标低了一截，而时间与日期、控制中心、电池、输入法等等图标也都不在一个水平线上，或是高了一个像素，或是低了一个像素…&lt;/p&gt;
&lt;p&gt;而当我在 Google 上稍加搜寻，就发现这并不是一个 Monterey 引入的新问题：早在一年前的 Big Sur 里，就有 &lt;a href="https://www.reddit.com/r/MacOSBeta/comments/jsrhx5/bluetooth_icon_is_not_centered/"&gt;许&lt;/a&gt; &lt;a href="https://www.reddit.com/r/MacOS/comments/m34po6/why_isnt_the_bluetooth_icon_centered_vertically/"&gt;多&lt;/a&gt; &lt;a href="https://www.reddit.com/r/MacOS/comments/jto8pd/menu_bar_icons_are_not_centered_horizontally/"&gt;网&lt;/a&gt; &lt;a href="https://www.reddit.com/r/MacOS/comments/pm6qhe/am_i_going_insane_or_is_the_do_not_disturb_icon/"&gt;友&lt;/a&gt; 发现菜单栏里的图标没能对齐。而且浏览一下还会发现，Big Sur 里的蓝牙图标位置靠上，而到了 Monterey 里它又跑到了下面。我真的不能理解 macOS 的 UI 工程师这一年究竟在做些什么！&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/shame-on-you-apple/03.png" width="40%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;Big Sur 的蓝牙图标｜图：Reddit&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;的确，macOS 仍然有着比 Windows 11 上那个半成品般的任务栏（尤其是模仿痕迹明显的控制中心）精致许多的菜单栏，但它再也不是从前那个稳定与优雅并存的 OS X 了。而 Apple 也许还是那个最讲究设计的大公司，但它再也不是从前那个强迫症和完美主义的 Apple 了。&lt;/p&gt;</description></item><item><title>修复 Windows 10 开始菜单里的 ms-resource:AppListName</title><link>https://blog.hly0928.com/post/fix-ms-resource-applistname-in-windows-10-start-menu/</link><pubDate>Tue, 13 Jul 2021 20:00:00 +0800</pubDate><author> Steven</author><guid>https://blog.hly0928.com/post/fix-ms-resource-applistname-in-windows-10-start-menu/</guid><description>&lt;p&gt;&lt;em&gt;*本文是基于我之前 &lt;a href="https://twitter.com/hly0928/status/1403730707910955012"&gt;推文&lt;/a&gt; 的笔记。&lt;del&gt;绝对不是为了水一篇博文。&lt;/del&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;六月份给新电脑装好了干净的 Windows 10 专业版之后，我发现开始菜单的应用列表里居然出现了一个叫 &lt;code&gt;ms-resource:AppListName&lt;/code&gt; 的玩意，点开之后就是微软的「人脉」app。&lt;/p&gt;
&lt;p&gt;开始我并没有管这个东西，想着可能是个例；没想到后面去 Google 了一下才发现这是一个普遍性问题，而微软居然这么多次更新都没有修复它。经过一番搜索我也找到了解决方案，只需以管理员权限打开 Windows PowerShell，然后分别执行下面两条命令即可：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-powershell" data-lang="powershell"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;Get-AppXPackage&lt;/span&gt; *microsoft.people* | &lt;span style="color:#8be9fd;font-style:italic"&gt;Remove-AppXPackage&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;Get-AppXPackage&lt;/span&gt; *microsoft.people* -AllUsers | &lt;span style="color:#ff79c6"&gt;Foreach&lt;/span&gt; {&lt;span style="color:#8be9fd;font-style:italic"&gt;Add-AppXPackage&lt;/span&gt; -DisableDevelopmentMode -Register &lt;span style="color:#f1fa8c"&gt;&amp;#34;&lt;/span&gt;$(&lt;span style="color:#8be9fd;font-style:italic"&gt;$_&lt;/span&gt;.InstallLocation)&lt;span style="color:#f1fa8c"&gt;\AppXManifest.xml&amp;#34;&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这两条命令会移除并重新安装「人脉」应用，之后开始菜单里就不再会有恼人的 &lt;code&gt;ms-resource:AppListName&lt;/code&gt; 了。&lt;/p&gt;
&lt;p&gt;PS:「人脉」这玩意根本没人用，所以在 Windows 11 里微软已经将其移除了。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id="参考及感谢"&gt;参考及感谢&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;🔗 &lt;a href="https://www.chiphell.com/forum.php?mod=viewthread&amp;amp;tid=2310875"&gt;Chiphell - ms-resource:AppListName 你们遇到过吗&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>不保证靠谱的 Google Voice 保号指南</title><link>https://blog.hly0928.com/post/how-to-keep-google-voice-active/</link><pubDate>Sat, 27 Mar 2021 00:00:00 +0800</pubDate><author> Steven</author><guid>https://blog.hly0928.com/post/how-to-keep-google-voice-active/</guid><description>&lt;h3 id="前言"&gt;前言&lt;/h3&gt;
&lt;p&gt;前两个月，&lt;a href="https://hk.appledaily.com/local/20210208/OF466MA7ABFDVGVXG6WN7I3VYA/"&gt;香港太空卡要实名&lt;/a&gt; 的消息传得沸沸扬扬，让手持 CMHK 并将其作为海外互联网服务主力卡的我心中惶惶。于是我赶紧花了一点小钱，购入了两个一直以来都没有尝试过的 &lt;a href="https://voice.google.com"&gt;Google Voice&lt;/a&gt; 账号。&lt;/p&gt;
&lt;p&gt;根据 Google Voice 官方的 &lt;a href="https://support.google.com/voice/answer/9230450"&gt;使用政策&lt;/a&gt;，&lt;strong&gt;6 个月&lt;/strong&gt;内没有&lt;strong&gt;接打电话或收发短信&lt;/strong&gt;的账号可能会被收回 Voice 使用权：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Account Inactivity&lt;/strong&gt;&lt;br&gt;
Google may reclaim your Google Voice number (if you have one) if you have not placed or received calls, sent or received text messages for a period of 6 months. We will not reclaim numbers that have been ported in to Google Voice or made permanent.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上网搜了一圈，目前还能用的&lt;strong&gt;全自动&lt;/strong&gt;保号方法无外乎 &lt;strong&gt;IFTTT 呼入电话、Google Apps Script 互发短信和购买永久使用权&lt;/strong&gt;三种（别跟我说找别人手动互发短信或打电话，没那个空）。&lt;/p&gt;
&lt;p&gt;贫穷如我，首先排除最后一种方案。购买一个号码的永久使用权需要 $30 和可用的美国支付方式。如果你&lt;del&gt;家里有矿&lt;/del&gt;具备以上条件且想省事，那么可以参考这篇 &lt;a href="https://zhuanlan.zhihu.com/p/157483860"&gt;知乎专栏&lt;/a&gt; 直接买号，然后关闭本页面。&lt;/p&gt;
&lt;p&gt;针对前两种方法，有些大佬声称只需要 IFTTT 每月呼入电话就能完美保号，但也有人说只接电话账号仍有被回收的风险，因此我最后选择同时采用二者来保号。本文简要记录一下设置方法，需要注意的是互发短信需要&lt;strong&gt;两个&lt;/strong&gt;可用的 Google Voice 账号。&lt;/p&gt;
&lt;h3 id="方法-1ifttt-呼入电话"&gt;方法 1：IFTTT 呼入电话&lt;/h3&gt;
&lt;p&gt;IFTTT 呼入电话是目前最简单的保号方案了。由于目前直接使用他人创建的 applet 不能修改详细设置，所以我们自己新建一个 applet 实现这一功能，操作如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开 &lt;a href="https://ifttt.com"&gt;IFTTT 官网&lt;/a&gt;，注册并登录账号（建议直接使用 Voice 对应的 Google 账号登录）。&lt;/li&gt;
&lt;li&gt;点击右上角的 Create，If This 中选择 Date &amp;amp; Time &amp;gt; Every month on the &amp;gt; 选择每月的一个日期或保持默认 &amp;gt; Create trigger。&lt;/li&gt;
&lt;li&gt;Then That 中选择 Phone Call (US only) &amp;gt; 随便填入一段语音或保持默认 &amp;gt; Create action。&lt;/li&gt;
&lt;li&gt;点击 Continue，随便填一个 applet title，最后点 Finish 即可。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/how-to-keep-google-voice-active/01.png" width="80%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;IFTTT 设置&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;这样，在每月设定的时间，Google Voice 就会收到 IFTTT 打来的电话了。如果你不想收到来电提醒，可以在 &lt;a href="https://voice.google.com/settings"&gt;Google Voice 设置&lt;/a&gt; 里打开 Do not disturb。&lt;/p&gt;
&lt;h3 id="方法-2google-apps-script-互发短信"&gt;方法 2：Google Apps Script 互发短信&lt;/h3&gt;
&lt;p&gt;这种方法较为复杂一点，其原理是利用 Google Voice 的 Gmail 提醒可以通过回复邮件来直接回复短信这一特性，借助 Google Apps Script 让两个账号每月自动互发邮件，变相实现互发短信。具体操作如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开 &lt;a href="https://voice.google.com/settings"&gt;Google Voice 设置&lt;/a&gt;，在 Messages 选项下打开 Forward messages to email 开关，使短信能被转发到 Gmail 邮箱中。&lt;/li&gt;
&lt;li&gt;手动用两个账号分别互发一条短信，内容任意。&lt;/li&gt;
&lt;li&gt;打开账号 1 的 Gmail 收件箱，检查是否有刚刚用账号 2 所发送的短信。该邮件的发信人地址为 &lt;code&gt;&amp;lt;账号1 Voice号码&amp;gt;.&amp;lt;账号2 Voice号码&amp;gt;.&amp;lt;随机字符串&amp;gt;@txt.voice.google.com&lt;/code&gt;，将这个地址复制下来。&lt;/li&gt;
&lt;li&gt;打开 &lt;a href="https://drive.google.com"&gt;Google Drive&lt;/a&gt;，确保 云端硬盘设置 &amp;gt; Manage Apps 中已经打开了 Google Apps Script，然后在云端硬盘中点击 New &amp;gt; More &amp;gt; Google Apps Script。&lt;/li&gt;
&lt;li&gt;删除编辑框中原有内容，然后粘贴以下代码：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-js" data-lang="js"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;function&lt;/span&gt; autoSend() {
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; MailApp.sendEmail(&lt;span style="color:#f1fa8c"&gt;&amp;#34;上面复制的发信人地址&amp;#34;&lt;/span&gt;, &lt;span style="color:#f1fa8c"&gt;&amp;#34;Auto-sent message&amp;#34;&lt;/span&gt;, &lt;span style="color:#f1fa8c"&gt;&amp;#34;This message is automatically sent to ensure that Google Voice remains active.&amp;#34;&lt;/span&gt;);
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;//你可以自行修改第二、三对引号中的内容，分别是邮件的标题和正文，其中正文亦会成为发送的短信内容
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="6"&gt;
&lt;li&gt;在页面最上方自定义一下项目名，点击编辑框上方的 Save project，再点击 Run 执行脚本。&lt;/li&gt;
&lt;li&gt;选择账号 1 对应的 Google 账号进行授权，提示 Google 尚未验证此 app 时点击高级 &amp;gt; 继续访问即可。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/how-to-keep-google-voice-active/02.png"/&gt;&lt;figcaption&gt;
&lt;h4&gt;允许执行脚本&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;ol start="8"&gt;
&lt;li&gt;打开账号 2 的 Gmail 收件箱，检查是否有账号 1 发来的邮件，有则表明以上设置正确无误。&lt;/li&gt;
&lt;li&gt;回到 Google Apps Script 编辑器，打开左边栏中的 Triggers，点击右下角的 Add Trigger，其中 event source 选择 time-driven，type 选择 month timer，day 随意选择，time 随意选择，最后保存触发器并关闭页面。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/how-to-keep-google-voice-active/03.png" width="60%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;触发器设置&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;ol start="10"&gt;
&lt;li&gt;几天内可能会收到 Google 的安全建议邮件，记得在安全检查中选择完全信任你的 Apps Script。&lt;/li&gt;
&lt;li&gt;要配置账号 2 的自动发信，只需要交换账号并重复上面的 3-10 步。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这样，在触发器定义的固定时间，你的两个 Google Voice 账号就会互发一条短信了。如果你不想收到这条短信的 Gmail 提醒，那么可以通过 Gmail 过滤器来实现，操作如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开账号 1 的 Gmail 设置，转到 Filters and Blocked Addresses 下，点击 Create a new filter。&lt;/li&gt;
&lt;li&gt;From 中填入上面复制的发信人地址，To 中填入账号 1 对应的 Gmail 地址，Has the words 中填入邮件正文中的一些关键词。如果你没有修改上面的内容，那么可以填入 &lt;code&gt;automatically Google Voice remains active&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;点击 Search 确认过滤规则能够滤出相应邮件，然后选择 Continue 编辑过滤动作。&lt;/li&gt;
&lt;li&gt;选择 Skip the Inbox 和 Mark as read 即可让相关邮件不再提示并自动归档。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;要关闭账号 2 的提醒，只需要交换账号并重复上面 4 步即可。&lt;/p&gt;
&lt;h3 id="后话"&gt;后话&lt;/h3&gt;
&lt;p&gt;我不保证上述方法 100% 可靠，毕竟我也才用了一两个月。希望本文能对你有所帮助。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id="参考及感谢"&gt;参考及感谢&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;🔗 &lt;a href="https://ocdman.github.io/2020/02/09/%E5%A6%82%E4%BD%95%E4%B8%BAGoogle-Voice%E4%BF%9D%E5%8F%B7/"&gt;如何为 Google Voice 保号 | chilihotpot &lt;/a&gt;&lt;/li&gt;
&lt;li&gt;🔗 &lt;a href="https://developers.google.com/apps-script/reference/gmail/gmail-app"&gt;Google Apps Script Reference - Class GmailApp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>让微星 B460 主板支持仅 S3 USB 唤醒</title><link>https://blog.hly0928.com/post/enable-s3-only-usb-wakeup-on-msi-b460-motherboards/</link><pubDate>Tue, 16 Mar 2021 17:00:00 +0800</pubDate><author> Steven</author><guid>https://blog.hly0928.com/post/enable-s3-only-usb-wakeup-on-msi-b460-motherboards/</guid><description>&lt;h3 id="需求"&gt;需求&lt;/h3&gt;
&lt;p&gt;最近组装了自己的第一台 PC，主板选用的是微星的 ITX 板 B460I GAMING EDGE WIFI。这块主板本身没什么问题，但微星的 BIOS 唤醒事件设置里只有「USB 设备从 S3/S4/S5 唤醒」这一项。如果关闭，那么不论电脑处于 S3 (睡眠)、S4 (休眠) 或是 S5 (关闭) 状态，都无法使用键鼠唤醒电脑，只能按下开机键唤醒；如果打开，那么当电脑处于 S3 (睡眠) 或是 S4 (休眠) 状态时，都可以通过键鼠唤醒&lt;sup&gt;&lt;a href="#ref01"&gt;[1]&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;然而，这都不是我想要的结果。我希望仅当电脑处于 S3 (睡眠) 状态时，能够通过键鼠唤醒；而在 S4/S5 (休眠/关闭) 状态下时，只能通过开机键唤醒。借助万能的 Google，我找到了一种有点「曲线救国」的方法，记录如下。&lt;/p&gt;
&lt;h3 id="设置"&gt;设置&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;以下操作仅在 MSI B460I GAMING EDGE WIFI 上验证可行，理论上亦可用于微星 B460 系其他主板。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;升级到最新 BIOS 版本，可参见微星的 &lt;a href="https://event.msi.com/mb/mb_bios_cn.pdf"&gt;官方升级指南&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;开机进入 BIOS 菜单，选择高级模式。&lt;/li&gt;
&lt;li&gt;打开 Settings &amp;gt; 高级 &amp;gt; 电源管理设置，确保「ErP Ready」为「禁止」状态，否则无法进行下一步操作。&lt;/li&gt;
&lt;li&gt;打开 Settings &amp;gt; 高级 &amp;gt; 唤醒事件设置，将「USB 设备从 S3/S4/S5 唤醒」设为「允许」。&lt;/li&gt;
&lt;li&gt;打开 Settings &amp;gt; 高级，将「D.T.M」设为「允许」。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;（可选）&lt;/strong&gt; 恢复 D.T.M 影响的其他设置，包括：
&lt;ol&gt;
&lt;li&gt;集成显卡和集成显卡多显示器选项。使用搜索功能搜索「mu」，将「集成显卡多显示器」设为「禁止」。&lt;/li&gt;
&lt;li&gt;快速开机选项。打开 Settings &amp;gt; 启动 ，将「快速开机」设为「允许」。&lt;/li&gt;
&lt;li&gt;挖矿优化选项。打开 Settings &amp;gt; 高级 &amp;gt; PCIe/PCI 子系统设置，将「Above 4G memory/Crypto Currency mining」设为「禁止」。&lt;/li&gt;
&lt;li&gt;Intel Speed Shift Technology 选项。打开 OC &amp;gt; Advanced CPU Configuration，将「Intel Speed Shift Technology」设为「自动」。&lt;/li&gt;
&lt;li&gt;CFG 锁定选项。打开 OC &amp;gt; CPU 特征，将「CFG 锁定」设为「允许」。&lt;/li&gt;
&lt;li&gt;SGX 选项。打开 OC &amp;gt; CPU 特征，将「SW Guard Extensions (SGX)」设为「Software Controlled」。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;保存并退出 BIOS，重启。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="原理"&gt;原理&lt;/h3&gt;
&lt;p&gt;这里的原理其实并不复杂，但是稍稍有一点 hack：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;首先，要实现「S3 状态下 USB 唤醒」，就必须打开「USB 设备从 S3/S4/S5 唤醒」选项，这是上述操作中第 2、3 步的缘由。&lt;/li&gt;
&lt;li&gt;其次，要让计算机在 S4/S5 状态下关闭 USB 唤醒，我们可以通过 ErP 来实现。ErP 节能功能开启后，计算机在 S4/S5 状态下会关闭 USB 端口供电，自然也就不会被唤醒了。&lt;/li&gt;
&lt;li&gt;然而，如果你用常规方法打开「ErP Ready」选项，就会发现「USB 设备从 S3/S4/S5 唤醒」被自动关闭了。因此，我们就借用了安装黑苹果时常用的「D.T.M」选项。打开 D.T.M 后，会自动开启 ErP Ready，同时不会关闭之前打开的「USB 设备从 S3/S4/S5 唤醒」开关，目的达成。&lt;/li&gt;
&lt;li&gt;最后，如果我们不需要安装黑苹果系统，那么参考上述第 6 步恢复 D.T.M 影响的相关设置即可。&lt;/li&gt;
&lt;/ol&gt;
&lt;hr&gt;
&lt;h4 id="参考及感谢"&gt;参考及感谢&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;🔗 &lt;a href="http://bbs.pcbeta.com/forum.php?mod=viewthread&amp;amp;tid=1876729"&gt;远景论坛 - 微星 b460 迫击炮注意了，睡眠唤醒问题完美解决&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id="-注"&gt;↩︎ 注&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p id="ref01"&gt;
经测试，即便打开此开关，电脑处于 S5 (关闭) 状态时仍不可通过键鼠唤醒，与 BIOS 描述有出入。&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>2020 年终总结</title><link>https://blog.hly0928.com/post/2020-year-end-summary/</link><pubDate>Fri, 01 Jan 2021 23:55:00 +0800</pubDate><author> Steven</author><guid>https://blog.hly0928.com/post/2020-year-end-summary/</guid><description>&lt;h3 id="写在前面"&gt;写在前面&lt;/h3&gt;
&lt;p&gt;年终总结当然要等到一年的最后一天再写 —— 这么想着的我，就在 12 月 31 日感冒了。&lt;/p&gt;
&lt;p&gt;不只是我，在 2020 年，整个世界都「感冒」了。年初一场突如其来的新冠疫情，打乱了所有人的生活节奏，也给今年蒙上了一层阴影。好在，我还是顺顺利利地摸过了 2020 年，得以坐在这里写一份年终总结。&lt;/p&gt;
&lt;h3 id="年初宅家宅家还是宅家"&gt;年初：宅家，宅家，还是宅家&lt;/h3&gt;
&lt;p&gt;也许「年初」一词并不太准确 —— 粗略一算，今年我可在家宅了足足有七个月。生活在疫情并不算特别严重的城市，其实宅家的日子也没有什么特别的地方；而由于一月初没有及时地囤口罩，家里存量仅为个位数的口罩更是给了我宅家的好理由。&lt;/p&gt;
&lt;p&gt;宅家期间，外卖倒是没少点 —— 饿了么说我今年点了总共三千多元的外卖，超过了 94% 的用户。这里要特别感谢 (?) 乡村基和汉堡王，挽救了我多少个不知道吃什么的中午或是夜晚。&lt;/p&gt;
&lt;p&gt;宅家期间还有什么值得一提的？网课？说来惭愧，网课我几乎一节也没认真听过。有时挂着就刷刷推，有时则直接打开了 PS4。年初趁着打折购入了一直想玩的荒野大镖客 2，于是便沉迷其中两个月不可自拔。不得不说 R 星的故事设计和性能优化都是领先的水准，大&lt;del&gt;嫖&lt;/del&gt;镖客 2 在本世代主机上的表现比今年某「年度游戏」好了不止一点半点。另外，PS4 还很好地发挥了「机顶盒」的功能，让我年中开始合租的 Netflix 会员能够发光发热。&lt;/p&gt;
&lt;p&gt;另外，今年写 Blog 的欲望也大幅下降（坏耶），上半年一共只发了三篇博文。这其中我最满意的还是《&lt;a href="https://blog.hly0928.com/post/talk-about-some-proxy-apps-on-ios"&gt;谈谈 iOS 平台上的几款代理软件&lt;/a&gt;》，算是比较完整地分享了年初以来折腾代理软件的一些心得，如果你还没看过一定要去看看 :D。&lt;/p&gt;
&lt;h3 id="年末返校之后并没有多少新鲜事"&gt;年末：返校之后并没有多少新鲜事&lt;/h3&gt;
&lt;p&gt;8 月中旬，由于傻逼学校返校期末考试的决定，我不得不告别宅了七个月的家。通过一两周的突击复习，期末考的成绩倒是出乎意料的不错。&lt;del&gt;上网课真棒！&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;开学之后的日子就没那么愉快了。首先是要「感谢」学院的阴间安排，让我们专业体验了每周 14 节课的噩梦。其次要「感谢」某体育部老师的恐吓，让我以为本学期必须选一门体育课，才在原体育课人数不足被退课之后，选择了我从来没打过的羽毛球。虽然一学期都没练过的我，最后还是奇迹般地通过了测试、没有挂科，但我「这辈子都不会再碰」的项目从此又多了一个。&lt;/p&gt;
&lt;p&gt;除此之外，本学期小组作业和课堂汇报的次数也大幅增加。不知道为什么，我给了同学们一种「擅长公共演讲」的错觉，因而在任何一门课的汇报展示中都没能缺席。毫不夸张地说，本学期我的课堂汇报时间比全院任何一位其他的同学都要多，这也让我对汇报展示有了一种生理性厌恶。而在某门本就阴间的专业课上，四人小组中有两人不仅能力有限、还喜欢浑水摸鱼，让我费了很大力气给他们擦屁股，真是深切体会到了选择靠谱队友的重要性。&lt;/p&gt;
&lt;p&gt;最后值得一说的是九月份的六级。单词没背、语法忘完的我擦着优秀线通过了，这可还行。结果后来就被辅导员叫去当「四级导生」，给大一的同学准备四级模拟卷、批改翻译作文等等 —— 这纯粹是个出力不讨好、没有任何实质性回报的工作。加上另一位导生似乎并不像我一样喜欢摸鱼，这份工作可谓是浪费了我不少时间和精力，也让我更加讨厌一切学生工作。&lt;/p&gt;
&lt;p&gt;下半年，我写了四篇博文 —— 数量不多，不过质量上我还都比较满意。特别是最近写的《&lt;a href="https://blog.hly0928.com/post/returning-a-fake-bose-slmii-se"&gt;某宝翻车实录 —— 记一次山寨 Bose 蓝牙音响退货经历&lt;/a&gt;》，故事源于我惨痛的双十一购物经历，如果你还没读过也请务必看看 XD。&lt;/p&gt;
&lt;h3 id="时间线外的一些思绪"&gt;时间线外的一些思绪&lt;/h3&gt;
&lt;p&gt;以上是按时间线顺序简单回顾了一下我的 2020。在时间线以外，我也还有一些想说的：&lt;/p&gt;
&lt;h4 id="一些很棒的数码产品"&gt;一些很棒的数码产品&lt;/h4&gt;
&lt;p&gt;开学之后，看了少数派的 &lt;a href="https://sspai.com/tag/%E6%97%A0%E9%99%90%E6%A1%8C%E9%9D%A2"&gt;#无限桌面&lt;/a&gt; 征文作品，我也开始逐步改造我的寝室桌面，并且买了一些很棒的数码产品。下面是我最喜欢的几件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Dell P2421DC 显示器。&lt;/strong&gt; 24 寸 2K、99% sRGB、Type-C 直连、USB 充电 &amp;amp; 扩展，这就是目前最符合我需求的显示器，某东 ¥1.5K 整的价格更是香得不行。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Bose SoundLink Mini II SE 蓝牙扬声器。&lt;/strong&gt; 尽管购买它的过程 &lt;a href="https://blog.hly0928.com/post/returning-a-fake-bose-slmii-se"&gt;一波三折&lt;/a&gt;，不过这款蓝牙音箱本身素质还是足够优秀的，堪称上面这款显示器的绝佳伴侣。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Logitech MX Master 3 鼠标。&lt;/strong&gt; 外观充满科技感，手感足够舒适，续航也让人放心。除了在 macOS 下不太稳定的驱动，我几乎挑不出这款鼠标的毛病。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;公牛 GN-F2161 收纳盒插座。&lt;/strong&gt; 保持寝室桌面整洁的理线神器，强烈推荐。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上产品的使用体验细节，我之后也会单独成文记录，敬请期待。&lt;del&gt;（咕咕咕&lt;/del&gt;&lt;/p&gt;
&lt;h4 id="挥之不去的-ocd"&gt;挥之不去的 OCD&lt;/h4&gt;
&lt;p&gt;今年以来我的 &lt;a href="https://zh.wikipedia.org/zh-hans/%E5%BC%BA%E8%BF%AB%E7%97%87"&gt;OCD&lt;/a&gt;（你也可以叫它强迫症）越来越严重了。具体的表现我在这里并不想多提，如果你们有兴趣可以去翻翻我 GitHub 的 commit time，从中也许可知一二。这期间我也跟一些朋友聊过这个问题，不过并没有得到多少实质性的建议。出于各种各样的原因，我也许一时半会也没法寻求更专业的帮助，那拖着就拖着吧（笑）。&lt;/p&gt;
&lt;h4 id="去年的遗憾"&gt;去年的遗憾？&lt;/h4&gt;
&lt;div class="hugo-encryptor-container"&gt;
&lt;div class="hugo-encryptor-prompt"&gt;
&lt;p&gt;文章的部分内容被密码保护：&lt;/p&gt;
&lt;/div&gt;
&lt;div class="hugo-encryptor-form"&gt;
&lt;input
class="hugo-encryptor-input"
placeholder='请输入密码'
/&gt;
&lt;input
class="hugo-encryptor-button"
type="button"
value='点击验证'
onclick="_click_handler(this)"
/&gt;
&lt;/div&gt;
&lt;div
class="hugo-encryptor-cipher-text"
data-password="Steven-2020"
style="display: none;"
&gt;
&lt;span style="display: none;"&gt;--- DON'T MODIFY THIS LINE ---&lt;/span&gt;
&lt;p&gt;不知道能看到这段话的人，还记不记得我 &lt;a href="https://blog.hly0928.com/post/2019-year-end-summary"&gt;去年&lt;/a&gt; 的遗憾呢？今年暑假期间，我找过两次前女友，不过最终的结果还是不那么理想，对我造成了不小的打击。&lt;/p&gt;
&lt;p&gt;也许在某种意义上，我跟她是真的「三观不合」吧？我实在没有什么想要祝福她的，希望她不要为选择现在的这位而后悔就好。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="终"&gt;终&lt;/h3&gt;
&lt;p&gt;抬头一看，时间快要迈向 1 月 2 日零点，本文也已经快两千字了，那不如就此作结吧。希望在这不平凡的 2020 年里，大家都还一切安好，我们就明年再见啦。&lt;/p&gt;</description></item><item><title>当 MacBook 出现难以解决的软件问题时，你可以试试这些操作</title><link>https://blog.hly0928.com/post/what-to-do-with-macbook-software-errors/</link><pubDate>Tue, 29 Dec 2020 20:00:00 +0800</pubDate><author> Steven</author><guid>https://blog.hly0928.com/post/what-to-do-with-macbook-software-errors/</guid><description>&lt;p&gt;&lt;em&gt;*题图引自 &lt;a href="https://unsplash.com/photos/E1nRYGo1cwg"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;就在昨天，我遇到了使用 MacBook 以来最离奇的一个 bug：我竟然无法在 Microsoft Word 里切换到中文输入法！在经历了检查设置、重启系统、重装 Office、切换系统语言、重新添加输入法等一系列操作后，Word 仍旧倔强地不让我输入中文。直到最后，浪费一下午时间的我终于 &lt;a href="https://twitter.com/hly0928/status/1343530468910612483"&gt;找到了解决方法&lt;/a&gt;，通过以安全模式启动 macOS 解决了问题。&lt;/p&gt;
&lt;p&gt;虽然问题是解决了，但我最终也没有找到其原因，更不能保证下次遇到同样问题时也能「化险为夷」。在 macOS 软件稳定性每况愈下的今天，如果你也不幸遇到了诸如此类难以解决的软件问题，那么不妨试试以下通用性操作。&lt;/p&gt;
&lt;h3 id="重启"&gt;重启&lt;/h3&gt;
&lt;p&gt;有句俗话叫「重启能解决 90% 的计算机问题」，对 MacBook 来说这一规律也同样适用。对于大多数软件问题，先重启出错程序、不行再重启计算机基本就能解决。&lt;/p&gt;
&lt;p&gt;如果你的 Mac 还能正常工作，那么通过左上角的苹果菜单就能轻松重启系统。如果你的 Mac 已经「卡死」不能响应，那么则需要按住电源按钮至少 10 秒钟，等待 Mac 强制关机后，再进行开机操作，更多信息也可参阅《&lt;a href="https://support.apple.com/zh-cn/HT204267"&gt;Apple 支持 - 如果 Mac 无法开机&lt;/a&gt;》。&lt;/p&gt;
&lt;h3 id="重置系统控制管理器-smc"&gt;重置系统控制管理器 (SMC)&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;*仅适用于采用 Intel 处理器的 MacBook。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;先前我在 Genius Bar 申请更换按键粘连的蝶式键盘时，Genius 在运行检测前也进行了重置系统控制管理器 (SMC) 的操作。事实上，重置 SMC 可以解决某些与电源、电池、风扇和其他功能相关的问题。&lt;/p&gt;
&lt;p&gt;对于配备 T2 安全芯片与否的 MacBook，重置 SMC 的流程稍有不同。如果你的 MacBook 是近两年购买、搭载了 T2 安全芯片的版本，那么你需要：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将 Mac 关机。&lt;/li&gt;
&lt;li&gt;按住电源按钮 10 秒钟后松开。&lt;/li&gt;
&lt;li&gt;稍等几秒，然后按下电源按钮开机。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果你像我一样，使用的是没有搭载 T2 安全芯片的 MacBook，那么你需要：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将 Mac 关机。&lt;/li&gt;
&lt;li&gt;在同时按住内建键盘&lt;strong&gt;左 shift、左 control、左 option&lt;/strong&gt; 键的情况下，按住电源按钮。&lt;/li&gt;
&lt;li&gt;保持按住上述四个按键 10 秒钟后松开。&lt;/li&gt;
&lt;li&gt;按下电源按钮开机。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;关于重置 SMC 的更多详情，你可以阅读《&lt;a href="https://support.apple.com/zh-cn/HT201295"&gt;Apple 支持 - 如何重置 Mac 的 SMC&lt;/a&gt;》。&lt;/p&gt;
&lt;h3 id="重置-nvram-或-pram"&gt;重置 NVRAM 或 PRAM&lt;/h3&gt;
&lt;p&gt;&lt;em&gt;*仅适用于采用 Intel 处理器的 MacBook。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;NVRAM (非易失性随机访问存储器) 和 PRAM (参数 RAM) 储存了音量、显示屏分辨率、启动磁盘选择等设置，以便于 Mac 对其进行快速访问。重置 NVRAM 或 PRAM 也能解决一些软件方面的疑难问题。&lt;/p&gt;
&lt;p&gt;要重置 NVRAM 或 PRAM，你需要：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;关闭 Mac 的 &lt;a href="https://support.apple.com/zh-cn/HT204455"&gt;固件密码&lt;/a&gt;。如果你并未设置固件密码，请跳过这一步。&lt;/li&gt;
&lt;li&gt;将 Mac 关机。&lt;/li&gt;
&lt;li&gt;按下电源按钮开机，然后立即同时按住 &lt;strong&gt;opiton、command、P、R&lt;/strong&gt; 四个按键。&lt;/li&gt;
&lt;li&gt;在大约 20 秒后松开按键，在此期间 MacBook 会发出两声启动声，并显示两次 Apple logo（仅对于搭载 T2 芯片的产品）。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;关于重置 NVRAM 或 PRAM 的更多详情，你可以阅读《&lt;a href="https://support.apple.com/zh-cn/HT204063"&gt;Apple 支持 - 重置 Mac 上的 NVRAM 或 PRAM&lt;/a&gt;》。&lt;/p&gt;
&lt;h3 id="以安全模式启动-mac"&gt;以安全模式启动 Mac&lt;/h3&gt;
&lt;p&gt;某些软件问题是由 Mac 启动项所致的。以安全模式启动 Mac 时，系统会阻止非必要的启动项加载，对启动磁盘进行基本检查并删除某些缓存。&lt;/p&gt;
&lt;p&gt;要以安全模式启动 Mac，你需要：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;关闭 Mac 的 &lt;a href="https://support.apple.com/zh-cn/HT204455"&gt;固件密码&lt;/a&gt;。如果你并未设置固件密码，请跳过这一步。&lt;/li&gt;
&lt;li&gt;将 Mac 关机。&lt;/li&gt;
&lt;li&gt;按下电源按钮开机，然后立即按住 &lt;strong&gt;shift&lt;/strong&gt; 键。&lt;/li&gt;
&lt;li&gt;在登录窗口出现时松开 shift 键，随后正常登录。&lt;/li&gt;
&lt;li&gt;系统会进行自检并要求再次登录，同时在窗口右上角会显示「安全启动」字样。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果你使用的是最新的 M1 MacBook，那么安全启动的步骤稍有不同：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;关闭 Mac 的 &lt;a href="https://support.apple.com/zh-cn/HT204455"&gt;固件密码&lt;/a&gt;。如果你并未设置固件密码，请跳过这一步。&lt;/li&gt;
&lt;li&gt;将 Mac 关机。&lt;/li&gt;
&lt;li&gt;按住电源按钮 10 秒钟以启动 Mac。&lt;/li&gt;
&lt;li&gt;在启动选项出现时松开电源按钮。&lt;/li&gt;
&lt;li&gt;按住 &lt;strong&gt;shift&lt;/strong&gt; 键并点选启动磁盘，点按「继续以安全模式运行」，随后松开 shift 键。&lt;/li&gt;
&lt;li&gt;正常登录到 Mac。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果你像我一样，在安全模式中发现问题得到解决，那么直接重新启动系统一般就能恢复正常了。有关 macOS 安全模式的更多详情，你可以阅读《&lt;a href="https://support.apple.com/zh-cn/HT201262"&gt;Apple 支持 - 如何在 Mac 上使用安全模式&lt;/a&gt;》。&lt;/p&gt;
&lt;h3 id="运行apple-诊断"&gt;运行「Apple 诊断」&lt;/h3&gt;
&lt;p&gt;「Apple 诊断」可以检查潜在的硬件故障，判断你的电脑是否出现需要维修的硬件问题。&lt;/p&gt;
&lt;p&gt;要运行「Apple 诊断」，你需要：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;关闭 Mac 的 &lt;a href="https://support.apple.com/zh-cn/HT204455"&gt;固件密码&lt;/a&gt;。如果你并未设置固件密码，请跳过这一步。&lt;/li&gt;
&lt;li&gt;将 Mac 关机。&lt;/li&gt;
&lt;li&gt;按下电源按钮开机，然后立即按住 &lt;strong&gt;D&lt;/strong&gt; 键。&lt;/li&gt;
&lt;li&gt;在进度条或语言选择窗口出现时，松开按键。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果你使用的是最新的 M1 MacBook，那么进行诊断的步骤也稍有不同：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;关闭 Mac 的 &lt;a href="https://support.apple.com/zh-cn/HT204455"&gt;固件密码&lt;/a&gt;。如果你并未设置固件密码，请跳过这一步。&lt;/li&gt;
&lt;li&gt;将 Mac 关机。&lt;/li&gt;
&lt;li&gt;按住电源按钮不放以启动 Mac。&lt;/li&gt;
&lt;li&gt;在启动选项出现时松开电源按钮。&lt;/li&gt;
&lt;li&gt;按下 &lt;strong&gt;command - D&lt;/strong&gt; 组合键。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;随后，系统会自动进行检测并给出相应的诊断结果。&lt;/p&gt;
&lt;h3 id="重装系统"&gt;重装系统&lt;/h3&gt;
&lt;p&gt;如果以上操作还不起作用，那么也许你真的需要重装系统了。也有句话叫「重装能解决 99% 的计算机问题」，但别急 —— 在重装系统之前，如果你的电脑还能工作，那么不妨先：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;备份所有重要的工作文件。&lt;/li&gt;
&lt;li&gt;记录你已安装的软件，以便将来恢复。如果你使用 HomeBrew，那么还可以通过 homebrew-bundle 备份软件列表，具体操作可参见《&lt;a href="https://sspai.com/post/43479"&gt;狡兔三窟——云备份软件列表与相应配置，补充 Time Machine&lt;/a&gt;》一文。&lt;/li&gt;
&lt;li&gt;断开所有非必要的外设连接。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;准备完成后，进入 macOS 恢复模式，步骤如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将 Mac 关机。&lt;/li&gt;
&lt;li&gt;按下电源按钮开机，然后立即同时按住 &lt;strong&gt;command 和 R&lt;/strong&gt; 两个按键。&lt;/li&gt;
&lt;li&gt;在 Apple 或旋转地球标志出现时松开按键。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果你使用的是最新的 M1 MacBook，那么则需要参照以下步骤进入恢复模式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将 Mac 关机。&lt;/li&gt;
&lt;li&gt;按住电源按钮不放以启动 Mac。&lt;/li&gt;
&lt;li&gt;在启动选项出现时松开电源按钮。&lt;/li&gt;
&lt;li&gt;选择「选项」，然后点按「继续」。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;进入恢复模式后，即可从实用工具里选择重新安装 macOS，并根据提示操作了。&lt;/p&gt;
&lt;p&gt;你也可以阅读《&lt;a href="https://support.apple.com/zh-cn/HT204904"&gt;Apple 支持 - 如何重新安装 macOS&lt;/a&gt;》来了解更详细的操作步骤，例如如何使用 U 盘创建可引导安装器。&lt;/p&gt;
&lt;h3 id="小结"&gt;小结&lt;/h3&gt;
&lt;p&gt;以上是六种（如果重启也算的话）解决 MacBook「疑难杂症」的方法。在遇到难以解决的软件错误时，你可以从上到下依次尝试，看看问题是否得到了解决。如果问题最终仍然存在，那么你可能就需要预约专业维修服务&lt;del&gt;或者直接买台新的&lt;/del&gt;了。&lt;/p&gt;</description></item><item><title>某宝翻车实录 —— 记一次山寨 Bose 蓝牙音响退货经历</title><link>https://blog.hly0928.com/post/returning-a-fake-bose-slmii-se/</link><pubDate>Sun, 27 Dec 2020 00:00:00 +0800</pubDate><author> Steven</author><guid>https://blog.hly0928.com/post/returning-a-fake-bose-slmii-se/</guid><description>&lt;p&gt;&lt;em&gt;*题图引自 &lt;a href="https://unsplash.com/photos/_bWH-4OjrYA"&gt;Unsplash&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;在不太平凡的 2020 年年末，我也碰上了一件不平凡的事。网购数码产品数十件、常年使用各大电商平台的「老用户」—— 我，竟然第一次在某宝买到了山寨数码产品。值得庆幸的是，最后我成功退货退款、及时止损。本文就简单记录一下这次并不愉快的购物经历。&lt;/p&gt;
&lt;h3 id="1-买了什么"&gt;1. 买了什么？&lt;/h3&gt;
&lt;p&gt;有关注我 &lt;a href="https://twitter.com/hly0928"&gt;Twitter&lt;/a&gt; 的读者应该已经知道了，就是 &lt;strong&gt;Bose SoundLink Mini II Special Edition&lt;/strong&gt;（以下简称 Bose SLMii SE）这只蓝牙扬声器。买它的原因也不复杂 —— 我想要给显示器配一个小音箱。迫于寝室狭窄的桌面空间，我在添置了显示器之后打算把 MBP 合盖作为主机使用，而这样又势必会影响外放的声音效果，因此购入一款小音箱成了我双十一主要的购物目标。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/returning-a-fake-bose-slmii-se/01.png" width="80%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;小巧的体积很适合放在显示器底座上&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;我的需求也不算复杂 —— 体积不大、能放在显示器底座上、支持蓝牙、有双声道。综合下来，Bose SLMii SE 正是完美满足以上条件的选择，加上去年 Bose 还升级了带有 Type-C 接口的特别版，&lt;del&gt;非常文明，&lt;/del&gt; 当即决定双十一下单。&lt;/p&gt;
&lt;h3 id="2-在哪儿买的"&gt;2. 在哪儿买的？&lt;/h3&gt;
&lt;p&gt;查询了一圈各大电商平台的价格，发现这款音响在某东自营和某猫旗舰店的双十一优惠价都在 ¥1099 左右，而某宝一众第三方卖家的价格在 ¥900-1000 上下 &lt;del&gt;（当然也有卖 500 多块的，但是那个假得太明显了我肯定不会上当）&lt;/del&gt;。本着能省一分是一分的原则，我选择了在第三方卖家处购买，挑了几家评价尚可的加进了购物车。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/returning-a-fake-bose-slmii-se/02.png" width="60%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;某宝的搜索结果中有不少第三方卖家&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;等到 10 月 31 号晚上，早早加好购物车的我又仔细对比了各家的价格，发现某宝的&lt;strong&gt;玄音电声数码（旺旺名：谢谢潮流代购）&lt;/strong&gt;（对，我不仅不打码，还要把你加粗放大，避免再有人上当踩坑）参与了双十一满 200 减 25 的活动，原价 ¥1018 的音箱算下来只要 ¥893，还能顺丰包邮、淘金币抵扣和花呗 12 期免息。一方面，该店原价与官方旗舰店优惠价所差不多，不像是假货；另一方面，该店三项评分均为 4.9，让我&lt;del&gt;大意了没有闪&lt;/del&gt;放松了警惕。直呼「真香」的我等到零点一过，便以 ¥870.78 的价格下了单，选择的配置是特别版 - 白色。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/returning-a-fake-bose-slmii-se/03.png" width="80%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;某宝订单信息&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="3-收到货怎么没发现问题"&gt;3. 收到货怎么没发现问题？&lt;/h3&gt;
&lt;p&gt;经过几天的等待，我在 11 月 4 日这天终于收到了心心念念的音箱。这其中其实也有一个小插曲 —— 宣称&lt;strong&gt;顺丰包邮&lt;/strong&gt;的店家却发的是&lt;strong&gt;圆通快递&lt;/strong&gt;。不过考虑到双十一价格上的优惠，我当时也没有太在意这一点。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/returning-a-fake-bose-slmii-se/04.png" width="80%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;说好的顺丰怎么发成了圆通？&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;之后就是开箱 —— 连接设备 —— 试听的环节。这部分我之所以没有发现问题，主要是以下几个原因：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;价格因素。&lt;/strong&gt; 潜意识里认为「售价和官方相差无几，不太可能是假货」，因而压根没有往这方面想。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;缺乏对比。&lt;/strong&gt; 由于我没有体验过正品，因此也不知道正品在功能上与假货到底有什么不同。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;官网可以注册。&lt;/strong&gt; 拿到音箱，在官网输入序列号很顺利地提示注册成功，官网显示的型号也与我购买的相符（直到后来我才发现 Bose 官网的产品注册其实完全不靠谱）。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;课业繁忙。&lt;/strong&gt; 11 月有两周赶各种 DDL 挺忙的，因而也没有深究这个音箱的一些问题。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;其实在开箱收货的时候，我也发现了几个小问题，可惜当时没有太在意：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;音质平平。&lt;/strong&gt; 虽然我一直都是木耳，但当时这款音箱的音质确实非常非常普通，比起之前我用过的 Apple HomePod 更是有着极为明显的差距（虽然 HomePod 的确在价格和单元体积上都更高端）。更离谱的是，半个多月后我在室友手上花三十块钱买了一只原价 ¥49 的 &lt;a href="https://www.mi.com/buy/detail?product_id=12424"&gt;小米小爱随身音响&lt;/a&gt;，试听后两位室友竟纷纷表示这个音质比 Bose 还要好。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;按键手感极差。&lt;/strong&gt; 假货音箱顶部的几个按钮需要用很大的力气、按压很小的一处才能触发，手感可谓奇差无比。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;大量操作与官网产品手册不符。&lt;/strong&gt; 比如清除蓝牙已配对列表、重置设备等操作均不支持等，当时也询问了卖家，得到的解释是「特别版与普通版有区别，不支持这些操作」。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;不支持固件更新。&lt;/strong&gt; 根据我在 &lt;a href="https://community.bose.com"&gt;Bose Community&lt;/a&gt; 上查询到的 &lt;a href="https://community.bose.com/t5/Portable/SoundLink-Mini-II-Special-Edition-FW-Update-1-0-13/m-p/279735"&gt;信息&lt;/a&gt;，Bose SLMii SE 是可以使用 Bose Updater 进行固件更新的。但是当我把音箱接上电脑尝试更新时，&lt;a href="https://btu.bose.com"&gt;Bose Software Updater 网页&lt;/a&gt; 却完全检测不到设备。鉴于我之前在京东浏览时，也有不少用户反应特别版无法进行固件更新，我并没有太关注这一点。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;连接设备时不能正确播报设备名。&lt;/strong&gt; 按照 Bose 的宣传和我之前 QC 35 消噪耳机的使用体验，在连接到设备时，应该可以语音提示连接到的设备名。然而，假货只有一句生硬的「Connected to Administrator」，让我迷惑了很久这个「Administrator」到底是哪儿来的。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;连接双设备时播放卡顿。&lt;/strong&gt; Bose SLMii 相比一代，加入了蓝牙一拖二的功能，即可以同时蓝牙连接两台设备。这一功能并不新鲜，在我几年前购买的 QC 35 上也有，而且十分方便好用。然而，假货同时连接两台设备时，播放的音频会断断续续、反复卡顿，不得不手动断开一台设备的连接才能使用。&lt;strong&gt;这一点也正是我下面怀疑和维权的出发点。&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="4-寄修至-bose-官方售后"&gt;4. 寄修至 Bose 官方售后&lt;/h3&gt;
&lt;p&gt;11 月下旬的一天，我终于 &lt;a href="https://twitter.com/hly0928/status/1331270371186642949"&gt;忍受不了&lt;/a&gt; 这款音箱&lt;strong&gt;连接双设备时播放卡顿&lt;/strong&gt;的问题，拨通了 Bose 中国 400-880-2266 的官方客服热线。在向售后客服提供产品序列号并详细描述问题后，对方建议我将产品寄送至上海 Bose 中国售后中心进行检测，并且&lt;del&gt;非常大气地&lt;/del&gt;让我寄顺丰到付件。&lt;/p&gt;
&lt;p&gt;次日（11/26），我就在学校顺丰服务点寄出了快件；两天后（11/28），快件就已送达了位于上海市闵行区顾戴路的 Bose 中国售后服务中心。&lt;/p&gt;
&lt;h3 id="5-售后反馈与如梦初醒"&gt;5. 售后反馈与如梦初醒&lt;/h3&gt;
&lt;p&gt;经过约莫一周的等待，我在 12 月 4 日这天傍晚收到了顺丰速运的物流提醒：我有一个快件已从 Bose 售后服务中心发出。&lt;/p&gt;
&lt;p&gt;在等待的几天里，我也没完全闲着，而是猜测了一番送修的音箱到底有什么问题，无非以下几种可能性：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;音箱本身是正品，只是有质量问题&lt;/li&gt;
&lt;li&gt;音箱蓝牙双设备连接卡顿是该系列通病&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;买到了假货&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;于是我就 Google 了一番到底如何辨别真假 Bose SLMii。知乎问题《&lt;a href="https://www.zhihu.com/question/23444980"&gt;如何验证 BOSE Soundlink 的真伪？&lt;/a&gt;》下的这个 &lt;a href="https://www.zhihu.com/question/23444980/answer/218140881"&gt;回答&lt;/a&gt; 对我帮助很大，作者提到的判定方法也让我愈发怀疑我买到了假货。&lt;/p&gt;
&lt;p&gt;而 5 日与 Bose 客服的电话沟通，最终印证了我最坏的想法 —— 对方表示「我所寄修的产品并非 Bose 官方正品，已经给我原封不动寄回」，并表示我需要付寄回时顺丰到付的邮费。到这时，我基本确定这次的某宝购物已经是翻车了，心里开始盘算怎么挽回损失。&lt;/p&gt;
&lt;h3 id="6-退货退款有惊无险"&gt;6. 退货退款：有惊无险&lt;/h3&gt;
&lt;p&gt;虽然寄回的音箱还没到手，但是我在 12 月 5 日当天就已经准备申请退货。与卖家沟通的过程称不上愉快，不过最终大概还是卖家心虚同意了退款，以下是全部的沟通记录：&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/returning-a-fake-bose-slmii-se/05.png" width="80%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;对「连接不稳定」的功能性问题避而不谈&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/returning-a-fake-bose-slmii-se/06.png" width="85%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;以「产品是美行」掩盖实则是假货的事实&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/returning-a-fake-bose-slmii-se/07.png" width="80%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;一波三折终于申请到了退货退款&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;在最后提交退货申请前也有个小插曲 —— 由于距离确认收货已经过了一个多月，某宝的退货申请窗口已经关闭了，因此我还两次致电 9510211 请淘宝客服开放退货权限，所幸很快客服就解决了问题（之后还进行了电话回访，这里表扬一下某宝的客服质量）。&lt;/p&gt;
&lt;p&gt;终于申请到退货，然而卖家又给了我一个惊喜：账号钱款不足，退货存在资金风险，需等待卖家充值。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/returning-a-fake-bose-slmii-se/08.png" width="80%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;「商家账号钱款不足，需等待其充值」&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;在等待一天直至「商家超时未响应」后，某宝系统终于冻结了相关款项并通过了我的退货请求。这期间我也收到了 Bose 官方寄回的音箱，并且发现邮费竟然还是由 Bose 预付了，相当于免费为我做了一次正品检测，可以说是非常良心了。另外，Bose 也随附了一封《非 BOSE 原装产品说明函》，相当于是实锤了假货。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/returning-a-fake-bose-slmii-se/09.png" width="60%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;非 BOSE 原装产品说明函&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;*因我当时未对说明函拍照留档，本照片引自 &lt;a href="https://item.taobao.com/item.htm?spm=a230r.1.14.121.6cee1272kGQIqq&amp;amp;id=619826124822"&gt;此商品&lt;/a&gt; 评论，原作者保留所有权利。&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;12 月 6 日晚上，我终于寄出了音箱（邮费还被退货险抵扣了，难道这商家本就做贼心虚？）；10 日上午，物流信息显示「已签收」；次日，某宝客服主动介入处理退货事宜，而商家在下午也终于确认收货，870.78 元的款项回到了我手中。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/returning-a-fake-bose-slmii-se/10.png" width="60%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;退货退款协商历史&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="7-赶紧买个正品"&gt;7. 赶紧买个正品&lt;/h3&gt;
&lt;p&gt;假货退回去了，双十二也到了 —— 这次我没有选择第三方卖家，而是直接在天猫 BOSE 官方旗舰店下单了同款产品。实付款 ¥1093.59，同样顺丰包邮、支持花呗 12 期免息，也算是赶上了年终优惠的末班车。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/returning-a-fake-bose-slmii-se/11.png" width="80%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;官方旗舰店订单信息&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;而官方也确实靠谱，顺丰快递只用了不到两天时间就已送达。拿到音箱，对假货仍心有余悸的我赶紧按照之前辨别真假的方法一一对比，再借来同学的 Windows 笔电尝试固件更新&lt;sup&gt;&lt;a href="#ref01"&gt;[1]&lt;/a&gt;&lt;/sup&gt;。当检查无误、固件也更新成功的时候，我悬着的心总算是放了下来，这次总算买到了正品。&lt;/p&gt;
&lt;p&gt;正品在做工、音质、功能上都完胜仿冒产品，同时也能享受官方售后、固件更新等权益。为了避免读者再买到假货，下面单开一个部分讲讲怎么辨别真假 Bose SLMii SE。&lt;/p&gt;
&lt;h3 id="8-可能是最全面的-bose-slmii-se-真假辨别法"&gt;8. 可能是最全面的 Bose SLMii SE 真假辨别法&lt;/h3&gt;
&lt;p&gt;结合我的购买经验，下面总结一下真假 Bose SLMii SE 最明显的一些区别。本部分不少内容亦参考了上文中的 &lt;a href="https://www.zhihu.com/question/23444980/answer/218140881"&gt;知乎回答&lt;/a&gt;，特此表示感谢。&lt;/p&gt;
&lt;h4 id="外观及做工"&gt;外观及做工&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;正品的铝合金外壳手感较粗糙，假货较光滑。&lt;/li&gt;
&lt;li&gt;正品顶部&lt;strong&gt;按钮手感均匀、容易按下&lt;/strong&gt;，假货按钮则触发面积小、极难按下（特别是两侧下凹的电源和蓝牙按钮）。&lt;/li&gt;
&lt;li&gt;正品底部充电触点与右侧缝隙很小，假货则缝隙较大。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/returning-a-fake-bose-slmii-se/12.png" width="60%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;正品充电触点右侧缝隙很小&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;ol start="4"&gt;
&lt;li&gt;正品塑封膜上有一张小的产品合格证，包装盒底部有与产品底部相同的 SN 码，部分粗糙的仿品没有注意这两点。&lt;/li&gt;
&lt;li&gt;正品包装盒纸板更硬、说明书印刷质量更好，但这一点需要有对比才能体现。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="音质"&gt;音质&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;正品&lt;strong&gt;低频的量感和质感&lt;/strong&gt;都远胜仿品，大概是用到了 Bose 专利的被动共振双膜技术。&lt;/li&gt;
&lt;li&gt;正品的&lt;strong&gt;声场&lt;/strong&gt;比假货要大不少，播放支持多声道的音频时尤为明显。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="功能"&gt;功能&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;正品【一定】能够在 &lt;a href="https://btu.bose.com"&gt;Bose Software Updater 网站&lt;/a&gt; 进行固件更新&lt;/strong&gt;（macOS Big Sur 暂不支持，请使用 Windows PC），这是所有判断依据中&lt;strong&gt;最重要&lt;/strong&gt;的一点。如果商家以各种理由辩称不能进行固件更新，那么基本可以判定是假货无误。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/returning-a-fake-bose-slmii-se/13.png" width="75%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;目前 Bose SLMii SE 最新固件版本为 1.0.14&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/returning-a-fake-bose-slmii-se/14.png" width="80%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;看到「无法升级」的评论基本就能确定不是正品&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;ol start="2"&gt;
&lt;li&gt;正品&lt;strong&gt;首次开机需要插电激活电池&lt;/strong&gt;，假货不需要；并且正品在&lt;strong&gt;接入/断开电源时有提示音&lt;/strong&gt;，假货也没有。&lt;/li&gt;
&lt;li&gt;正品&lt;strong&gt;首次开机会提示你选择语言&lt;/strong&gt;，假货没有；并且正品预装了英语、中文、日语等 &lt;strong&gt;11 种语言&lt;/strong&gt;，假货则只有四五种语言。&lt;/li&gt;
&lt;li&gt;正品在连接设备后会&lt;strong&gt;语音播报设备名称&lt;/strong&gt;，假货则只有「Connected to Administrator」之类的提示；且正品&lt;strong&gt;提示音清晰、速度适中&lt;/strong&gt;，假货模糊不清、语速较快。&lt;/li&gt;
&lt;li&gt;正品&lt;strong&gt;同时连接到两台设备时连接稳定、声音不卡顿&lt;/strong&gt;，而假货则因为使用了劣质的蓝牙芯片声音会断断续续。&lt;/li&gt;
&lt;li&gt;正品可以参照 Bose SLMii &lt;a href="https://www.bose.cn/content/dam/Bose_DAM/Web/consumer_electronics/global/products/speakers/soundlink_mini_ii/pdf/838445_og_soundlink-mini-ii_special_ml.pdf"&gt;特别版本用户指南&lt;/a&gt; 上的操作方法&lt;strong&gt;开关语音提示、清除蓝牙配对列表、重置扬声器&lt;/strong&gt;，而假货不支持。&lt;/li&gt;
&lt;li&gt;正品在 macOS 的蓝牙设备列表中会显示为音箱，而假货只会显示为耳机或普通蓝牙设备。&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/returning-a-fake-bose-slmii-se/15.png" width="40%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;Bose SLMii SE 在 macOS 蓝牙列表中显示为音箱&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="其他需要注意的地方"&gt;其他需要注意的地方&lt;/h4&gt;
&lt;p&gt;许多 Bose SLMii SE 假货与正品一样可以在官网上注册产品，所以千万&lt;strong&gt;不要把官网能否注册作为判断真伪的标准&lt;/strong&gt;。另外，鉴于这款产品假货实在太多，我个人&lt;strong&gt;不推荐在 &lt;a href="https://www.bose.cn/zh_cn/store_locator.html?productCode=soundlink_mini_ii_special"&gt;Bose 线下授权经销商&lt;/a&gt;、&lt;a href="https://www.bose.cn/zh_cn/store_locator/store_locator_qr_overlay.html"&gt;Bose 官方微信商城&lt;/a&gt;、&lt;a href="https://jdbose.jd.com"&gt;Bose 京东自营旗舰店&lt;/a&gt; 和 &lt;a href="https://bose.tmall.com"&gt;Bose 天猫旗舰店&lt;/a&gt; 之外的任何渠道购买。&lt;/strong&gt;&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/returning-a-fake-bose-slmii-se/16.png" width="40%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;之前买到的假货（下）仍躺在我的已注册产品里&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="9-小结"&gt;9. 小结&lt;/h3&gt;
&lt;p&gt;毫无疑问，这次购买经历让我对某宝一众第三方卖家都有了不小的阴影。对于一些像 Bose SLMii SE 这种本就假货泛滥的数码产品，还是在官方渠道选购最好，切忌为了贪一点小便宜，而在来路不明的卖家那里吃了大亏。&lt;/p&gt;
&lt;p&gt;如果你选购数码产品时也不幸地买到了假货，那么首先要及时保存证据（例如 Bose 提供的非原装产品说明函）；同时不管是否超过了 7 天无理由退款期，都要与商家协商退货退款，挽回损失；最后还可以尝试联系购物平台客服，在我的退货经历中，某宝官方客服的介入对最后成功退款还是有不小的帮助。&lt;/p&gt;
&lt;p&gt;希望我这次不愉快的购物经历也能给你一些经验教训，避免让「购买喜欢的产品」这件开心事变成了「买到假货」的糟心事。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id="-注"&gt;↩︎ 注&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p id="ref01"&gt;
macOS Big Sur 下暂时无法更新固件，会提示不支持该设备；使用 Windows PC 即可正常更新。相关讨论可移步 &lt;a href="https://community.bose.com/t5/Portable/Bose-BTU-updater-not-working-on-MacBook-Air-with-MacOS-11-Big/m-p/568903"&gt;Bose Community&lt;/a&gt;。&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>新玩意｜拓牛智能垃圾桶 T1 不负责任简评</title><link>https://blog.hly0928.com/post/new-stuff-townew-smart-trash/</link><pubDate>Fri, 20 Nov 2020 22:00:00 +0800</pubDate><author> Steven</author><guid>https://blog.hly0928.com/post/new-stuff-townew-smart-trash/</guid><description>&lt;h3 id="写在开始之前"&gt;写在开始之前&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;「新玩意」&lt;/strong&gt; 是咱&lt;del&gt;模仿少数派&lt;/del&gt;开的一个新坑。正如本栏目的名字一样，这里主要用来简单记录或测评一些 Steven 最近买的新玩意。&lt;/p&gt;
&lt;p&gt;另外，这一栏目的文章篇幅均不会太长，&lt;del&gt;所以我也就放在了 Mini Blog 里&lt;/del&gt; 但是 Notion 的中文排版着实太糟糕了，我思来想去还是麻烦一点，放在主 Blog 里吧。&lt;/p&gt;
&lt;h3 id="怎么买了个智能垃圾桶"&gt;怎么买了个智能垃圾桶？&lt;/h3&gt;
&lt;p&gt;说来话长，所以长话短说 —— 双十一的凌晨清空购物车之后，我膨胀的物欲仍旧没有完全消解，所以&lt;del&gt;在容易头脑发热的深夜&lt;/del&gt;就入手了一个拓牛智能垃圾桶 T1 + 12 个配套垃圾盒。一方面，每天打包寝室垃圾、换垃圾袋着实让人烦躁 &lt;del&gt;（加上这个活基本都是我在干，工具人无误了）&lt;/del&gt;；另一方面，我也想体验一下这款售价为普通垃圾桶&lt;strong&gt;数十倍&lt;/strong&gt;的垃圾桶究竟有多「智能」。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/new-stuff-townew-smart-trash/01.jpg" width="50%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;T1 &amp;#43; 12 个垃圾盒 = ¥399&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="智能的垃圾桶"&gt;「智能」的垃圾桶？&lt;/h3&gt;
&lt;p&gt;是的，在万物均可以「智能」的 0202 年，垃圾桶也可以「智能」了。不过，不同于市面上常见的百元左右、只能感应开合的&lt;strong&gt;伪&lt;/strong&gt;智能垃圾桶，拓牛的智能垃圾桶凭借&lt;strong&gt;自动打包、自动换袋&lt;/strong&gt;这两项核心卖点，堪称真正的「智能垃圾桶」。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/new-stuff-townew-smart-trash/02.gif" width="75%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;官网介绍的打包 &amp;#43; 换袋过程&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;从原理上来说，&lt;strong&gt;自动打包&lt;/strong&gt;靠的是垃圾桶上方的两根悬臂交叉束缚垃圾袋口，然后再高温热熔封闭袋口；&lt;strong&gt;自动换袋&lt;/strong&gt;在检测到你拿走已打包的垃圾后，会启动内部的负压鼓风机，将垃圾盒内的垃圾袋「吸」到桶壁上，实现垃圾袋的更换。&lt;/p&gt;
&lt;h3 id="核心功能的体验如何"&gt;核心功能的体验如何？&lt;/h3&gt;
&lt;p&gt;首先说说所有「智能」垃圾桶都有的基本功能 —— &lt;strong&gt;感应开合桶盖&lt;/strong&gt;。在这一点上，拓牛 T1 的表现只能说是差强人意。首先，&lt;strong&gt;开盖时间&lt;/strong&gt;距离官方宣传的「0.x」秒还是有不小差距，实际使用中要等待一秒左右。第二，开关盖时&lt;strong&gt;噪音&lt;/strong&gt;较大，特别是在晚上会十分明显。不过，&lt;strong&gt;感应防夹手&lt;/strong&gt;的设计还是很人性化的。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/new-stuff-townew-smart-trash/03.gif" width="50%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;感应开合盖&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;最后也是最致命的一点，我认为 T1 的红外&lt;strong&gt;感应器位置&lt;/strong&gt;设计不够合理、感应距离也较短：从下图中不难看出，由于桶盖边缘是向内倾斜的，红外感应范围也不可避免的向内倾斜了；这就导致宣传中的「屈膝感应」极难触发，甚至在一定程度上影响了挥手感应的使用体验。毕竟，在我们尝试感应开盖时，手部会习惯性放到桶身前边缘上方，而这时 T1 往往是感应不到的。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/new-stuff-townew-smart-trash/04.jpg" width="60%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;向内倾斜的红外感应器&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;然后让我们来谈谈&lt;strong&gt;自动打包&lt;/strong&gt;的体验。不同于感应开合的不太灵敏，自动打包的使用感受基本可以用一个字概括 —— &lt;strong&gt;爽&lt;/strong&gt;。正如我之前在 &lt;a href="https://twitter.com/hly0928/status/1325369166816178177"&gt;Twitter&lt;/a&gt; 上写的，自动打包速度很快、效果出色，而且超限打包等保护措施也足够完善。十秒钟左右完成打包过程，提走垃圾袋，整个流程一气呵成，干净又方便。&lt;/p&gt;
&lt;p&gt;拿走垃圾袋之后，就是最后的&lt;strong&gt;自动换袋&lt;/strong&gt;。得益于负压风机的设计，自动换袋铺出来的垃圾袋非常平整，能充分利用桶内容积，&lt;del&gt;简直非人力可为&lt;/del&gt;。缺点则是换袋过程中风机噪音较大（听说 1S 有所改进），不过鉴于换袋并不是一件太过频繁的操作也不太需要静音，所以这一点影响不大。另外需要指出的一点是，在垃圾桶上半部分（非上盖）整体开启的时候，桶身会有些许的摇晃和移位，毕竟这一部分才是垃圾桶主要的重量来源。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/new-stuff-townew-smart-trash/05.gif" width="50%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;一键打包换袋（有剪辑，实际时长较长）&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;总的来说，在核心卖点上，拓牛做得还是十分不错的。打包换袋只需要一键操作，大幅提升了「扔垃圾」这件事的愉悦感和科技感，提供了十分独特的体验。&lt;/p&gt;
&lt;h3 id="一些槽点"&gt;一些槽点&lt;/h3&gt;
&lt;p&gt;这部分其实基本也是我之前在 &lt;a href="https://twitter.com/hly0928/status/1325369166816178177"&gt;Twitter&lt;/a&gt; 上写的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;垃圾桶开口较小。一般的垃圾桶都是上大下小的倒圆台形设计，然而 T1 上下等宽，这也导致了部分体积较大的垃圾很难入桶（比如干拌方便面盒）。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/new-stuff-townew-smart-trash/06.png" width="50%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;总宽度 24cm，内部开口宽度约为 18cm&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;桶内上方有照明灯带，然而只有在上盖完全开启后才会点亮。晚上使用时总会感觉慢了一拍，为什么不设计成在开盖时同时点亮呢？&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/new-stuff-townew-smart-trash/07.gif" width="60%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;灯带在上盖完全打开后才会点亮&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;附带了充电线却不给插头，而且输入电流规格是 5V/2A。也就是说你用 Apple 祖传五福一安去充电的话速度应该会很慢，还好我有&lt;del&gt;好多好多个&lt;/del&gt; 5V/2A 的插头。这一点我认为官方应该直接提供一体式充电线 + 插头，毕竟你充电接口也&lt;del&gt;不是 Type-C&lt;/del&gt;是兼容性差的老式圆孔。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/new-stuff-townew-smart-trash/08.png" width="65%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;官网的装箱清单是一体式充电器，然而我收到的只有 USB 接口的充电线&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;续航和「充电使用」本身就是槽点。虽然在寝室里我是选择了一直插电使用，但对于许多旁边没有插座的家庭使用环境而言，为什么不采用更换电池这种更方便的供电方式呢？&lt;/li&gt;
&lt;li&gt;必须搭配专用垃圾盒。这其实也无可厚非，毕竟上面两个核心卖点都依赖于专门的无断点垃圾袋；不过 12 个垃圾盒一百多块的价钱也是使用过程中不得不考虑的成本。按照一天打包一桶垃圾来计算，垃圾盒的成本大约在 10 元/月的样子，比起便宜大碗的普通垃圾袋还是贵了很多。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/new-stuff-townew-smart-trash/09.jpg" width="60%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;一只专用垃圾盒&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;专用垃圾袋质量一般。我之前尝试过手撕垃圾袋，比较轻松地就能撕开口子。所以很明显拓牛的产品并不太适合装汤汤水水的厨余垃圾。&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/new-stuff-townew-smart-trash/10.jpg" width="60%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;比较轻松就能撕开的专用垃圾袋&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="后话和值不值得买"&gt;后话和「值不值得买？」&lt;/h3&gt;
&lt;p&gt;很简单，在这个价位上，不值。但是，由于目前拓牛的两大核心卖点还没有任何竞品，所以从支持创新、体验「黑科技」的角度来说，T1 仍然算得上一款不错的产品。目前我最大的希望就是支持&lt;strong&gt;自动打包、自动换袋&lt;/strong&gt;的垃圾桶能像屏幕挂灯一样，涌现出一批价格更低、体验接近的竞品，真正实现市场的普及。&lt;/p&gt;</description></item><item><title>从菜鸟裹裹身份码取件谈起</title><link>https://blog.hly0928.com/post/talk-about-cai-niao-guo-guo-app/</link><pubDate>Mon, 26 Oct 2020 23:00:00 +0800</pubDate><author> Steven</author><guid>https://blog.hly0928.com/post/talk-about-cai-niao-guo-guo-app/</guid><description>&lt;h3 id="前言"&gt;前言&lt;/h3&gt;
&lt;p&gt;最近刷到了这样一条 &lt;a href="https://twitter.com/Nozomi660/status/1320591022125056002"&gt;推文&lt;/a&gt;。突然反应过来，在短短的半年里，菜鸟驿站强制要求使用身份码取件，就已经成为了全国高校的普遍现象。&lt;/p&gt;
&lt;h3 id="其他高校是怎么样的"&gt;其他高校是怎么样的？&lt;/h3&gt;
&lt;p&gt;从这个 &lt;a href="https://www.zhihu.com/question/400430211"&gt;知乎问题&lt;/a&gt; 里各位答主所言来看，今年年中各大高校的情况基本不外乎：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;强制要求下载使用菜鸟裹裹身份码取件&lt;/li&gt;
&lt;li&gt;身份码前期可以在支付宝/淘宝查看，后期变为仅能在菜鸟裹裹 app 中查看&lt;/li&gt;
&lt;li&gt;驿站工作人员态度不佳、管理混乱&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="我校是怎么样的"&gt;我校是怎么样的？&lt;/h3&gt;
&lt;p&gt;客观上来说，在我校取快递的体验还是比较轻松的。除了顺丰和京东有单独的营业点，其余所有快递（四通一达和百世等&lt;del&gt;阴间快递&lt;/del&gt;）都会送到两个菜鸟驿站中的一个；而两个驿站都位于学校商业街，免除了在某些学校「横跨校园只为取两件快递」之苦。&lt;/p&gt;
&lt;p&gt;然而，在今年 8 月返校后，我发现我校的菜鸟驿站也「紧跟潮流」，强制要求使用菜鸟裹裹身份码取件。详细地说，为了取一个快递，你不仅需要根据短信或 app 中的&lt;strong&gt;取件码&lt;/strong&gt;，在密密麻麻的货架间找到你的那一件；还需要打开菜鸟裹裹 app 调出&lt;strong&gt;身份码&lt;/strong&gt;，与快递单同时放到自助终端上进行扫描，完成取件。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/talk-about-cai-niao-guo-guo-app/01.jpg" width="80%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;一台自助取件终端（图片来自网络）&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;可能是这一设定之前被喷得太惨，我在开学后进行取件时，并没有出现过上面的知乎问题中某些答主「必须下载菜鸟裹裹 app」的情况，而可以直接在支付宝 - 我的快递中获得身份码。但是，这并&lt;strong&gt;不&lt;/strong&gt;代表整个取件流程就让人满意。首先，对于平时不常网购的同学，&lt;strong&gt;首次取件往往流程不清、耗时很长&lt;/strong&gt;，驿站周围也缺乏必要的指引；其次，在支付宝中&lt;strong&gt;调出身份码需要进行多次跳转&lt;/strong&gt;，不仅浪费时间，用户体验也很糟糕 &lt;del&gt;（反正阿里系 app 都压根不注重用户体验）&lt;/del&gt;；最后，在中午、傍晚等取件高峰时段，流程的繁琐往往让&lt;strong&gt;自助取件机前排起长队&lt;/strong&gt;，如果届时还有一两位不太熟悉操作的同学，那足以让排在后面的人抓狂不已。&lt;/p&gt;
&lt;h3 id="取件码的作用是啥"&gt;取件码的作用是啥？&lt;/h3&gt;
&lt;p&gt;从人工签收到取件码，菜鸟驿站给出的理由是「之前人工签收时只需要确认姓名、手机尾号，而这些信息在快递回单上也能直接查看到，因此常有错取、误取甚至偷拿快递的事情发生；取件码能有效验证个人身份，防止错取快递的现象」。&lt;/p&gt;
&lt;p&gt;然而，一个小小的取件码真的能达到如此的效果吗？对于那些老老实实扫码签收的同学来说，取件码确实能避免误拿别人的快件；但是，在取件码上线后，我校驿站的工作人员便基本不再负责取件、而只负责寄件。也就是说，你完全可以拿到自己的快件后直接走人，甚至可以拿取别人的快件后一走了之。对于这样的行为，取件码非但不能起到「防止错取快件」的作用，甚至在一定程度上为偷拿他人快递提供了便利。&lt;/p&gt;
&lt;p&gt;退一万步说，即便大多数同学不会做偷拿他人快递这样的事，但在面对数十人的长长队伍时，你是会选择直接拿了自己的快件走人，还是老老实实排队扫码（扫码除了让快件显示已签收，没有任何作用）？反正前者我是干过好几次，而我的某位室友已经日常拿了快件就走人了。&lt;/p&gt;
&lt;h3 id="尾巴"&gt;尾巴&lt;/h3&gt;
&lt;p&gt;用身份码取件，本质只是将驿站工作人员的工作量分摊到了学生身上，既谈不上便利，也无益于防止误取、偷拿快件。然而，尽管对菜鸟驿站的如此行为感到十分不满，身为学生的我们依旧做不了什么。只能在手头稍稍充裕时安慰一句自己，用京东它不香吗？&lt;/p&gt;</description></item><item><title>谈谈 iOS 平台上的几款代理软件</title><link>https://blog.hly0928.com/post/talk-about-some-proxy-apps-on-ios/</link><pubDate>Sun, 24 May 2020 02:40:00 +0800</pubDate><author> Steven</author><guid>https://blog.hly0928.com/post/talk-about-some-proxy-apps-on-ios/</guid><description>&lt;blockquote&gt;
&lt;p&gt;本文部分内容可能不适合无经验的小白阅读。&lt;/p&gt;
&lt;p&gt;本文所述软件均不在 App Store 中国区提供。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;自从去年 Quantumult X 上架以来，我就陆陆续续折腾了规则、策略组、JavaScript 脚本等功能，并相继入手了 Quantumult X、Surge、Loon 几款代理软件。加上先前一直在用的 Shadowrocket 和 Quantumult，我也算是把 iOS 平台上最热门的代理软件都使用了一遍。&lt;/p&gt;
&lt;p&gt;本文就简单谈谈上述几款软件的上手体验，对比一下它们的区别。在开始之前，当然要先放一只可爱的 Clash 猫：&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/talk-about-some-proxy-apps-on-ios/01.jpg" width="25%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;缝 合 怪&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="surge最强大也是最贵"&gt;Surge：最强大也是最贵&lt;/h3&gt;
&lt;p&gt;说到 iOS 平台的代理软件，绕不开的一款就是元老级别的 Surge。毫无疑问，Surge iOS 目前首年 \$50 + 后续每年 \$15
的价格肯定是虚高的。然而，Surge 优秀的稳定性、出色的软件设计、强大的高级功能&lt;del&gt;和逼格&lt;/del&gt;，也在一定程度上支撑了其高昂的价格。下面就说说几个 Surge only 的 features：&lt;/p&gt;
&lt;h4 id="ios--macos-双平台支持"&gt;iOS / macOS 双平台支持&lt;/h4&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/talk-about-some-proxy-apps-on-ios/02.png" width="85%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;Surge Mac &amp;amp; Surge iOS&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;在所有代理软件中，Surge 是唯一提供了 iOS / macOS 双平台支持的一个。而且，两个平台在功能上相差无几（最大的区别应该是 macOS 多出了一个 &lt;a href="https://medium.com/@Blankwonder/surge-mac-as-gateway-b0bd68464a4b"&gt;网关模式&lt;/a&gt;），也能使用同一份配置文件。另外，尽管本文讨论的是 iOS 平台，但对于 macOS 而言，Surge 也算是功能十分强大的代理软件了（相较于目前的 &lt;a href="https://github.com/yichengchen/clashX/tree/master"&gt;ClashX&lt;/a&gt; 而言）。&lt;/p&gt;
&lt;h4 id="最强大的规则支持"&gt;最强大的规则支持&lt;/h4&gt;
&lt;p&gt;从 Surge 自身来说，除了其他代理软件也支持的 &lt;code&gt;DOMAIN&lt;/code&gt;, &lt;code&gt;DOMAIN-SUFFIX&lt;/code&gt;, &lt;code&gt;DOMAIN-KEYWORD&lt;/code&gt;, &lt;code&gt;IP-CIDR&lt;/code&gt;, &lt;code&gt;USER-AGENT&lt;/code&gt; 等规则类型，Surge 还支持 &lt;code&gt;URL-REGEX&lt;/code&gt;, 逻辑匹配 (&lt;code&gt;AND&lt;/code&gt;, &lt;code&gt;OR&lt;/code&gt;, &lt;code&gt;NOT&lt;/code&gt; 三种) 等规则&lt;sup&gt;&lt;a href="#ref01"&gt;[1]&lt;/a&gt;&lt;/sup&gt;，是 iOS 平台上对规则支持最强大的代理软件。&lt;/p&gt;
&lt;p&gt;从规则集 (Ruleset) 引用来说，得益于 Surge 推出时间早、规则支持好、使用人数多，它拥有最丰富的在线规则集。&lt;a href="https://github.com/lhie1/Rules/tree/master"&gt;lhie1/Rules&lt;/a&gt;、&lt;a href="https://github.com/ConnersHua/Profiles/tree/master"&gt;神机规则&lt;/a&gt; 和许多其他热门规则仓库对 Surge 均有完整的支持，能在很大程度上方便自定义规则的编写。&lt;/p&gt;
&lt;h4 id="最完善的-javascript-脚本支持"&gt;最完善的 JavaScript 脚本支持&lt;/h4&gt;
&lt;p&gt;Surge 在代理软件中最早提供了对 JavaScript 脚本的支持，同时也是目前做得最完善的一个。由于 Quantumult X 商店版放弃了对远程脚本的支持，而 Loon 现在仍不够成熟稳定，因此如果想要使用远程脚本，实现去广告、自动签到等高级功能，目前最好的选择仍是 Surge。&lt;/p&gt;
&lt;h4 id="一些其他的高级特性"&gt;一些其他的高级特性&lt;/h4&gt;
&lt;p&gt;除了上面所述的双平台支持、规则系统和 JS 脚本之外，Surge 还有一些&lt;del&gt;你可能用不到的&lt;/del&gt;值得一提的高级特性：&lt;/p&gt;
&lt;h5 id="最近请求--抓包功能"&gt;最近请求 / 抓包功能&lt;/h5&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/talk-about-some-proxy-apps-on-ios/03.png" width="85%"/&gt;
&lt;/figure&gt;
&lt;p&gt;Surge 之前一直标榜自己是 &lt;strong&gt;网络调试工具&lt;/strong&gt; &lt;del&gt;虽然我觉得这就是个笑话&lt;/del&gt;，因此它也有着还算好用的抓包功能。尽管 Quantumult X 等软件也可以抓取并保存请求，但 Surge 在界面和易用性上确实做得不错，能够简化我们对规则或脚本等功能的调试。&lt;/p&gt;
&lt;h5 id="dns-over-https"&gt;DNS over HTTPS&lt;/h5&gt;
&lt;p&gt;Surge iOS 在 4.3.0 版本后完善了对 DNS over HTTPS (DoH) 的支持&lt;sup&gt;&lt;a href="#ref02"&gt;[2]&lt;/a&gt;&lt;/sup&gt;。在目前的代理软件中，只有 Surge 提供了 DoH 支持。如果你已经在使用 Surge 了，那么不妨安装我写的 &lt;a href="https://raw.githubusercontent.com/hly0928/Proxy-profiles/master/Surge/Module/DoH.sgmodule"&gt;Module&lt;/a&gt; 来体验阿里公共 DNS 的 DoH 服务，提高 DNS 查询的隐私性和安全性。&lt;/p&gt;
&lt;h5 id="module"&gt;Module&lt;/h5&gt;
&lt;p&gt;Module（模块）是 Surge 最近加入的新功能。Module 是一系列设置的集合，可以用于覆盖当前配置的部分设定&lt;sup&gt;&lt;a href="#ref03"&gt;[3]&lt;/a&gt;&lt;/sup&gt;。对于小白用户来说，通过直接安装他人写好的 Module（比如 lhie1 的 &lt;a href="https://github.com/lhie1/Rules/tree/master/Surge/Surge%203/Module"&gt;Module&lt;/a&gt;），可以方便地实现去除特定 app 广告等高级功能。而对于专业用户而言，Module 也为微调和开关部分设置提供了便利。&lt;a href="https://github.com/hly0928/Proxy-profiles/tree/master/Surge/Module"&gt;这里&lt;/a&gt; 有我自用的几个 Modules，可以实现开关 WiFi Access、开关 DoH、开关对所有域名进行 MitM 等功能。&lt;/p&gt;
&lt;h4 id="小结"&gt;小结&lt;/h4&gt;
&lt;p&gt;Surge 是我在 iOS 平台上 &lt;strong&gt;使用频率最高的&lt;/strong&gt; 主力代理软件。&lt;del&gt;才不是因为花了这么多钱呢！&lt;/del&gt; 可以说，正如 Surge 最早设计并完善了现在重要的 &lt;strong&gt;策略组&lt;/strong&gt; 特性一样，对于实验性的高级功能，Surge 一般是最早提出并支持的，这些功能也往往会被其他代理软件在后续更新中模仿借鉴。不过，如果你并不需要这些高级特性，那么 Surge 对你来说可能并没有什么吸引力 &lt;del&gt;（毕竟价格太高）&lt;/del&gt;。况且，Surge 还有一些其他的缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不提供 SSR 协议支持&lt;/li&gt;
&lt;li&gt;一次购买只能给三台设备使用&lt;/li&gt;
&lt;li&gt;双平台购买成本超过 $100 &lt;del&gt;贵贵贵贵贵死了！&lt;/del&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="推荐资源"&gt;推荐资源&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;官方 &lt;a href="https://manual.nssurge.com"&gt;Manual&lt;/a&gt;（英文）&lt;/li&gt;
&lt;li&gt;官方 &lt;a href="https://community.nssurge.com"&gt;支持社区&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;开发者写的《&lt;a href="https://manual.nssurge.com/book/understanding-surge/cn/"&gt;Surge 官方中文指引：理解 Surge 原理&lt;/a&gt;》&lt;/li&gt;
&lt;li&gt;我自用的 &lt;a href="https://github.com/hly0928/Proxy-profiles/blob/master/Surge/Surge.conf"&gt;配置文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Fndroid"&gt;@Fndroid&lt;/a&gt; 大佬的 &lt;a href="https://github.com/Fndroid/jsbox_script/wiki/%E5%85%B3%E4%BA%8E%E7%AD%96%E7%95%A5%E7%BB%84%E7%9A%84%E7%90%86%E8%A7%A3"&gt;关于策略组的理解&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://zhuangzhuang.cf"&gt;@ZHUANGZHUANG&lt;/a&gt; 大佬的 &lt;a href="https://zhuangzhuang.cf/2018-11-14/surge"&gt;Surge 配置详解&lt;/a&gt;（部分内容可能过时）&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/ConnersHua"&gt;@ConnersHua&lt;/a&gt; 大佬的 &lt;a href="https://github.com/DivineEngine/Profiles/tree/master"&gt;规则仓库&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="quantumult-x最值得推荐"&gt;Quantumult X：最值得推荐&lt;/h3&gt;
&lt;p&gt;说完 Surge，我们就来谈一谈现在最热门的代理软件：Quantumult X。作为 Quantumult 的船新升级版，Quantumult X 秉承了加量不加价的原则，在支持策略组、JS 脚本等高级功能的基础上，仍保持了 $8 的较低售价（在发售头两天 Quantumult 老用户甚至可以免费领取），实属良心。与其他代理软件相比，Quantumult X 最突出的优势有以下几点：&lt;/p&gt;
&lt;h4 id="也许是最好看的外观"&gt;也许是最好看的外观&lt;/h4&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/talk-about-some-proxy-apps-on-ios/04.png" width="85%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;颜控一本满足.png&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;对我个人而言，Quantumult X 的外观可能是目前所有代理软件中最合我胃口的一个。尤其是它对策略组的处理，兼顾了美观和实用性。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/talk-about-some-proxy-apps-on-ios/05.png" width="85%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;Quantumult X 与 Surge 的策略组界面&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;Quantumult X 主页面的节点列表支持按配置文件中 &lt;code&gt;[server_remote]&lt;/code&gt; 部分进行分组；顶部的策略组 + 可自定义图标的设计，不但大大方便了选择，在外观上也比 Surge 更胜一筹。而相比 Shadowrocket，Quantumult X 的设计更有现代感和科技感，&lt;del&gt;当然配置也复杂得多。&lt;/del&gt;&lt;/p&gt;
&lt;h4 id="较全面的协议支持"&gt;较全面的协议支持&lt;/h4&gt;
&lt;p&gt;Quantumult X 目前支持 SS, SSR, Vmess, HTTP(S), Trojan 协议。尽管在协议支持上不如 Shadowrocket 那么全面，但也绝对能满足 99% 机场的需要了。特别是如果你有机场仅支持 SSR 协议，那么 Quantumult X 就是一个不错的选择。&lt;/p&gt;
&lt;h4 id="功能与价格的最佳平衡"&gt;功能与价格的最佳平衡&lt;/h4&gt;
&lt;p&gt;正如上文所说，Quantumult X 在支持许多高级功能的基础上，仍保持了 $8 的较低售价。在功能上，Quantumult X 拥有 Surge 大约 80% - 90% 的功能，所没有的功能（如逻辑规则、DoH）对普通用户而言也非必要；而前者的买断价格还不到后者的 1/6，且不需要后续每年再额外掏钱。&lt;/p&gt;
&lt;p&gt;可以说，Quantumult X 凭借良心的售价和优秀的功能，实现了功能与价格之间的最佳平衡。&lt;/p&gt;
&lt;h4 id="不得不提的一些不足"&gt;不得不提的一些不足&lt;/h4&gt;
&lt;p&gt;尽管 Quantumult X 很好用，但还是有一些不得不提的问题：&lt;/p&gt;
&lt;h5 id="规则优先级与自己造轮子"&gt;规则优先级与自己造轮子&lt;/h5&gt;
&lt;p&gt;以下内容引自 &lt;a href="https://github.com/ConnersHua/Profiles/tree/master"&gt;神机规则&lt;/a&gt; 维护者 &lt;a href="https://github.com/ConnersHua"&gt;@ConnersHua&lt;/a&gt;&lt;sup&gt;&lt;a href="#ref04"&gt;[4]&lt;/a&gt;&lt;/sup&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;但是，Quantumult 的作者也有自己的执着造成一些体验问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;JS 脚本远程砍了（这个放在第一点说其实是我基本不用脚本，而且这是盗版党造成的）&lt;/li&gt;
&lt;li&gt;VMess URI 自己造标准（这就是很多人经常说的为什么扫一扫、订阅链接添加不上 v2 协议是不是不支持 balabala）&lt;/li&gt;
&lt;li&gt;规则类型优先级问题，在我看来这是很多余的设计，本来就是简单的前面规则覆盖后面规则的行为，非要搞类型优先级，那么就带来一些使用场景问题：&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;（在订阅时 DOMAIN 会转换成 host，这个 host 也是 Quantumult 作者自己造的轮子，以下仍以 DOAMIN 表述）&lt;/p&gt;
&lt;p&gt;DOMAIN-KEYWORD 规则优先级带来的问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;本来 &lt;code&gt;DOMAIN-KEYWORD,adservice,REJECT&lt;/code&gt; 就能解决的问题，如果有条代理或者直连规则为 xxx.com 而它有广告域名为 adservice.xxx.com 我还要专门写一条 &lt;code&gt;DOMAIN,adservice.xxx.com,REJECT&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在自定义规则时，比如想对 Instagram 进行指定节点，那么你用 &lt;code&gt;DOMAIN-KEYWORD,instagram,ProxyA&lt;/code&gt; 就存在优先级问题，因为其他人的规则中就可能存在 Instagram 的域名如 &lt;code&gt;DOMAIN-SUFFIX,instagram.com,PROXY&lt;/code&gt; 和 &lt;code&gt;DOMAIN-SUFFIX,cdninstagram.com,PROXY&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;USER-AGENT 规则优先级带来的问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;对于不同应用使用统一域名时不能再简单的使用 User-Agent 规则进行分流，比如说 YouTube 和 YouTube Music，其主要传输内容域名均为 googlevideo.com ，这时候你是不能写两条 DOMAIN-SUFFIX 的，那么在 Surge 一类的工具上简单的做法就是加一条 YouTube Music 的 UA 如 &lt;code&gt;USER-AGENT,com.google.ios.youtubemusic*,PROXY&lt;/code&gt; 和 &lt;code&gt;USER-AGENT,YouTubeMusic*,PROXY&lt;/code&gt;，但是在 X 中 UA 类型规则优先级极低也就没法用&lt;/li&gt;
&lt;li&gt;有一些游戏应用是通过看广告解锁功能，解决方法也同上在广告规则前以 UA 规则指定直连来覆盖广告规则，但是同样是优先级问题造成没法用&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果说 DOMAIN-KEYWORD 规则的优先级问题解决方式是麻烦，那么 USER-AGENT 规则的优先级问题就是无解&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如上所述，Quantumult X 没有完全采用 Surge 等软件规则按顺序匹配的设定，而是搞了一套莫名其妙的优先级系统，进而导致了规则维护中的种种问题。另外，在规则类型的写法上，Quantumult X 也没有采用 Surge 等软件的 &lt;code&gt;DOMAIN&lt;/code&gt;，而是写成了 &lt;code&gt;host&lt;/code&gt;（尽管写成 &lt;code&gt;DOMAIN&lt;/code&gt; 也能用）、没有采用 &lt;code&gt;IP-CIDR6&lt;/code&gt; 而是写成了 &lt;code&gt;ip6-cidr&lt;/code&gt;，等等。这些地方在普通用户眼中可能无关紧要，但会给规则维护者带来一定的不便。同时，一些 URI 标准上的自己造轮子，也可能会给小白用户带来困扰。&lt;/p&gt;
&lt;h5 id="不支持远程-js-脚本"&gt;不支持远程 JS 脚本&lt;/h5&gt;
&lt;p&gt;&lt;strong&gt;提示：&lt;/strong&gt; 此问题目前基本解决了，但是不排除作者以后再次改动的可能。&lt;/p&gt;
&lt;p&gt;这一点在上面的引述中也提到了。目前，Quantumult X 只有 TestFlight (TF) 版支持远程 JS 脚本，商店版&lt;del&gt;在 v1.0.3 后移除了相关支持&lt;/del&gt; v1.0.10 又把远程脚本加回来了，&lt;del&gt;但是每个脚本都要手动缓存还是很麻烦&lt;/del&gt;现在使用时长足够之后，脚本就能直接作为远程资源缓存了。&lt;del&gt;如果你有 JS 脚本方面的需求，那么只能借助 WorkingCopy 等软件本地挂载脚本库&lt;sup&gt;&lt;a href="#ref05"&gt;[5]&lt;/a&gt;&lt;/sup&gt;，或是使用 Surge 或下文中的 Loon。&lt;/del&gt;&lt;/p&gt;
&lt;h5 id="上手难度较高"&gt;上手难度较高&lt;/h5&gt;
&lt;p&gt;Quantumult X 中的细节和隐藏设计较多，上手难度可能是这几款软件中最高的。如果你不需要高级功能、只想简单使用，那么 Quantumult X 可能并不适合你。&lt;/p&gt;
&lt;h4 id="小结-1"&gt;小结&lt;/h4&gt;
&lt;p&gt;Quantumult X 是我目前在 iOS 平台上 &lt;strong&gt;最推荐&lt;/strong&gt; 的代理软件。如果你有一定高级功能的需求，又不想&lt;del&gt;大出血&lt;/del&gt;买 Surge，那么 Quantumult X 无疑是你的最佳选择。&lt;/p&gt;
&lt;h4 id="推荐资源-1"&gt;推荐资源&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;官方 &lt;a href="https://github.com/crossutility/Quantumult-X/blob/master/sample.conf"&gt;示例配置&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;我自用的 &lt;a href="https://github.com/hly0928/Proxy-profiles/blob/master/QuantumultX/QuantumultX.conf"&gt;配置文件&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Koolson/Qure"&gt;Qure 图标组&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Shawn 大佬的 &lt;a href="https://www.notion.so/Quantumult-X-1d32ddc6e61c4892ad2ec5ea47f00917"&gt;Quantumult X 不完全教程&lt;/a&gt;（非常详细全面，强烈推荐）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="shadowrocket性价比最高真香"&gt;Shadowrocket：性价比最高，真香&lt;/h3&gt;
&lt;p&gt;说完了上面两款功能复杂的软件，让我们谈谈简单一点的 Shadowrocket。自从上架以来，小火箭就以其 $3 的价格广受好评，成为了最适合新手入门使用的代理软件。其最大的优势有以下几点：&lt;/p&gt;
&lt;h4 id="性价比无敌"&gt;性价比无敌&lt;/h4&gt;
&lt;p&gt;相比于 Surge 的「天价」和 Quantumult X 仍稍显昂贵的 $8，小火箭 3 刀的价格毫无疑问要亲民得多。作为性价比最高的代理软件，可以说，不管你最后是否将其当成主力使用，买一个小火箭都不会吃亏。&lt;/p&gt;
&lt;h4 id="最全面的协议支持"&gt;最全面的协议支持&lt;/h4&gt;
&lt;p&gt;如果 Quantumult X 算「较全面的协议支持」，那么小火箭无疑是「最全面的协议支持」。除了支持常见的 SS, SSR, Vmess, HTTP(S), Socks5, Snell, Trojan 协议，小火箭还拥有最全面的混淆 / 加密支持，能够解析多种形式的 SS(R) 订阅，兼容 99.99% 的机场。另外，小火箭对新协议的兼容一般也会快于其他代理软件。&lt;/p&gt;
&lt;h4 id="上手简单"&gt;上手简单&lt;/h4&gt;
&lt;p&gt;作为最适合新手使用的代理软件，小火箭的界面简单易懂，学习成本也极低：填入机场订阅、选择节点、随便导入一个远程规则（甚至不用）就能用了。相比于上面两款软件复杂的配置文件，小火箭傻瓜化的操作对需求不高的用户而言更友好。&lt;/p&gt;
&lt;h4 id="小结-2"&gt;小结&lt;/h4&gt;
&lt;p&gt;Shadowrocket 是我在 iOS 上买的第一款代理软件。关于它，其实没有太多好说的。如果你对功能要求不高，那么买小火箭准没错。当然，相比其他软件，小火箭尽管价格便宜，但也有一些小问题：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;耗电量和稳定性表现不如 Surge / Quantumult X&lt;/li&gt;
&lt;li&gt;策略组、脚本等功能简陋，&lt;del&gt;约等于没有&lt;/del&gt;&lt;/li&gt;
&lt;li&gt;MitM 不稳定，去广告能力有限&lt;/li&gt;
&lt;li&gt;界面一般般，不过不难看&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="quantumult停更了"&gt;Quantumult：停更了？&lt;/h3&gt;
&lt;p&gt;在 Quantumult X 上架之前，Quantumult 是经常拿来跟小火箭对比的存在。不过，在 X 推出之后，Quantumult 已经有七个多月没有更新了&lt;sup&gt;&lt;a href="#ref06"&gt;[6]&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/talk-about-some-proxy-apps-on-ios/06.png" width="30%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;Quantumult 主界面&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;在我第一次用上 Quantumult 的时候，最吸引我的就是其主界面世界地图的设计。Quantumult 会基于服务器 IP 大致判断其地理位置并显示在地图上，这比起当时普普通通的 Shadowrocket 来说，的确给人以耳目一新的感觉。不过，Quantumult 也有一些问题，比如策略组不能随时切换、SS 订阅没有组设定会弹出警告、UDP 转发不够完善等等。&lt;/p&gt;
&lt;p&gt;长话短说，&lt;strong&gt;鉴于 Quantumult 已经超过半年未更新，因此不推荐任何用户购买 Quantumult。&lt;/strong&gt; 如有需要，请选择上文的 Quantumult X。&lt;/p&gt;
&lt;h3 id="loon潜力无限"&gt;Loon：潜力无限&lt;/h3&gt;
&lt;p&gt;因为听说要涨价了，所以前天我花 $3 入手了 Loon &lt;del&gt;留着传家&lt;/del&gt;。从目前的状态来看，Loon 还处于开发初期，许多地方还不完善 &lt;del&gt;（像英文本地化都把 Dashboard 写成 Dsahboard 了草）&lt;/del&gt;。不过，从已有的功能来看，Loon 在一定程度上综合了 Surge 和 Quantumult X 的优点，发展潜力巨大。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/talk-about-some-proxy-apps-on-ios/07.png" width="30%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;Loon 主界面&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;从外观上来说，Loon 主界面借鉴了 Surge 的设定，但改为了双栏显示，方便操作；从功能上来说，Loon 目前有下面一些优势：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;支持 SS, SSR, Vmess 协议&lt;/li&gt;
&lt;li&gt;支持导入 Surge Ruleset，方便编写规则&lt;/li&gt;
&lt;li&gt;支持类 Surge 的策略组写法&lt;/li&gt;
&lt;li&gt;支持类 Quantumult X 的订阅 Rewrite (&lt;code&gt;rewrite_remote&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;支持本地过滤节点，无需借助 API&lt;/li&gt;
&lt;li&gt;支持远程脚本&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果 Loon 后续能保持更新维护，那么它很有可能成为 Quantumult X 的一大竞品。&lt;/p&gt;
&lt;h4 id="推荐资源-2"&gt;推荐资源&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Feng 大佬的 &lt;a href="https://www.notion.so/Loon-f0a98c39f5224c09b281c79837380431"&gt;Loon 不完全教程&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="小结-3"&gt;小结&lt;/h3&gt;
&lt;p&gt;目前看来，功能最强大的代理软件仍是 Surge；但普通用户使用 Quantumult X / 小火箭也足矣。另外，如果你有自定义配置文件的需求，不妨研究一下 &lt;a href="https://github.com/tindy2013/subconverter/blob/master/README-cn.md"&gt;subconverter&lt;/a&gt; 和 &lt;a href="https://surgio.royli.dev"&gt;Surgio&lt;/a&gt;。在当前日益恶劣的互联网环境下，不仅要选择适合自己的代理软件，更要有稳定高速的线路、合理的规则、策略组与配置文件，才能获得无墙般的上网体验。&lt;/p&gt;
&lt;h3 id="广告时间"&gt;广告时间&lt;/h3&gt;
&lt;p&gt;推荐一个自用的机场（链接含 aff）：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://dlercloud.com/auth/register?affid=51479"&gt;Dler Cloud&lt;/a&gt;（墙洞）&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h4 id="-注"&gt;↩︎ 注&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p id="ref01"&gt;
参考 &lt;a href="https://manual.nssurge.com/rule.html"&gt;Surge Manual - Proxy Rule&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p id="ref02"&gt;
参考 &lt;a href="https://community.nssurge.com/d/248-surge-ios-430-dns-over-https"&gt;Surge Tech Community - Surge iOS 4.3.0 以上版本关于 DNS-over-HTTPS 的修改和配置指引&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p id="ref03"&gt;
参考 &lt;a href="https://community.nssurge.com/d/225-module"&gt;Surge Tech Community - Module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p id="ref04"&gt;
来源 &lt;a href="https://www.v2ex.com/t/642077"&gt;V2EX - Quantumult (X) 和 Shadowrocket 有何优劣？&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p id="ref05"&gt;
参见 &lt;a href="https://www.notion.so/iCloud-Github-948f19e65e1a47b3b468451491a3f34b"&gt;本地/iCloud 文件夹挂载实现 Github 脚本库实时同步&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p id="ref06"&gt;
参考 &lt;a href="https://apps.apple.com/us/app/quantumult/id1252015438"&gt;App Store - Quantumult&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>使用新 GPG 密钥重新签名所有 Git commits</title><link>https://blog.hly0928.com/post/sign-old-git-commits-using-new-gpg-key/</link><pubDate>Mon, 18 May 2020 02:00:00 +0800</pubDate><author> Steven</author><guid>https://blog.hly0928.com/post/sign-old-git-commits-using-new-gpg-key/</guid><description>&lt;h3 id="背景"&gt;背景&lt;/h3&gt;
&lt;p&gt;之前在更新 GitHub 的 GPG 公钥的时候，不小心手贱删掉了原来的 GPG 公钥。这就导致了很严重的后果 —— 我之前所有的 commits 都变成了 Unverified 的状态。由于本地也没有原 GPG 公钥的备份，本强迫症一度抓狂&lt;del&gt;想自裁&lt;/del&gt;。&lt;/p&gt;
&lt;p&gt;不过即便如此，我们还是可以使用新的 GPG 密钥重新签名之前所有的 Git commits，&lt;del&gt;然后 &lt;code&gt;git push --force&lt;/code&gt; 无脑解决问题&lt;/del&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;警告：以下操作具有危险性，请仅在私人 Repo 中使用，使用前注意备份数据。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id="方法-1使用-git-rebase--git-filter-branch"&gt;方法 1：使用 git rebase + git filter-branch&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git rebase --root --exec &lt;span style="color:#f1fa8c"&gt;&amp;#39;git commit --amend --no-edit -S&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# 这一步会重新提交所有之前的 commits，因而会改变 commit time&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# 而 git rebase 的 --committer-date-is-author-date 参数会与 --root 参数冲突&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# 因此我们需要再用 git filter-branch 修正 commit time&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git filter-branch --env-filter &lt;span style="color:#f1fa8c"&gt;&amp;#39;export GIT_COMMITTER_DATE=&amp;#34;$GIT_AUTHOR_DATE&amp;#34;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="方法-2git-filter-branch-one-liner"&gt;方法 2：git filter-branch one-liner&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git filter-branch --commit-filter &lt;span style="color:#f1fa8c"&gt;&amp;#39;git commit-tree -S &amp;#34;$@&amp;#34;&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# git filter-branch 在触发前需要稍等，还会警告你这是核武器级的选项 XD&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果仅需要对特定的 committer email 进行重签名，还可以：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git filter-branch --commit-filter &lt;span style="color:#f1fa8c"&gt;&amp;#39;if [ &amp;#34;$GIT_COMMITTER_EMAIL&amp;#34; = &amp;#34;your@email.com&amp;#34; ];
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f1fa8c"&gt; then git commit-tree -S &amp;#34;$@&amp;#34;;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f1fa8c"&gt; else git commit-tree &amp;#34;$@&amp;#34;;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#f1fa8c"&gt; fi&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h4 id="参考"&gt;参考&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;🔗 &lt;a href="https://superuser.com/questions/397149/can-you-gpg-sign-old-commits"&gt;superuser - Can you GPG sign old commits?&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>为 Windows 远程桌面服务安装自签名证书</title><link>https://blog.hly0928.com/post/install-self-signed-cert-for-windows-rdp/</link><pubDate>Mon, 18 May 2020 00:45:00 +0800</pubDate><author> Steven</author><guid>https://blog.hly0928.com/post/install-self-signed-cert-for-windows-rdp/</guid><description>&lt;h3 id="背景"&gt;背景&lt;/h3&gt;
&lt;p&gt;最近，由于学校的某门课程要用到一个 Windows only 的&lt;del&gt;屑&lt;/del&gt;软件，而我又不想使用 Boot Camp / 虚拟机之类的解决方式，因此最后选择在套路云上开了一台 &lt;a href="https://www.alibabacloud.com/help/zh/doc-detail/52088.htm"&gt;抢占式实例&lt;/a&gt;，利用停机不收费、流量按量计费等特性获得了一台暂时性、价格尚可接受、性能不错的 Windows 云服务器。&lt;/p&gt;
&lt;p&gt;在使用 &lt;a href="https://apps.apple.com/us/app/microsoft-remote-desktop/id1295203466"&gt;Microsoft Remote Desktop&lt;/a&gt; (BTW, 这玩意的评分只有 2 星不到，太惨了) 远程连接到 Windows Server 时，会弹出一个「无法验证证书，您的连接可能不安全」之类的提示。这是因为 Windows 远程桌面服务默认会使用自签证书来进行连接。尽管可以直接忽略提示甚至选择始终信任，但是这毫无疑问让咱这个强迫症非常不爽…&lt;/p&gt;
&lt;p&gt;通常情况下，使用可信 CA 签发的服务器证书即可解决这个问题。不过，由于我&lt;del&gt;比较懒&lt;/del&gt;只是暂时性使用，就懒得再去用 certbot 申请 Let’s Encrypt 的证书了，直接全部用自签名证书搞定（逃&lt;/p&gt;
&lt;h3 id="签发根证书"&gt;签发根证书&lt;/h3&gt;
&lt;p&gt;参考 &lt;a href="https://blog.hly0928.com/post/generate-ca-root-cert-for-surge"&gt;为 Surge 自签发 CA 根证书&lt;/a&gt;，完成后需要在 Keychain Access 中添加并信任证书。&lt;/p&gt;
&lt;p&gt;简单示例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl ecparam -genkey -name prime256v1 -out ca.key &lt;span style="color:#6272a4"&gt;# 生成 ECC 私钥&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl req -x509 -new -sha256 -key ca.key -days &lt;span style="color:#bd93f9"&gt;3650&lt;/span&gt; -out ca.crt -subj &lt;span style="color:#f1fa8c"&gt;&amp;#34;/CN=Custom CA&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="签发服务器证书"&gt;签发服务器证书&lt;/h3&gt;
&lt;h4 id="生成私钥"&gt;生成私钥&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl genrsa -out server.key &lt;span style="color:#bd93f9"&gt;2048&lt;/span&gt; &lt;span style="color:#6272a4"&gt;# 生成 RSA 私钥&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# 或者&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl ecparam -genkey -name prime256v1 -out server.key &lt;span style="color:#6272a4"&gt;# 生成 ECC 私钥&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="生成证书请求"&gt;生成证书请求&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl req -new -sha256 -key server.key -out server.csr -subj &lt;span style="color:#f1fa8c"&gt;&amp;#34;/CN=&amp;lt;domain or ip&amp;gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# 请自行将 &amp;lt;domain or ip&amp;gt; 替换为服务器域名或 IP 地址&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="签发证书"&gt;签发证书&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# 使用 openssl x509 工具&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl x509 -req -sha256 -days &lt;span style="color:#bd93f9"&gt;820&lt;/span&gt; -in server.csr -CA ca.crt -CAkey ca.key -CAcreateserial -extfile &amp;lt;&lt;span style="color:#ff79c6"&gt;(&lt;/span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;printf&lt;/span&gt; &lt;span style="color:#f1fa8c"&gt;&amp;#34;extendedKeyUsage=serverAuth\nsubjectAltName=DNS:&amp;lt;domain or ip&amp;gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#ff79c6"&gt;)&lt;/span&gt; -out server.crt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# 或者使用 openssl ca (需要准备好 index.txt, serial 和 openssl.cnf)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl ca -in server.csr -out server.crt -outdir . -cert ca.crt -keyfile ca.key -startdate 20200101000000Z -enddate 20211231000000Z -config openssl.cnf -extfile &amp;lt;&lt;span style="color:#ff79c6"&gt;(&lt;/span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;printf&lt;/span&gt; &lt;span style="color:#f1fa8c"&gt;&amp;#34;extendedKeyUsage=serverAuth\nsubjectAltName=DNS:&amp;lt;domain or ip&amp;gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#ff79c6"&gt;)&lt;/span&gt; -notext -md sha256 -policy policy_anything
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# 请自行将 &amp;lt;domain or ip&amp;gt; 替换为服务器域名或 IP 地址&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# 证书有效期不能超过 825 天，macOS 下必须指定摘要算法为 SHA-256，参见 https://support.apple.com/zh-cn/HT210176&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="section-01"&gt;导出 pfx 格式的证书&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl pkcs12 -export -inkey server.key -in server.crt -out server.pfx -password pass:&amp;lt;password&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# &amp;lt;password&amp;gt; 为证书密码，在下面安装证书时需要用到&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="获取证书指纹"&gt;获取证书指纹&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl x509 -fingerprint -in server.crt | head -n &lt;span style="color:#bd93f9"&gt;1&lt;/span&gt; | cut -d &lt;span style="color:#f1fa8c"&gt;&amp;#39;=&amp;#39;&lt;/span&gt; -f2 | tr -d &lt;span style="color:#f1fa8c"&gt;&amp;#39;:&amp;#39;&lt;/span&gt; | tr &lt;span style="color:#f1fa8c"&gt;&amp;#39;[:upper:]&amp;#39;&lt;/span&gt; &lt;span style="color:#f1fa8c"&gt;&amp;#39;[:lower:]&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# Copy 下来稍后会用&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="安装服务器证书"&gt;安装服务器证书&lt;/h3&gt;
&lt;h4 id="安装-pfx-格式的证书"&gt;安装 pfx 格式的证书&lt;/h4&gt;
&lt;p&gt;连接到 Windows Server，双击打开 pfx 格式的证书，存储位置选择「本地计算机」 &amp;gt; 文件名默认 &amp;gt; 输入密码 &amp;amp; 其他设置默认 &amp;gt; 选择「将所有的证书都放入下列存储 - 个人」&amp;gt; 完成。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/install-self-signed-cert-for-windows-rdp/01.png"/&gt;&lt;figcaption&gt;
&lt;h4&gt;安装证书&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="配置-rdp-服务"&gt;配置 RDP 服务&lt;/h4&gt;
&lt;p&gt;打开 Windows PowerShell，执行以下命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-pwsh" data-lang="pwsh"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;wmic /namespace:\\root\cimv2\TerminalServices PATH Win32_TSGeneralSetting &lt;span style="color:#8be9fd;font-style:italic"&gt;Set &lt;/span&gt;SSLCertificateSHA1Hash=&lt;span style="color:#f1fa8c"&gt;&amp;#34;&amp;lt;上面获取的证书指纹&amp;gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/install-self-signed-cert-for-windows-rdp/02.png" width="75%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;配置 RDP 服务&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;提示「属性更新成功」即可。&lt;/p&gt;
&lt;h3 id="测试连接"&gt;测试连接&lt;/h3&gt;
&lt;p&gt;断开远程桌面连接，重新连接，此时应该已经没有证书未受信任的提示了。&lt;/p&gt;
&lt;h3 id="移除服务器证书"&gt;移除服务器证书&lt;/h3&gt;
&lt;p&gt;如果要移除服务器上安装的证书，则右击开始菜单 &amp;gt; 运行 &amp;gt; 打开 &lt;code&gt;certlm.msc&lt;/code&gt;，在 证书 - 本地计算机 &amp;gt; 个人 &amp;gt; 证书下删除安装的证书即可。&lt;/p&gt;
&lt;h3 id="使用可信-ca-签发的证书"&gt;使用可信 CA 签发的证书&lt;/h3&gt;
&lt;p&gt;如果你有可信 CA 签发的证书，那么只需要从 &lt;a href="#section-01"&gt;导出 pfx 格式的证书&lt;/a&gt; 这一步往后操作即可。&lt;/p&gt;
&lt;p&gt;&lt;del&gt;垃圾 Windows 毁我青春，耗我时光&lt;/del&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id="参考及感谢"&gt;参考及感谢&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;🔗 &lt;a href="https://blog.berd.moe/archives/remote-desktop-setup-ssl-certificate"&gt;简单的给远程桌面连接 (Remote Desktop) 配置自定义 SSL 证书&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>使用 Hugo Encryptor 加密你的 Hugo 博客文章</title><link>https://blog.hly0928.com/post/encrypt-posts-using-hugo-encryptor/</link><pubDate>Wed, 15 Jan 2020 14:30:00 +0800</pubDate><author> Steven</author><guid>https://blog.hly0928.com/post/encrypt-posts-using-hugo-encryptor/</guid><description>&lt;h3 id="简介"&gt;简介&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/Li4n0/hugo_encryptor"&gt;Hugo Encryptor&lt;/a&gt; 是咱在 GitHub 上发现的一个基于 Python 3 的项目，它能够方便地加密你的 Hugo 博客文章。&lt;/p&gt;
&lt;p&gt;这里直接摘录项目简介：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Hugo-Encryptor 是一款能够帮助作者保护文章内容的工具。它使用 AES-256 来对文章的内容进行加密，并且通过在文章中嵌入内联 JavaScript 代码来验证读者输入的密码是否正确。没有正确的文章密码，读者将无法看到文章的加密内容。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="使用方法"&gt;使用方法&lt;/h3&gt;
&lt;h4 id="直接使用"&gt;直接使用&lt;/h4&gt;
&lt;p&gt;首先配置好 Python 3 环境，然后参考作者给出的 &lt;a href="https://github.com/Li4n0/hugo_encryptor/blob/master/README-zh_CN.md"&gt;使用文档&lt;/a&gt; 即可，这里就不再赘述了。&lt;/p&gt;
&lt;h4 id="使用-docker"&gt;使用 Docker&lt;/h4&gt;
&lt;p&gt;为了方便使用以及加快在 CI 上的构建速度，咱将所需要的环境打包成了 Docker 镜像，你可以参考以下步骤更快速地实现加密：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装 Docker。这部分请自行参考 &lt;a href="https://docs.docker.com/install/"&gt;官方文档&lt;/a&gt; 或者这份 &lt;a href="https://yeasy.gitbooks.io/docker_practice/install/"&gt;中文文档&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;将 &lt;code&gt;shortcodes/hugo-encryptor.html&lt;/code&gt; 放入博客 &lt;code&gt;shortcodes&lt;/code&gt; 目录：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;cd&lt;/span&gt; /path/to/your/blog/ &lt;span style="color:#6272a4"&gt;# 进入博客根目录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;mkdir -p layouts/shortcodes/ &lt;span style="color:#6272a4"&gt;# 如果没有 shortcodes 目录，则先创建&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;wget -P layouts/shortcodes/ https://raw.githubusercontent.com/Li4n0/hugo_encryptor/master/shortcodes/hugo-encryptor.html &lt;span style="color:#6272a4"&gt;# 下载模版到 shortcodes 目录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start="3"&gt;
&lt;li&gt;将文章中需要加密的部分用 &lt;code&gt;{{% hugo-encryptor %}}&lt;/code&gt; 标签包裹起来，具体格式请参见 &lt;a href="https://github.com/Li4n0/hugo_encryptor/blob/master/README-zh_CN.md#%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95"&gt;官方文档&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;最后使用 Docker：&lt;/li&gt;
&lt;/ol&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;docker run -v &lt;span style="color:#ff79c6"&gt;$(&lt;/span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;pwd&lt;/span&gt;&lt;span style="color:#ff79c6"&gt;)&lt;/span&gt;:/blog hly0928/hugo_encryptor:latest
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对比一下，使用 Docker 时 GitHub Actions 的构建时间有了大幅缩短：&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/encrypt-posts-using-hugo-encryptor/01.png" width="80%"/&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;del&gt;其实是因为不用 Docker 的话有 80% 的时间都浪费在了安装依赖上。&lt;/del&gt;&lt;/p&gt;
&lt;h3 id="一点小问题"&gt;一点小问题&lt;/h3&gt;
&lt;p&gt;&lt;del&gt;目前还不支持单篇文章中多个部分的加密，不过咱已经提了 issue 了…反正咱是修不来只能等作者解决啦。&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;del&gt;另外，如果你 &lt;a href="https://blog.hly0928.com/post/blog-update-01"&gt;修改&lt;/a&gt; 了 Hugo 默认的 &lt;code&gt;rss.xml&lt;/code&gt; 以实现全文输出的话，会导致加密内容在 &lt;code&gt;index.xml&lt;/code&gt; 中泄露，不过咱已经在 Docker 版本中作了修正。&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;更新&lt;/strong&gt;：以上问题皆已被修复，感谢开发者。&lt;/p&gt;</description></item><item><title>解决 Surge 无法更新 GeoIP Database 的问题</title><link>https://blog.hly0928.com/post/update-geoip-database-for-surge/</link><pubDate>Wed, 01 Jan 2020 17:10:00 +0800</pubDate><author> Steven</author><guid>https://blog.hly0928.com/post/update-geoip-database-for-surge/</guid><description>&lt;p&gt;&lt;strong&gt;更新 *2：&lt;/strong&gt; 在 Surge 4.0.2 (Build 1462) 商店版中，此问题已被解决，本文失效。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;更新：&lt;/strong&gt; 根据 &lt;a href="https://twitter.com/XYen0n"&gt;@XYen0n&lt;/a&gt; 大佬的 &lt;a href="https://twitter.com/XYen0n/status/1212345006784016385"&gt;提醒&lt;/a&gt;，如果你不想注册 GeoLite2 账户，那么请直接使用本文 &lt;a href="#section-01"&gt;最后&lt;/a&gt; 的方法。&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="背景及需求"&gt;背景及需求&lt;/h3&gt;
&lt;p&gt;根据 MaxMind 官方 &lt;a href="https://blog.maxmind.com/2019/12/18/significant-changes-to-accessing-and-using-geolite2-databases"&gt;公告&lt;/a&gt;，从 2019 年 12 月 30 日起，用户需要注册 MaxMind 账户并使用 license key 才能下载免费的 GeoLite2 数据库，原公开下载链接也不再可用。原文：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Starting December 30, 2019, we will be requiring users of our GeoLite2 databases to register for a MaxMind account and obtain a license key in order to download GeoLite2 databases.&lt;/p&gt;
&lt;p&gt;…&lt;/p&gt;
&lt;p&gt;Starting December 30, 2019, downloads will no longer be served from our public GeoLite2 page, from geolite.maxmind.com/download/geoip/database/*, or from any other public URL.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由于 Surge 使用了公开的 GeoLite2 Country 下载链接，它暂时将无法更新 GeoIP 数据库。不过，既然官方提供了注册账户 &amp;amp; 使用 license key 下载的方式，我们仍然可以曲线救国。&lt;/p&gt;
&lt;h3 id="注册-geolite2-账户"&gt;注册 GeoLite2 账户&lt;/h3&gt;
&lt;p&gt;打开 &lt;a href="https://www.maxmind.com/en/geolite2/signup"&gt;GeoLite2 Sign Up 页面&lt;/a&gt;，按要求填写个人信息即可。对于邮箱地址，官方的要求是：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Please provide an email address using the domain name of your business. This will become your username.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果你用 Gmail 之类的邮箱可能会提示 &lt;em&gt;Sorry, we are not able to provide you with an account.&lt;/em&gt; 反正咱用的是自己的域名邮箱注册的。最后别忘了验证邮箱并设置密码。&lt;/p&gt;
&lt;p&gt;如果你不想折腾，&lt;del&gt;买一个域名然后开通免费的 &lt;a href="https://domain.mail.qq.com"&gt;QQ 域名邮箱&lt;/a&gt; 就行了。&lt;del&gt;QQ 域名邮箱不让用了，有需要的可以用免费版 &lt;a href="https://exmail.qq.com"&gt;腾讯企业邮箱&lt;/a&gt; 或者&lt;/del&gt;垃圾&lt;/del&gt; &lt;a href="https://mail.yandex.com"&gt;Yandex&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id="获取-license-key"&gt;获取 License key&lt;/h3&gt;
&lt;p&gt;注册好账户之后，打开管理 license keys 的 &lt;a href="https://www.maxmind.com/en/accounts/current/license-key"&gt;页面&lt;/a&gt;，点 &lt;code&gt;Generate new license key&lt;/code&gt;，description 随便填写，&lt;code&gt;Will this key be used for GeoIP Update?&lt;/code&gt; 选择 No 即可。记录下你最终获得的 license key。&lt;/p&gt;
&lt;h3 id="配置-surge"&gt;配置 Surge&lt;/h3&gt;
&lt;h4 id="mitm"&gt;MitM&lt;/h4&gt;
&lt;p&gt;在 Surge 配置文件的 &lt;code&gt;[MITM] &amp;gt; hostname&lt;/code&gt; 部分，增加以下域名：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-Plain" data-lang="Plain"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;geolite.maxmind.com
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="rewrite"&gt;Rewrite&lt;/h4&gt;
&lt;p&gt;在 Surge 配置文件的 &lt;code&gt;[URL Rewrite]&lt;/code&gt; 部分，增加一行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-Plain" data-lang="Plain"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;^https:\/\/geolite\.maxmind\.com\/download\/geoip\/database\/GeoLite2-Country\.tar\.gz https://download.maxmind.com/app/geoip_download?edition_id=GeoLite2-Country&amp;amp;license_key=&amp;lt;你获得的license key&amp;gt;&amp;amp;suffix=tar.gz 302
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;记得把中间 &lt;code&gt;license_key=&lt;/code&gt; 后的内容改为你获得的 license key。&lt;/p&gt;
&lt;h3 id="section-01"&gt;直接使用 rixCloud 提供的 GeoIP 数据库&lt;/h3&gt;
&lt;p&gt;如果你懒得注册 GeoLite2 账户，那么不妨直接使用 rixCloud 提供的 GeoIP 数据库：&lt;/p&gt;
&lt;h4 id="mitm-1"&gt;MitM&lt;/h4&gt;
&lt;p&gt;在 Surge 配置文件的 &lt;code&gt;[MITM] &amp;gt; hostname&lt;/code&gt; 部分，增加以下域名：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-Plain" data-lang="Plain"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;geolite.maxmind.com
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="rewrite-1"&gt;Rewrite&lt;/h4&gt;
&lt;p&gt;在 Surge 配置文件的 &lt;code&gt;[URL Rewrite]&lt;/code&gt; 部分，增加一行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-Plain" data-lang="Plain"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;^https:\/\/geolite\.maxmind\.com\/download\/geoip\/database\/GeoLite2-Country\.tar\.gz https://static.clash.to/GeoIP2/GeoIP2-Country.tar.gz 302
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="enjoy"&gt;Enjoy!&lt;/h3&gt;
&lt;hr&gt;
&lt;h4 id="参考"&gt;参考&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;🔗 &lt;a href="https://dev.maxmind.com/geoip/geoipupdate/#Direct_Downloads"&gt;Automatic Updates for GeoIP2 and GeoIP Legacy Databases #Direct Downloads&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</description></item><item><title>2019 年终总结</title><link>https://blog.hly0928.com/post/2019-year-end-summary/</link><pubDate>Tue, 31 Dec 2019 13:10:00 +0800</pubDate><author> Steven</author><guid>https://blog.hly0928.com/post/2019-year-end-summary/</guid><description>&lt;h3 id="一点废话"&gt;一点废话&lt;/h3&gt;
&lt;p&gt;说实话，咱并没有写年终总结的习惯。不过，之前看到熊熊的 &lt;a href="https://blog.froseiun.in/2019/12/16/2019-year-end-summary"&gt;2019 年末总结&lt;/a&gt;，便萌生了写一份年终总结的想法。加上今年的确发生了不少事情…所以就简单记述一下。&lt;/p&gt;
&lt;h3 id="平淡无奇又摸鱼的上半年"&gt;平淡无奇&lt;del&gt;又摸鱼&lt;/del&gt;的上半年&lt;/h3&gt;
&lt;p&gt;严格意义上来说，上半年并没有发生什么值得记录的事情，&lt;del&gt;毕竟一个高三狗又能有什么奇妙经历呢？&lt;/del&gt; 在高三下半期，咱的心理状态一直比较差，上课是三天去两天不去，学校组织的考试也只参加了一半左右…&lt;/p&gt;
&lt;p&gt;与大多数同学不同，咱的高三基本都是在摸鱼中度过的。一方面是源于心理上对现状的强烈抵触。咱之前写过一篇《&lt;a href="https://blog.hly0928.com/post/senior-high-students-7106-schedule"&gt;有人关注程序员的「996」，谁来关注高中生的「7106」？&lt;/a&gt;》，表达了咱对高中作息制度的不满。然而，这种不满并不能带来任何实际上的影响。在这种「非常不爽又无可奈何」的心理下，咱选择了频繁地请假摸鱼。另一方面，咱其实不想考进太好的大学。&lt;del&gt;不过这话说出来肯定要被反驳，所以就点到为止吧。&lt;/del&gt;&lt;/p&gt;
&lt;h3 id="高考高考"&gt;高考…高考？&lt;/h3&gt;
&lt;p&gt;高考那两三天，其实也是之前平淡日常的延续。总结一下，就是莫名其妙的语文作文题、不知道怎么超常发挥的数学、完全背不到的文综、一如既往稳如老狗的英语。&lt;/p&gt;
&lt;p&gt;要说遗憾的话，我也不知道最终的结果算不算遗憾。按照咱高三摸鱼的状态，能考出 600 多的成绩已经是超常发挥；但是跟《&lt;a href="https://blog.hly0928.com/post/recents-report-1"&gt;近况报告 #1&lt;/a&gt;》中川大的目标相比，最终的结果还是有点遗憾…不过这也不重要了。&lt;/p&gt;
&lt;h3 id="暑假灰暗"&gt;暑假，灰暗&lt;/h3&gt;
&lt;p&gt;暑假其实是今年中最灰暗的一段时期。因为高考的成绩没有达到父母所定的川大这一目标，加上之前因为学业和女票所产生的种种冲突，父母高考前承诺的所有条件都没有兑现 —— 旅游被「你还没成年」拒绝了，iPad 和笔电都不给买，等等。&lt;/p&gt;
&lt;p&gt;所以，最终进了哪所学校呢？如果你读过我之前的（少数派）&lt;a href="https://blog.hly0928.com/post/fresh-guy-report-on-sspai"&gt;新人报道文&lt;/a&gt;，那我其实已经提到过了 —— 就是成电。其实成电的志愿并不是我的想法，我妈认为「成电是我能进的最好的 985」，于是就私自改了我的志愿，事后也没有承认…但是还能有什么可能呢？&lt;/p&gt;
&lt;p&gt;也正是由于这样的原因，我对成电没有什么好感。对现在的专业毫无兴趣、你电的种种傻逼制度（早晚自习等等）更是加深了这样的厌恶。在整个大学时间里，被篡改的志愿估计会成为咱解不开的一个心结吧。每每碰到学校的傻逼事情，咱总是会想到它 —— 咱本来就不该来这里的。&lt;/p&gt;
&lt;h3 id="开学课业"&gt;开学，课业&lt;/h3&gt;
&lt;p&gt;其实学校生活也没有太多可说的。军训跟着室友们逃了好几天，最后对成绩也没有什么影响 (XD)。开学以来的课大多都很无聊，偶尔也会翘掉一些不点名的课…&lt;/p&gt;
&lt;p&gt;但是，你电对数学的执念仍然让我难以接受。身处一个文科院系，一周三节微积分、为了补国庆节的课而连着三周上四节微积分、学的范围比其他学校经管类还要多 —— 说真的，我不认为这种执念有什么意义，除了让你电的挂科率、劝退率居高不下之外，何况我们院还基本都是文科生。&lt;/p&gt;
&lt;p&gt;还有一门值得一提的 —— 英语公共演讲课程。由于在入学考试中&lt;del&gt;考得太好&lt;/del&gt;，咱&lt;del&gt;不幸地&lt;/del&gt;被选入了英语公共演讲班。对于内向又自闭的我来说，这着实是一个挑战。虽然现在一学期的课程和数不清的演讲已经顺利结束了，不过咱今后也不会再考虑参与演讲相关的课程了…&lt;/p&gt;
&lt;h3 id="一些技术上的探索"&gt;一些技术上的探索&lt;/h3&gt;
&lt;p&gt;今年最后这两个月稍微折腾了一下，把寝室的路由器换成了 newwifi 3 并刷入了 Padavan，并且买了个路由器 UPS，极大地改善了寝室的网络质量。&lt;/p&gt;
&lt;p&gt;另外，最近实现了 blog 的自动构建和部署，以后 blog 发布要轻松得多了（好耶）。&lt;/p&gt;
&lt;h3 id="遗憾悲伤与不舍"&gt;遗憾，悲伤与不舍&lt;/h3&gt;
&lt;div class="hugo-encryptor-container"&gt;
&lt;div class="hugo-encryptor-prompt"&gt;
&lt;p&gt;文章的部分内容被密码保护：&lt;/p&gt;
&lt;/div&gt;
&lt;div class="hugo-encryptor-form"&gt;
&lt;input
class="hugo-encryptor-input"
placeholder='请输入密码'
/&gt;
&lt;input
class="hugo-encryptor-button"
type="button"
value='点击验证'
onclick="_click_handler(this)"
/&gt;
&lt;/div&gt;
&lt;div
class="hugo-encryptor-cipher-text"
data-password="5bBrqb9n3xfkOwxQ"
style="display: none;"
&gt;
&lt;span style="display: none;"&gt;--- DON'T MODIFY THIS LINE ---&lt;/span&gt;
&lt;p&gt;11 月，跟女票分手了。虽然不是咱提出的分手，但是主要是咱的问题…&lt;/p&gt;
&lt;p&gt;最近总是想起之前跟女票在一起的那些经历，算是印证了「只有失去了才懂得珍惜」这句话吧。&lt;/p&gt;
&lt;p&gt;但是最遗憾的还不是这个，而是她现在又找了一个…&lt;del&gt;虽然咱认为咱除了身高还是要比那个傻逼优秀的。&lt;/del&gt;&lt;/p&gt;
&lt;figure&gt;&lt;img src="https://blog.hly0928.com/media/posts/hidden/2019-year-end-summary/hidden_01.png" width="50%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;……&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;虽然希望渺茫，但是咱还是想挽回呀。&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;h3 id="终"&gt;终&lt;/h3&gt;
&lt;p&gt;终于还是赶在新年到来之前，写完了本篇年终总结。正如咱没有写年终总结的习惯，咱也没有作新年计划的打算。唯一的愿望，就是能弥补上一段中的遗憾吧。&lt;/p&gt;
&lt;p&gt;明年再会啦。&lt;/p&gt;</description></item><item><title>macOS 下使用 GPG 签名 Git commits</title><link>https://blog.hly0928.com/post/sign-git-commits-with-gpg-on-macos/</link><pubDate>Sat, 21 Dec 2019 00:20:00 +0800</pubDate><author> Steven</author><guid>https://blog.hly0928.com/post/sign-git-commits-with-gpg-on-macos/</guid><description>&lt;p&gt;&lt;em&gt;*本文仅作个人笔记&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="目的"&gt;目的&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;使用 GPG 或 S/MIME 可在本地签名标记并提交。 这些标记或提交在 GitHub 上标示为已验证，便于其他人信任更改来自可信的来源。&lt;sup&gt;&lt;a href="#ref01"&gt;[1]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id="配置过程"&gt;配置过程&lt;/h3&gt;
&lt;h4 id="安装-gpg"&gt;安装 GPG&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;brew install gpg
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="检查现有的-gpg-密钥"&gt;检查现有的 GPG 密钥&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;gpg --list-secret-keys --keyid-format LONG
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果无返回值，则说明没有配置 GPG 密钥；如果有，则可以跳过生成 GPG 密钥对的步骤。&lt;/p&gt;
&lt;h4 id="生成-gpg-密钥对"&gt;生成 GPG 密钥对&lt;/h4&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;gpg --full-generate-key --expert
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# 使用 --expert 选项以支持 ECC 加密算法&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# 如果选择使用 RSA 算法，则不需要 --expert 选项&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol&gt;
&lt;li&gt;指定密钥类型，选择 &lt;code&gt;ECC and ECC&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;指定椭圆曲线算法，选择 &lt;code&gt;Curve 25519&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;指定密钥过期时间，默认永不过期&lt;/li&gt;
&lt;li&gt;设定用户 ID，确保邮箱与 GitHub 主邮箱一致&lt;/li&gt;
&lt;li&gt;设定密码&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id="导出公钥"&gt;导出公钥&lt;/h4&gt;
&lt;p&gt;获取已生成密钥列表：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;gpg --list-secret-keys --keyid-format LONG
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输出样例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ gpg --list-secret-keys --keyid-format LONG
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;/Users/hubot/.gnupg/secring.gpg
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;------------------------------------
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sec 4096R/3AA5C34371567BD2 2016-03-10 &lt;span style="color:#ff79c6"&gt;[&lt;/span&gt;expires: 2017-03-10&lt;span style="color:#ff79c6"&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;uid Hubot
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ssb 4096R/42B317FD4BA89E7A 2016-03-10
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;记录 GPG Key ID，样例中为 &lt;code&gt;3AA5C34371567BD2&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;导出公钥：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;gpg --armor --export 3AA5C34371567BD2
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;# 注意替换为上一步中获得的 GPG Key ID&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;复制导出的公钥并粘贴到 GitHub 添加 GPG 密钥的页面上&lt;sup&gt;&lt;a href="#ref02"&gt;[2]&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;h4 id="设置-git"&gt;设置 Git&lt;/h4&gt;
&lt;h5 id="配置-gpg-agent-环境变量sup3ref03sup"&gt;配置 gpg-agent 环境变量&lt;sup&gt;&lt;a href="#ref03"&gt;[3]&lt;/a&gt;&lt;/sup&gt;&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;echo&lt;/span&gt; &lt;span style="color:#f1fa8c"&gt;&amp;#39;export GPG_TTY=$(tty)&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; ~/.profile &lt;span style="color:#6272a4"&gt;# for bash users&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;echo&lt;/span&gt; &lt;span style="color:#f1fa8c"&gt;&amp;#39;export GPG_TTY=$(tty)&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; ~/.zshrc &lt;span style="color:#6272a4"&gt;# for zsh users&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;source&lt;/span&gt; ~/.profile &lt;span style="color:#6272a4"&gt;# for bash users&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;source&lt;/span&gt; ~/.zshrc &lt;span style="color:#6272a4"&gt;# for zsh users&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; 如果使用了 &lt;a href="https://github.com/romkatv/powerlevel10k"&gt;Powerlevel10k&lt;/a&gt; 的 &lt;a href="https://github.com/romkatv/powerlevel10k#instant-prompt"&gt;Instant prompt&lt;/a&gt; 这类功能，那么请使用以下命令，否则 GPG 会提示无法进行签名&lt;sup&gt;&lt;a href="#ref02"&gt;[4]&lt;/a&gt;&lt;/sup&gt;：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;echo&lt;/span&gt; &lt;span style="color:#f1fa8c"&gt;&amp;#39;export GPG_TTY=$TTY&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; ~/.zshrc &lt;span style="color:#ff79c6"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style="color:#8be9fd;font-style:italic"&gt;source&lt;/span&gt; ~/.zshrc
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id="设置-git-使用-gpg-签名"&gt;设置 Git 使用 GPG 签名&lt;/h5&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git config --global user.signingkey 3AA5C34371567BD2
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git config --global commit.gpgsign &lt;span style="color:#8be9fd;font-style:italic"&gt;true&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;# 注意替换为上面获得的 GPG Key ID&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;对于不需要 GPG 签名的 Git 仓库，只需要在其目录下执行以下设置：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git config commit.gpgsign &lt;span style="color:#8be9fd;font-style:italic"&gt;false&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;hr&gt;
&lt;h4 id="-注"&gt;↩︎ 注&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p id="ref01"&gt;
参见 &lt;a href="https://help.github.com/cn/github/authenticating-to-github/managing-commit-signature-verification"&gt;管理提交签名验证 - GitHub 帮助&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p id="ref02"&gt;
参见 &lt;a href="https://help.github.com/cn/github/authenticating-to-github/adding-a-new-gpg-key-to-your-github-account"&gt;新增 GPG 密钥到 GitHub 帐户 - GitHub 帮助&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p id="ref03"&gt;
参见 &lt;a href="https://help.github.com/cn/github/authenticating-to-github/telling-git-about-your-signing-key"&gt;将您的签名密钥告知 Git - GitHub 帮助&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;p id="ref04"&gt;
参见 &lt;a href="https://github.com/romkatv/powerlevel10k/issues/524"&gt;romkatv/powerlevel10k issues #524&lt;/a&gt; &amp;amp; &lt;a href="https://unix.stackexchange.com/questions/608842/zshrc-export-gpg-tty-tty-says-not-a-tty"&gt;StackExchange - zshrc export GPG_TTY=$(tty) says not a tty&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>为 Surge 自签发 CA 根证书</title><link>https://blog.hly0928.com/post/generate-ca-root-cert-for-surge/</link><pubDate>Wed, 18 Dec 2019 19:00:00 +0800</pubDate><author> Steven</author><guid>https://blog.hly0928.com/post/generate-ca-root-cert-for-surge/</guid><description>&lt;h3 id="背景及需求"&gt;背景及需求&lt;/h3&gt;
&lt;p&gt;最近，我把自定义的 Surge 配置文件托管到了 &lt;a href="https://gist.github.com"&gt;GitHub Gist&lt;/a&gt; 上（当然，用的是 secret gist）。&lt;del&gt;同时，为了在 Surge app 里看着舒服，我把配置文件写成了 &lt;a href="https://manual.nssurge.com/others/managed-configuration.html"&gt;Managed Configuration&lt;/a&gt; 的形式。由于 GitHub Gist RAW 文件的 URL 会带有 commit ID，此方式不可用，咱还是太蠢了…&lt;/del&gt;（其实把 URL 后面的部分删了就行了，咱确实太年轻了 QAQ…）但是，这也带来了一定的问题 —— Surge 的 Managed Configuration 是完全不可更改的，因此也不能在本地生成并安装 CA 根证书。&lt;/p&gt;
&lt;p&gt;为了让 Managed Configuration 也能实现 MitM，我们必须提前自签发 CA 根证书，并在 iOS 系统中安装和信任，同时确保 Surge 配置文件中含有正确的 &lt;code&gt;ca-passphrase&lt;/code&gt; 及 &lt;code&gt;ca-p12&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;除此之外，自签 CA 根证书还能自定义证书的名称、有效期等，&lt;del&gt;让强迫症看着更舒服。&lt;/del&gt;&lt;/p&gt;
&lt;h3 id="准备工具"&gt;准备工具&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;macOS / Ubuntu&lt;/li&gt;
&lt;li&gt;OpenSSL&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;macOS 自带了 OpenSSL（LibreSSL），不需要另行安装。Ubuntu 可以使用包管理器安装 OpenSSL：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;apt install openssl
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;LibreSSL 与 OpenSSL 在使用上几乎一致，不过默认摘要算法有所不同。下文命令中的 &lt;code&gt;-sha256&lt;/code&gt; 在较新版本 OpenSSL (Ubuntu) 下可以省略，但在 LibreSSL (macOS) 下不能省略。&lt;sup&gt;&lt;a href="#ref01"&gt;[1]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;h3 id="easy-way使用-openssl-x509-工具签发"&gt;Easy Way：使用 openssl x509 工具签发&lt;/h3&gt;
&lt;p&gt;首先做好准备工作：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;mkdir cert &lt;span style="color:#ff79c6"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style="color:#8be9fd;font-style:italic"&gt;cd&lt;/span&gt; cert &lt;span style="color:#6272a4"&gt;# 创建存放证书的文件夹&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;生成私钥：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl genrsa -out ca.key &lt;span style="color:#bd93f9"&gt;2048&lt;/span&gt; &lt;span style="color:#6272a4"&gt;# 生成 RSA 私钥&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# 或者&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl ecparam -genkey -name prime256v1 -out ca.key &lt;span style="color:#6272a4"&gt;# 生成 ECC 私钥&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# -name 后的字段指定了椭圆曲线算法&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# 可通过 openssl ecparam -list_curves 查看所有可选项&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# 目前可用算法只有 prime256v1 (secp256r1), secp384r1, secp521r1 三种&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;随后，用 &lt;code&gt;openssl req&lt;/code&gt; 生成证书请求：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl req -new -sha256 -key ca.key -out ca.csr
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# 参数说明：&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# -new 生成新的证书请求&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# -sha256 使用 SHA-256 摘要算法&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# -key 指定已有的私钥文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# -out 指定生成的证书请求名&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;此时，openssl 会让你逐条填入证书主题 (subject)：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ openssl req -new -sha256 -key ca.key -out ca.csr
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;You are about to be asked to enter information that will be incorporated
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;into your certificate request.
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;What you are about to enter is what is called a Distinguished Name or a DN.
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;There are quite a few fields but you can leave some blank
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;For some fields there will be a default value,
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;If you enter &lt;span style="color:#f1fa8c"&gt;&amp;#39;.&amp;#39;&lt;/span&gt;, the field will be left blank.
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;-----
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Country Name &lt;span style="color:#ff79c6"&gt;(&lt;/span&gt;&lt;span style="color:#bd93f9"&gt;2&lt;/span&gt; letter code&lt;span style="color:#ff79c6"&gt;)&lt;/span&gt; &lt;span style="color:#ff79c6"&gt;[&lt;/span&gt;AU&lt;span style="color:#ff79c6"&gt;]&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;State or Province Name &lt;span style="color:#ff79c6"&gt;(&lt;/span&gt;full name&lt;span style="color:#ff79c6"&gt;)&lt;/span&gt; &lt;span style="color:#ff79c6"&gt;[&lt;/span&gt;Some-State&lt;span style="color:#ff79c6"&gt;]&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Locality Name &lt;span style="color:#ff79c6"&gt;(&lt;/span&gt;eg, city&lt;span style="color:#ff79c6"&gt;)&lt;/span&gt; &lt;span style="color:#ff79c6"&gt;[]&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Organization Name &lt;span style="color:#ff79c6"&gt;(&lt;/span&gt;eg, company&lt;span style="color:#ff79c6"&gt;)&lt;/span&gt; &lt;span style="color:#ff79c6"&gt;[&lt;/span&gt;Internet Widgits Pty Ltd&lt;span style="color:#ff79c6"&gt;]&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Organizational Unit Name &lt;span style="color:#ff79c6"&gt;(&lt;/span&gt;eg, section&lt;span style="color:#ff79c6"&gt;)&lt;/span&gt; &lt;span style="color:#ff79c6"&gt;[]&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Common Name &lt;span style="color:#ff79c6"&gt;(&lt;/span&gt;e.g. server FQDN or YOUR name&lt;span style="color:#ff79c6"&gt;)&lt;/span&gt; &lt;span style="color:#ff79c6"&gt;[]&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Email Address &lt;span style="color:#ff79c6"&gt;[]&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Please enter the following &lt;span style="color:#f1fa8c"&gt;&amp;#39;extra&amp;#39;&lt;/span&gt; attributes
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;to be sent with your certificate request
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;A challenge password &lt;span style="color:#ff79c6"&gt;[]&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;An optional company name &lt;span style="color:#ff79c6"&gt;[]&lt;/span&gt;:
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;其中，&lt;code&gt;Common Name&lt;/code&gt; 为必填项，它将成为证书安装时的名称；其他项目均为可选填。如果要留空某个项目，则填入 &lt;code&gt;.&lt;/code&gt; 即可。以下是填写示例：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Country Name &lt;span style="color:#ff79c6"&gt;(&lt;/span&gt;&lt;span style="color:#bd93f9"&gt;2&lt;/span&gt; letter code&lt;span style="color:#ff79c6"&gt;)&lt;/span&gt; &lt;span style="color:#ff79c6"&gt;[&lt;/span&gt;AU&lt;span style="color:#ff79c6"&gt;]&lt;/span&gt;:HK
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;State or Province Name &lt;span style="color:#ff79c6"&gt;(&lt;/span&gt;full name&lt;span style="color:#ff79c6"&gt;)&lt;/span&gt; &lt;span style="color:#ff79c6"&gt;[&lt;/span&gt;Some-State&lt;span style="color:#ff79c6"&gt;]&lt;/span&gt;:.
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Locality Name &lt;span style="color:#ff79c6"&gt;(&lt;/span&gt;eg, city&lt;span style="color:#ff79c6"&gt;)&lt;/span&gt; &lt;span style="color:#ff79c6"&gt;[]&lt;/span&gt;:.
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Organization Name &lt;span style="color:#ff79c6"&gt;(&lt;/span&gt;eg, company&lt;span style="color:#ff79c6"&gt;)&lt;/span&gt; &lt;span style="color:#ff79c6"&gt;[&lt;/span&gt;Internet Widgits Pty Ltd&lt;span style="color:#ff79c6"&gt;]&lt;/span&gt;:.
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Organizational Unit Name &lt;span style="color:#ff79c6"&gt;(&lt;/span&gt;eg, section&lt;span style="color:#ff79c6"&gt;)&lt;/span&gt; &lt;span style="color:#ff79c6"&gt;[]&lt;/span&gt;:.
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Common Name &lt;span style="color:#ff79c6"&gt;(&lt;/span&gt;e.g. server FQDN or YOUR name&lt;span style="color:#ff79c6"&gt;)&lt;/span&gt; &lt;span style="color:#ff79c6"&gt;[]&lt;/span&gt;:Custom CA
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Email Address &lt;span style="color:#ff79c6"&gt;[]&lt;/span&gt;:.
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;Please enter the following &lt;span style="color:#f1fa8c"&gt;&amp;#39;extra&amp;#39;&lt;/span&gt; attributes
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;to be sent with your certificate request
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;A challenge password &lt;span style="color:#ff79c6"&gt;[]&lt;/span&gt;:.
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;An optional company name &lt;span style="color:#ff79c6"&gt;[]&lt;/span&gt;:.
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果你不想一条条地填写，那么你也可以在生成证书请求时直接指定证书主题：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl req -new -sha256 -key ca.key -out ca.csr -subj &lt;span style="color:#f1fa8c"&gt;&amp;#34;/C=HK/CN=Custom CA&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后，用 &lt;code&gt;openssl x509&lt;/code&gt; 进行自签名，得到根证书：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl x509 -req -sha256 -days &lt;span style="color:#bd93f9"&gt;3650&lt;/span&gt; -in ca.csr -signkey ca.key -out ca.crt
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# 参数说明：&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# -req 指定输入的是证书请求文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# -sha256 使用 SHA-256 摘要算法&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# -days 指定证书的有效时间，示例中为 3650 天&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# -in 指定证书请求文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# -signkey 指定私钥文件以进行自签名&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# -out 指定生成的证书名&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;另外，用 &lt;code&gt;openssl req&lt;/code&gt; 生成证书请求和用 &lt;code&gt;openssl x509&lt;/code&gt; 自签名的两步也可以只用 &lt;code&gt;openssl req&lt;/code&gt; 一行命令完成：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl req -x509 -new -sha256 -key ca.key -days &lt;span style="color:#bd93f9"&gt;3650&lt;/span&gt; -out ca.crt -subj &lt;span style="color:#f1fa8c"&gt;&amp;#34;/C=HK/CN=Custom CA&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# 注意这里并不是用 x509，而是用 req 工具签发的证书&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# 参数说明：&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# -x509 指定输出一个 X509 格式的证书&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# -new 生成新的证书请求&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# -sha256 使用 SHA-256 摘要算法&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# -key 指定已有的私钥文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# -days 指定证书的有效时间，示例中为 3650 天&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# -out 指定生成的证书名&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# -subj 指定证书主题，格式参见示例&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="hard-way使用-openssl-ca-签发"&gt;Hard Way：使用 openssl ca 签发&lt;/h3&gt;
&lt;p&gt;使用 &lt;code&gt;openssl x509&lt;/code&gt; 工具签发非常方便，然而，如果我们要自定义更多内容（尤其是证书的&lt;strong&gt;生效时间、失效时间&lt;/strong&gt;），&lt;code&gt;openssl x509&lt;/code&gt; 就不能实现了。这时，我们就需要借助 &lt;code&gt;openssl ca&lt;/code&gt; 来完成。&lt;/p&gt;
&lt;p&gt;首先依旧是做好准备工作：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;mkdir cert &lt;span style="color:#ff79c6"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style="color:#8be9fd;font-style:italic"&gt;cd&lt;/span&gt; cert &lt;span style="color:#6272a4"&gt;# 创建存放证书的文件夹&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl genrsa -out ca.key &lt;span style="color:#bd93f9"&gt;2048&lt;/span&gt; &lt;span style="color:#6272a4"&gt;# 生成 RSA 私钥&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# 或者&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl ecparam -genkey -name prime256v1 -out ca.key &lt;span style="color:#6272a4"&gt;# 生成 ECC 私钥&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;随后，用 &lt;code&gt;openssl req&lt;/code&gt; 生成证书请求：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl req -new -sha256 -key ca.key -out ca.csr -subj &lt;span style="color:#f1fa8c"&gt;&amp;#34;/C=HK/CN=Custom CA&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在用 &lt;code&gt;openssl ca&lt;/code&gt; 签发前，我们还需要进行一些配置。首先将默认的 &lt;code&gt;openssl ca&lt;/code&gt; 配置文件拷贝到当前目录：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cp /private/etc/ssl/openssl.cnf . &lt;span style="color:#6272a4"&gt;# macOS&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cp /usr/lib/ssl/openssl.cnf . &lt;span style="color:#6272a4"&gt;# Ubuntu&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;编辑配置文件：&lt;code&gt;vim openssl.cnf&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;对于配置文件，我们需要修改 &lt;code&gt;[ CA_default ]&lt;/code&gt; 下 &lt;code&gt;dir = &lt;/code&gt; 这一项，将其改为 &lt;code&gt;.&lt;/code&gt;，即当前目录。&lt;/p&gt;
&lt;p&gt;随后，准备必须的文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;touch index.txt &lt;span style="color:#ff79c6"&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style="color:#8be9fd;font-style:italic"&gt;echo&lt;/span&gt; &lt;span style="color:#bd93f9"&gt;01&lt;/span&gt; &amp;gt; serial
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;最后，签发证书：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl ca -selfsign -in ca.csr -out ca.crt -outdir . -keyfile ca.key -startdate 20190101000000Z -enddate 20290101000000Z -config openssl.cnf -extensions v3_ca -notext -md sha256 -policy policy_anything
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# 参数说明：&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# -selfsign 使用证书请求中附带的私钥对该请求进行签名，即自签名&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# -in 指定证书请求文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# -out 指定生成的证书名&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# -outdir 指定新证书的输出位置&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# -keyfile 指定已有的私钥文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# -startdate 指定证书生效时间，格式为 YYYYMMDDHHMMSSZ 或 YYMMDDHHMMSSZ，时区为 GMT&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# -enddate 指定证书失效时间，格式同上&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# -config 指定所使用的配置文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# -extensions 指定使用的扩展字段，选取 v3_ca 来签发 CA 机构证书&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# -notext 在生成的证书文件中，不输出文本格式的证书信息&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# -md 指定摘要算法，选择 SHA-256&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# -policy 指定 CA 策略，使用 policy_anything 以允许不完整的证书主题&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在提示 &lt;code&gt;Sign the certificate?&lt;/code&gt; 和 &lt;code&gt;1 out of 1 certificate requests certified, commit?&lt;/code&gt; 时，按 &lt;code&gt;y&lt;/code&gt; 并回车确认即可。&lt;/p&gt;
&lt;h3 id="将证书打包并编码"&gt;将证书打包并编码&lt;/h3&gt;
&lt;p&gt;首先将证书打包为 p12 格式：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;openssl pkcs12 -export -clcerts -in ca.crt -inkey ca.key -out ca.p12 -password pass:AbCd1234
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# 参数说明：&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# -export 指定输出一个 PKCS 12 文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# -clcerts 仅输出客户端证书&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# -in 指定证书文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# -inkey 指定私钥文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# -out 指定生成的文件名&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# -password 指定密码，示例中密码为 AbCd1234&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;随后对 p12 格式的证书进行 BASE64 编码：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;base64 ca.p12
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# 或者直接将编码结果复制到剪贴板：&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;base64 ca.p12 | pbcopy
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="修改-surge-配置文件"&gt;修改 Surge 配置文件&lt;/h3&gt;
&lt;p&gt;在 Surge 配置文件的 &lt;code&gt;[MITM]&lt;/code&gt; 部分写入如下内容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-Plain" data-lang="Plain"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;[MITM]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ca-passphrase = 上一步中设置的 password
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ca-p12 = 上一步中 BASE64 编码后的结果
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="安装并信任证书"&gt;安装并信任证书&lt;/h3&gt;
&lt;h4 id="方法-1借助-quantumult-x-安装"&gt;方法 1：借助 Quantumult X 安装&lt;/h4&gt;
&lt;p&gt;在 Quantumult X 配置文件的 &lt;code&gt;[mitm]&lt;/code&gt; 部分写入如下内容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-Plain" data-lang="Plain"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;[mitm]
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;passphrase = 上一步中设置的 password
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;p12 = 上一步中 BASE64 编码后的结果
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;随后在设置中点击 &lt;code&gt;Install CA&lt;/code&gt; 安装证书，再到 &lt;code&gt;设置 &amp;gt; 通用 &amp;gt; 关于 &amp;gt; 证书信任设置&lt;/code&gt; 中打开对该根证书的完全信任即可。&lt;/p&gt;
&lt;h4 id="方法-2借助-github-gist-下载安装"&gt;方法 2：借助 GitHub Gist 下载安装&lt;/h4&gt;
&lt;p&gt;打开 &lt;a href="https://github.com"&gt;GitHub&lt;/a&gt;，登录你的 GitHub 账号，然后打开 &lt;a href="https://gist.github.com"&gt;GitHub Gists&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;使用以下命令将要安装的证书内容拷贝到剪贴板：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;pbcopy &amp;lt; ca.crt
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在新建的 gist 中，&lt;code&gt;Filename including extension&lt;/code&gt; 填入 &lt;code&gt;ca.crt&lt;/code&gt;，文件内容中粘贴你复制到的内容。随后点击 &lt;code&gt;Create secret gist&lt;/code&gt; 新建 gist。&lt;/p&gt;
&lt;p&gt;随后，在该 gist 页面右键点击右上角的 &lt;code&gt;Raw&lt;/code&gt;，选择 &lt;code&gt;Copy Link&lt;/code&gt;。将获得的网址粘贴到 iOS Safari 浏览器中并前往，按提示安装证书，再到 &lt;code&gt;设置 &amp;gt; 通用 &amp;gt; 关于 &amp;gt; 证书信任设置&lt;/code&gt; 中打开对该根证书的完全信任即可。&lt;/p&gt;
&lt;h3 id="小结"&gt;小结&lt;/h3&gt;
&lt;p&gt;至此，我们成功为 Surge 签发并安装了 CA 根证书。另外，我们得到的 &lt;code&gt;p12&lt;/code&gt; 和 &lt;code&gt;passphrase&lt;/code&gt; 也可以用于其他代理软件的 MitM，从而使我们不需要多次生成和安装证书。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id="-注"&gt;↩︎ 注&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p id="ref01"&gt;
在签发根证书（即本文目的）时，并不一定要指定摘要算法为 SHA-256；但在签发服务器证书时，必须指定为 SHA-256，否则 iOS 13/macOS 10.15 以上的系统将不再信任所用证书（参见 &lt;a href="https://support.apple.com/en-us/HT210176"&gt;Apple 支持页面&lt;/a&gt;）。在本文完成时，macOS 自带的 OpenSSL (LibreSSL 2.8.3) 默认摘要算法仍为 SHA-1，必须手动指定摘要算法；而 Ubuntu 通过包管理器安装的 OpenSSL 1.1.1 默认摘要算法已更改为 SHA-256，不需要手动指定。&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>使用 Padavan 路由器实现校园网自动 Web 认证</title><link>https://blog.hly0928.com/post/auto-web-login-using-padavan/</link><pubDate>Sun, 15 Dec 2019 18:50:00 +0800</pubDate><author> Steven</author><guid>https://blog.hly0928.com/post/auto-web-login-using-padavan/</guid><description>&lt;h3 id="背景及需求"&gt;背景及需求&lt;/h3&gt;
&lt;p&gt;我校的电信有线网络并不会限制路由器的使用。然而，有线网络的认证方式是&lt;strong&gt;动态 IP + Web 认证&lt;/strong&gt;。在每次重启路由器后，访问任意&lt;strong&gt;非 HTTPS 页面&lt;/strong&gt;就会被劫持到电信的认证网页，在该网页上输入账号密码后，才能联网。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/auto-web-login-using-padavan/01.jpg"/&gt;&lt;figcaption&gt;
&lt;h4&gt;电信的认证网页&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;虽说不算太麻烦，但每次都要手动输入账号密码，还是让人有些不爽。正好前段时间购买了一台 newifi 3 路由器并刷入了 Padavan 系统，因此探索一下使用路由器实现校园网自动认证的方法。&lt;/p&gt;
&lt;h3 id="原理"&gt;原理&lt;/h3&gt;
&lt;p&gt;我校有线网络 Web 认证的本质，就是发送一个 HTTP-POST 请求到认证服务器。因此，我们只需要用 &lt;code&gt;curl&lt;/code&gt; 构造一个 POST 请求，并且在每次路由器重启后都发送一遍即可实现自动认证。&lt;/p&gt;
&lt;p&gt;尽管不同学校的 POST 请求可能会有一些差别，但只要使用了 Web 认证，其原理和实现方法都是相同的。&lt;/p&gt;
&lt;h3 id="抓取登录所用的-http-post-请求"&gt;抓取登录所用的 HTTP-POST 请求&lt;/h3&gt;
&lt;p&gt;这里，我们使用 Chrome 的开发者工具来抓取请求。重启路由器后打开认证页面，按 &lt;code&gt;command - option - I&lt;/code&gt; 调出开发者工具，切换到 &lt;code&gt;Network&lt;/code&gt; 选项卡并勾选 &lt;code&gt;Preserve log&lt;/code&gt;。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/auto-web-login-using-padavan/02.png"/&gt;&lt;figcaption&gt;
&lt;h4&gt;打开开发者工具&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;随后，我们正常输入用户名和密码登录。此时，开发者工具中会出现一些 HTTP 请求。我们需要在请求中寻找登录所需的项。一般来说，该项的 &lt;code&gt;Request URL&lt;/code&gt; 会含有 &lt;code&gt;login&lt;/code&gt; 等字段，且 &lt;code&gt;Request Method&lt;/code&gt; 为 &lt;code&gt;POST&lt;/code&gt;。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/auto-web-login-using-padavan/03.png" width="60%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;登录网络的 HTTP-POST 请求&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;在找到这个请求后，我们在请求上单击右键，选择 &lt;code&gt;Copy &amp;gt; Copy as cURL&lt;/code&gt;。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/auto-web-login-using-padavan/04.png" width="60%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;将请求复制为 cURL&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;将复制到的 cURL 粘贴到任意文本编辑器中，以待进一步的处理。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/auto-web-login-using-padavan/05.png"/&gt;&lt;figcaption&gt;
&lt;h4&gt;待处理的 cURL&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="修改-curl-使其永久可用"&gt;修改 cURL 使其永久可用&lt;/h3&gt;
&lt;p&gt;以我校为例，在上一步中我们获得的 cURL 如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;curl &lt;span style="color:#f1fa8c"&gt;&amp;#39;http://172.25.249.8/eportal/InterFace.do?method=login&amp;#39;&lt;/span&gt; -H &lt;span style="color:#f1fa8c"&gt;&amp;#39;Connection: keep-alive&amp;#39;&lt;/span&gt; -H &lt;span style="color:#f1fa8c"&gt;&amp;#39;Origin: http://172.25.249.8&amp;#39;&lt;/span&gt; -H &lt;span style="color:#f1fa8c"&gt;&amp;#39;User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.79 Safari/537.36&amp;#39;&lt;/span&gt; -H &lt;span style="color:#f1fa8c"&gt;&amp;#39;DNT: 1&amp;#39;&lt;/span&gt; -H &lt;span style="color:#f1fa8c"&gt;&amp;#39;Content-Type: application/x-www-form-urlencoded; charset=UTF-8&amp;#39;&lt;/span&gt; -H &lt;span style="color:#f1fa8c"&gt;&amp;#39;Accept: */*&amp;#39;&lt;/span&gt; -H &lt;span style="color:#f1fa8c"&gt;&amp;#39;Referer: http://172.25.249.8/eportal/index.jsp?userip=100.66.137.149&amp;amp;wlanacname=&amp;amp;nasip=171.88.130.251&amp;amp;wlanparameter=78-4f-43-4c-f0-01&amp;amp;url=http://123.123.123.123/&amp;amp;userlocation=ethtrunk/3:691.3201&amp;#39;&lt;/span&gt; -H &lt;span style="color:#f1fa8c"&gt;&amp;#39;Accept-Encoding: gzip, deflate&amp;#39;&lt;/span&gt; -H &lt;span style="color:#f1fa8c"&gt;&amp;#39;Accept-Language: zh-CN,zh-TW;q=0.9,zh;q=0.8,en;q=0.7&amp;#39;&lt;/span&gt; -H &lt;span style="color:#f1fa8c"&gt;&amp;#39;Cookie: EPORTAL_COOKIE_OPERATORPWD=; EPORTAL_COOKIE_SERVER=; EPORTAL_COOKIE_SERVER_NAME=; EPORTAL_COOKIE_USERNAME=; EPORTAL_COOKIE_PASSWORD=; EPORTAL_AUTO_LAND=; EPORTAL_USER_GROUP=null; JSESSIONID=684400A38AA6F9CAF582BD43C001BDE3&amp;#39;&lt;/span&gt; --data &lt;span style="color:#f1fa8c"&gt;&amp;#39;userId=&amp;lt;宽带账号&amp;gt;&amp;amp;password=&amp;lt;宽带密码&amp;gt;&amp;amp;service=&amp;amp;queryString=userip%253D100.66.137.149%2526wlanacname%253D%2526nasip%253D171.88.130.251%2526wlanparameter%253D78-4f-43-4c-f0-01%2526url%253Dhttp%253A%252F%252F123.123.123.123%252F%2526userlocation%253Dethtrunk%252F3%253A691.3201&amp;amp;operatorPwd=&amp;amp;operatorUserId=&amp;amp;validcode=&amp;amp;passwordEncrypt=false&amp;#39;&lt;/span&gt; --compressed --insecure
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;首先将末尾的 &lt;code&gt;--compressed --insecure&lt;/code&gt; 去除。分析 cURL，前大半部分都是 HTTP 请求的标头（&lt;code&gt;-H&lt;/code&gt; 后的内容），你可以酌情作一些修改或删除。比如把 &lt;code&gt;-H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_2) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.79 Safari/537.36'&lt;/code&gt; 改为 &lt;code&gt;-H &amp;quot;User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.79 Safari/537.36&amp;quot;&lt;/code&gt; 就能伪装成 Windows 的 User-Agent 等等，在此不多赘述。&lt;/p&gt;
&lt;p&gt;最后的 &lt;code&gt;--data&lt;/code&gt; 部分，才是我们要关注的重点。根据抓到的请求，&lt;code&gt;userId=&lt;/code&gt; 后是我们的宽带账号，&lt;code&gt;password=&lt;/code&gt; 后是我们的宽带密码。同时，后面的 &lt;code&gt;userip%253D&lt;/code&gt;&lt;sup&gt;&lt;a href="#ref01"&gt;[1]&lt;/a&gt;&lt;/sup&gt; 后是我们获得的内网 IP，&lt;code&gt;wlanparameter%253D&lt;/code&gt; 后是我们设备的 MAC 地址。&lt;/p&gt;
&lt;p&gt;为了构造可永久使用的 cURL，首先要确保宽带账号、宽带密码是正确的。最后需要处理的，就是内网 IP 和设备 MAC 地址的问题。在 Padavan 的 Linux 环境下，你可以使用以下命令获取当前的内网 IP：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ifconfig | grep inet | grep -v inet6 | grep -v &lt;span style="color:#bd93f9"&gt;127&lt;/span&gt; | grep -v &lt;span style="color:#bd93f9"&gt;192&lt;/span&gt; | awk &lt;span style="color:#f1fa8c"&gt;&amp;#39;{print $(NF-2)}&amp;#39;&lt;/span&gt; | cut -d &lt;span style="color:#f1fa8c"&gt;&amp;#39;:&amp;#39;&lt;/span&gt; -f2
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;使用以下命令获取设备 MAC 地址：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ifconfig ra0 | grep HWaddr | awk &lt;span style="color:#f1fa8c"&gt;&amp;#39;{print $NF}&amp;#39;&lt;/span&gt; | tr &lt;span style="color:#f1fa8c"&gt;&amp;#39;[:upper:]&amp;#39;&lt;/span&gt; &lt;span style="color:#f1fa8c"&gt;&amp;#39;[:lower:]&amp;#39;&lt;/span&gt; | tr &lt;span style="color:#f1fa8c"&gt;&amp;#39;:&amp;#39;&lt;/span&gt; &lt;span style="color:#f1fa8c"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这时，我们就可以构造出一个永久可用的 cURL，如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;CURRENT_IP&lt;/span&gt;&lt;span style="color:#ff79c6"&gt;=&lt;/span&gt;&lt;span style="color:#ff79c6"&gt;$(&lt;/span&gt;ifconfig | grep inet | grep -v inet6 | grep -v &lt;span style="color:#bd93f9"&gt;127&lt;/span&gt; | grep -v &lt;span style="color:#bd93f9"&gt;192&lt;/span&gt; | awk &lt;span style="color:#f1fa8c"&gt;&amp;#39;{print $(NF-2)}&amp;#39;&lt;/span&gt; | cut -d &lt;span style="color:#f1fa8c"&gt;&amp;#39;:&amp;#39;&lt;/span&gt; -f2&lt;span style="color:#ff79c6"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;MAC_ADDRESS&lt;/span&gt;&lt;span style="color:#ff79c6"&gt;=&lt;/span&gt;&lt;span style="color:#ff79c6"&gt;$(&lt;/span&gt;ifconfig ra0 | grep HWaddr | awk &lt;span style="color:#f1fa8c"&gt;&amp;#39;{print $NF}&amp;#39;&lt;/span&gt; | tr &lt;span style="color:#f1fa8c"&gt;&amp;#39;[:upper:]&amp;#39;&lt;/span&gt; &lt;span style="color:#f1fa8c"&gt;&amp;#39;[:lower:]&amp;#39;&lt;/span&gt; | tr &lt;span style="color:#f1fa8c"&gt;&amp;#39;:&amp;#39;&lt;/span&gt; &lt;span style="color:#f1fa8c"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span style="color:#ff79c6"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;curl -X POST &lt;span style="color:#f1fa8c"&gt;&amp;#34;http://172.25.249.8/eportal/InterFace.do?method=login&amp;#34;&lt;/span&gt; -H &lt;span style="color:#f1fa8c"&gt;&amp;#34;Connection: keep-alive&amp;#34;&lt;/span&gt; -H &lt;span style="color:#f1fa8c"&gt;&amp;#34;Origin: http://172.25.249.8&amp;#34;&lt;/span&gt; -H &lt;span style="color:#f1fa8c"&gt;&amp;#34;User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.79 Safari/537.36&amp;#34;&lt;/span&gt; -H &lt;span style="color:#f1fa8c"&gt;&amp;#34;DNT: 1&amp;#34;&lt;/span&gt; -H &lt;span style="color:#f1fa8c"&gt;&amp;#34;Content-Type: application/x-www-form-urlencoded; charset=UTF-8&amp;#34;&lt;/span&gt; -H &lt;span style="color:#f1fa8c"&gt;&amp;#34;Accept: */*&amp;#34;&lt;/span&gt; -H &lt;span style="color:#f1fa8c"&gt;&amp;#34;Referer: http://172.25.249.8/eportal/index.jsp?userip=&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;${&lt;/span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;CURRENT_IP&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;}&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;&amp;amp;wlanacname=&amp;amp;nasip=171.88.130.251&amp;amp;wlanparameter=&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;${&lt;/span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;MAC_ADDRESS&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;}&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;&amp;amp;url=http://baidu.com/&amp;amp;userlocation=ethtrunk/3:691.3201&amp;#34;&lt;/span&gt; -H &lt;span style="color:#f1fa8c"&gt;&amp;#34;Accept-Encoding: gzip, deflate&amp;#34;&lt;/span&gt; -H &lt;span style="color:#f1fa8c"&gt;&amp;#34;Accept-Language: zh-CN,zh;q=0.9,zh;q=0.8,en;q=0.7&amp;#34;&lt;/span&gt; -H &lt;span style="color:#f1fa8c"&gt;&amp;#34;Cookie: EPORTAL_COOKIE_OPERATORPWD=; EPORTAL_COOKIE_USERNAME=; EPORTAL_COOKIE_PASSWORD=; EPORTAL_COOKIE_SERVER=; EPORTAL_COOKIE_SERVER_NAME=; EPORTAL_AUTO_LAND=; EPORTAL_USER_GROUP=null; JSESSIONID=2B36EA2F20A0CE7361D592CE7DBDFED3&amp;#34;&lt;/span&gt; --data &lt;span style="color:#f1fa8c"&gt;&amp;#34;userId=&amp;lt;宽带账号&amp;gt;&amp;amp;password=&amp;lt;宽带密码&amp;gt;&amp;amp;service=&amp;amp;queryString=userip%253D&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;${&lt;/span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;CURRENT_IP&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;}&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;%2526wlanacname%253D%2526nasip%253D171.88.130.251%2526wlanparameter%253D&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;${&lt;/span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;MAC_ADDRESS&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;}&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;%2526url%253Dhttp%253A%252F%252Fbaidu.com%252F%2526userlocation%253Dethtrunk%252F3%253A691.3201&amp;amp;operatorPwd=&amp;amp;operatorUserId=&amp;amp;validcode=&amp;amp;passwordEncrypt=false&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;# 记得修改宽带账号、宽带密码&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;在这里，我们用变量 &lt;code&gt;CURRENT_IP&lt;/code&gt; 存储获得的内网 IP，用变量 &lt;code&gt;MAC_ADDRESS&lt;/code&gt; 存储获得的 MAC 地址，并在 curl 命令中进行了替换。需要注意的是，要在 bash 命令的引号中使用变量的话，引号必须为&lt;strong&gt;双引号&lt;/strong&gt;，而不能采用由 Chrome 复制得来的单引号。&lt;/p&gt;
&lt;h3 id="测试-curl"&gt;测试 cURL&lt;/h3&gt;
&lt;p&gt;重启路由器或在认证页面上登出，打开 macOS 的终端，运行以下三行命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;CURRENT_IP&lt;/span&gt;&lt;span style="color:#ff79c6"&gt;=&lt;/span&gt;&lt;span style="color:#ff79c6"&gt;$(&lt;/span&gt;curl -s http://baidu.com | grep NextURL | cut -d &lt;span style="color:#f1fa8c"&gt;&amp;#39;/&amp;#39;&lt;/span&gt; -f5 | cut -d &lt;span style="color:#f1fa8c"&gt;&amp;#39;&amp;amp;&amp;#39;&lt;/span&gt; -f1 | cut -d &lt;span style="color:#f1fa8c"&gt;&amp;#39;?&amp;#39;&lt;/span&gt; -f2 | cut -d &lt;span style="color:#f1fa8c"&gt;&amp;#39;=&amp;#39;&lt;/span&gt; -f2&lt;span style="color:#ff79c6"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;MAC_ADDRESS&lt;/span&gt;&lt;span style="color:#ff79c6"&gt;=&lt;/span&gt;&lt;span style="color:#ff79c6"&gt;$(&lt;/span&gt;curl -s http://baidu.com | grep NextURL | cut -d &lt;span style="color:#f1fa8c"&gt;&amp;#39;/&amp;#39;&lt;/span&gt; -f5 | cut -d &lt;span style="color:#f1fa8c"&gt;&amp;#39;&amp;amp;&amp;#39;&lt;/span&gt; -f4 | cut -d &lt;span style="color:#f1fa8c"&gt;&amp;#39;=&amp;#39;&lt;/span&gt; -f2 | tr -d &lt;span style="color:#f1fa8c"&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;&lt;span style="color:#ff79c6"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;curl -X POST &lt;span style="color:#f1fa8c"&gt;&amp;#34;http://172.25.249.8/eportal/InterFace.do?method=login&amp;#34;&lt;/span&gt; -H &lt;span style="color:#f1fa8c"&gt;&amp;#34;Connection: keep-alive&amp;#34;&lt;/span&gt; -H &lt;span style="color:#f1fa8c"&gt;&amp;#34;Origin: http://172.25.249.8&amp;#34;&lt;/span&gt; -H &lt;span style="color:#f1fa8c"&gt;&amp;#34;User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.79 Safari/537.36&amp;#34;&lt;/span&gt; -H &lt;span style="color:#f1fa8c"&gt;&amp;#34;DNT: 1&amp;#34;&lt;/span&gt; -H &lt;span style="color:#f1fa8c"&gt;&amp;#34;Content-Type: application/x-www-form-urlencoded; charset=UTF-8&amp;#34;&lt;/span&gt; -H &lt;span style="color:#f1fa8c"&gt;&amp;#34;Accept: */*&amp;#34;&lt;/span&gt; -H &lt;span style="color:#f1fa8c"&gt;&amp;#34;Referer: http://172.25.249.8/eportal/index.jsp?userip=&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;${&lt;/span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;CURRENT_IP&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;}&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;&amp;amp;wlanacname=&amp;amp;nasip=171.88.130.251&amp;amp;wlanparameter=&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;${&lt;/span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;MAC_ADDRESS&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;}&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;&amp;amp;url=http://baidu.com/&amp;amp;userlocation=ethtrunk/3:691.3201&amp;#34;&lt;/span&gt; -H &lt;span style="color:#f1fa8c"&gt;&amp;#34;Accept-Encoding: gzip, deflate&amp;#34;&lt;/span&gt; -H &lt;span style="color:#f1fa8c"&gt;&amp;#34;Accept-Language: zh-CN,zh;q=0.9,zh;q=0.8,en;q=0.7&amp;#34;&lt;/span&gt; -H &lt;span style="color:#f1fa8c"&gt;&amp;#34;Cookie: EPORTAL_COOKIE_OPERATORPWD=; EPORTAL_COOKIE_USERNAME=; EPORTAL_COOKIE_PASSWORD=; EPORTAL_COOKIE_SERVER=; EPORTAL_COOKIE_SERVER_NAME=; EPORTAL_AUTO_LAND=; EPORTAL_USER_GROUP=null; JSESSIONID=2B36EA2F20A0CE7361D592CE7DBDFED3&amp;#34;&lt;/span&gt; --data &lt;span style="color:#f1fa8c"&gt;&amp;#34;userId=&amp;lt;宽带账号&amp;gt;&amp;amp;password=&amp;lt;宽带密码&amp;gt;&amp;amp;service=&amp;amp;queryString=userip%253D&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;${&lt;/span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;CURRENT_IP&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;}&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;%2526wlanacname%253D%2526nasip%253D171.88.130.251%2526wlanparameter%253D&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;${&lt;/span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;MAC_ADDRESS&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;}&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;%2526url%253Dhttp%253A%252F%252Fbaidu.com%252F%2526userlocation%253Dethtrunk%252F3%253A691.3201&amp;amp;operatorPwd=&amp;amp;operatorUserId=&amp;amp;validcode=&amp;amp;passwordEncrypt=false&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;# 记得修改宽带账号、宽带密码&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;注意这里 &lt;code&gt;CURRENT_IP&lt;/code&gt; 和 &lt;code&gt;MAC_ADDRESS&lt;/code&gt; 后的命令与上面构造的略有不同，具体原理会在文末解释。&lt;/p&gt;
&lt;p&gt;稍等后，结果中出现了 &lt;code&gt;success&lt;/code&gt; 的提示，并且网络可以正常连接了，就说明我们构造的 cURL 是可用的。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/auto-web-login-using-padavan/06.png" width="70%"/&gt;&lt;figcaption&gt;
&lt;h4&gt;测试表明 cURL 可用&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="编写脚本"&gt;编写脚本&lt;/h3&gt;
&lt;p&gt;为了自动化完成 curl 认证的过程，我们需要编写一个简单的 shell 脚本，以下是一份参考：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ff79c6"&gt;#!/bin/sh
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ff79c6"&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;USER_ID&lt;/span&gt;&lt;span style="color:#ff79c6"&gt;=&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;&amp;#34;&amp;lt;宽带账号&amp;gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;PASSWORD&lt;/span&gt;&lt;span style="color:#ff79c6"&gt;=&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;&amp;#34;&amp;lt;宽带密码&amp;gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;logger -t web-login &lt;span style="color:#f1fa8c"&gt;&amp;#34;开始检测网络认证状态&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;KEYWORD&lt;/span&gt;&lt;span style="color:#ff79c6"&gt;=&lt;/span&gt;&lt;span style="color:#ff79c6"&gt;$(&lt;/span&gt;curl -s http://baidu.com | grep &lt;span style="color:#f1fa8c"&gt;&amp;#34;NextURL&amp;#34;&lt;/span&gt;&lt;span style="color:#ff79c6"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ff79c6"&gt;if&lt;/span&gt; &lt;span style="color:#ff79c6"&gt;[[&lt;/span&gt; &lt;span style="color:#f1fa8c"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#ff79c6"&gt;$(&lt;/span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;printf&lt;/span&gt; &lt;span style="color:#f1fa8c"&gt;&amp;#39;%s&amp;#39;&lt;/span&gt; &lt;span style="color:#f1fa8c"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;${&lt;/span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;KEYWORD&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;}&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#ff79c6"&gt;)&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;&amp;#34;&lt;/span&gt; !&lt;span style="color:#ff79c6"&gt;=&lt;/span&gt; &lt;span style="color:#f1fa8c"&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style="color:#ff79c6"&gt;]]&lt;/span&gt;; &lt;span style="color:#ff79c6"&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; logger -t web-login &lt;span style="color:#f1fa8c"&gt;&amp;#34;检测到尚未认证，尝试自动认证&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#8be9fd;font-style:italic"&gt;CURRENT_IP&lt;/span&gt;&lt;span style="color:#ff79c6"&gt;=&lt;/span&gt;&lt;span style="color:#ff79c6"&gt;$(&lt;/span&gt;ifconfig | grep inet | grep -v inet6 | grep -v &lt;span style="color:#bd93f9"&gt;127&lt;/span&gt; | grep -v &lt;span style="color:#bd93f9"&gt;192&lt;/span&gt; | awk &lt;span style="color:#f1fa8c"&gt;&amp;#39;{print $(NF-2)}&amp;#39;&lt;/span&gt; | cut -d &lt;span style="color:#f1fa8c"&gt;&amp;#39;:&amp;#39;&lt;/span&gt; -f2&lt;span style="color:#ff79c6"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#8be9fd;font-style:italic"&gt;MAC_ADDRESS&lt;/span&gt;&lt;span style="color:#ff79c6"&gt;=&lt;/span&gt;&lt;span style="color:#ff79c6"&gt;$(&lt;/span&gt;ifconfig ra0 | grep HWaddr | awk &lt;span style="color:#f1fa8c"&gt;&amp;#39;{print $NF}&amp;#39;&lt;/span&gt; | tr &lt;span style="color:#f1fa8c"&gt;&amp;#39;[:upper:]&amp;#39;&lt;/span&gt; &lt;span style="color:#f1fa8c"&gt;&amp;#39;[:lower:]&amp;#39;&lt;/span&gt; | tr &lt;span style="color:#f1fa8c"&gt;&amp;#39;:&amp;#39;&lt;/span&gt; &lt;span style="color:#f1fa8c"&gt;&amp;#39;-&amp;#39;&lt;/span&gt;&lt;span style="color:#ff79c6"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#8be9fd;font-style:italic"&gt;LOGIN_STATUS&lt;/span&gt;&lt;span style="color:#ff79c6"&gt;=&lt;/span&gt;&lt;span style="color:#ff79c6"&gt;$(&lt;/span&gt;curl -s -X POST &lt;span style="color:#f1fa8c"&gt;&amp;#34;http://172.25.249.8/eportal/InterFace.do?method=login&amp;#34;&lt;/span&gt; -H &lt;span style="color:#f1fa8c"&gt;&amp;#34;Connection: keep-alive&amp;#34;&lt;/span&gt; -H &lt;span style="color:#f1fa8c"&gt;&amp;#34;Origin: http://172.25.249.8&amp;#34;&lt;/span&gt; -H &lt;span style="color:#f1fa8c"&gt;&amp;#34;User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/79.0.3945.79 Safari/537.36&amp;#34;&lt;/span&gt; -H &lt;span style="color:#f1fa8c"&gt;&amp;#34;DNT: 1&amp;#34;&lt;/span&gt; -H &lt;span style="color:#f1fa8c"&gt;&amp;#34;Content-Type: application/x-www-form-urlencoded; charset=UTF-8&amp;#34;&lt;/span&gt; -H &lt;span style="color:#f1fa8c"&gt;&amp;#34;Accept: */*&amp;#34;&lt;/span&gt; -H &lt;span style="color:#f1fa8c"&gt;&amp;#34;Referer: http://172.25.249.8/eportal/index.jsp?userip=&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;${&lt;/span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;CURRENT_IP&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;}&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;&amp;amp;wlanacname=&amp;amp;nasip=171.88.130.251&amp;amp;wlanparameter=&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;${&lt;/span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;MAC_ADDRESS&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;}&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;&amp;amp;url=http://baidu.com/&amp;amp;userlocation=ethtrunk/3:691.3201&amp;#34;&lt;/span&gt; -H &lt;span style="color:#f1fa8c"&gt;&amp;#34;Accept-Encoding: gzip, deflate&amp;#34;&lt;/span&gt; -H &lt;span style="color:#f1fa8c"&gt;&amp;#34;Accept-Language: zh-CN,zh;q=0.9,zh;q=0.8,en;q=0.7&amp;#34;&lt;/span&gt; -H &lt;span style="color:#f1fa8c"&gt;&amp;#34;Cookie: EPORTAL_COOKIE_OPERATORPWD=; EPORTAL_COOKIE_USERNAME=; EPORTAL_COOKIE_PASSWORD=; EPORTAL_COOKIE_SERVER=; EPORTAL_COOKIE_SERVER_NAME=; EPORTAL_AUTO_LAND=; EPORTAL_USER_GROUP=null; JSESSIONID=2B36EA2F20A0CE7361D592CE7DBDFED3&amp;#34;&lt;/span&gt; --data &lt;span style="color:#f1fa8c"&gt;&amp;#34;userId=&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;${&lt;/span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;USER_ID&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;}&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;&amp;amp;password=&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;${&lt;/span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;PASSWORD&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;}&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;&amp;amp;service=&amp;amp;queryString=userip%253D&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;${&lt;/span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;CURRENT_IP&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;}&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;%2526wlanacname%253D%2526nasip%253D171.88.130.251%2526wlanparameter%253D&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;${&lt;/span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;MAC_ADDRESS&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;}&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;%2526url%253Dhttp%253A%252F%252Fbaidu.com%252F%2526userlocation%253Dethtrunk%252F3%253A691.3201&amp;amp;operatorPwd=&amp;amp;operatorUserId=&amp;amp;validcode=&amp;amp;passwordEncrypt=false&amp;#34;&lt;/span&gt;&lt;span style="color:#ff79c6"&gt;)&lt;/span&gt; &lt;span style="color:#6272a4"&gt;# 含有变量时只能使用双引号&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#8be9fd;font-style:italic"&gt;SUCCESS&lt;/span&gt;&lt;span style="color:#ff79c6"&gt;=&lt;/span&gt;&lt;span style="color:#ff79c6"&gt;$(&lt;/span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;echo&lt;/span&gt; &lt;span style="color:#f1fa8c"&gt;${&lt;/span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;LOGIN_STATUS&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;}&lt;/span&gt; | grep success&lt;span style="color:#ff79c6"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff79c6"&gt;if&lt;/span&gt; &lt;span style="color:#ff79c6"&gt;[[&lt;/span&gt; &lt;span style="color:#f1fa8c"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#ff79c6"&gt;$(&lt;/span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;printf&lt;/span&gt; &lt;span style="color:#f1fa8c"&gt;&amp;#39;%s&amp;#39;&lt;/span&gt; &lt;span style="color:#f1fa8c"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;${&lt;/span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;SUCCESS&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;}&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#ff79c6"&gt;)&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;&amp;#34;&lt;/span&gt; !&lt;span style="color:#ff79c6"&gt;=&lt;/span&gt; &lt;span style="color:#f1fa8c"&gt;&amp;#39;&amp;#39;&lt;/span&gt; &lt;span style="color:#ff79c6"&gt;]]&lt;/span&gt;; &lt;span style="color:#ff79c6"&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; logger -t web-login &lt;span style="color:#f1fa8c"&gt;&amp;#34;自动认证成功&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff79c6"&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#8be9fd;font-style:italic"&gt;LOGIN_STATUS&lt;/span&gt;&lt;span style="color:#ff79c6"&gt;=&lt;/span&gt;&lt;span style="color:#ff79c6"&gt;$(&lt;/span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;echo&lt;/span&gt; &lt;span style="color:#f1fa8c"&gt;${&lt;/span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;LOGIN_STATUS&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;}&lt;/span&gt; | cut -d &lt;span style="color:#f1fa8c"&gt;&amp;#39;,&amp;#39;&lt;/span&gt; -f3 | cut -d &lt;span style="color:#f1fa8c"&gt;&amp;#39;&amp;#34;&amp;#39;&lt;/span&gt; -f4&lt;span style="color:#ff79c6"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; logger -t web-login &lt;span style="color:#f1fa8c"&gt;&amp;#34;自动认证失败: &lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;${&lt;/span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;LOGIN_STATUS&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;}&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff79c6"&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ff79c6"&gt;else&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; logger -t web-login &lt;span style="color:#f1fa8c"&gt;&amp;#34;检测到已经认证&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ff79c6"&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;em&gt;# 记得修改宽带账号、宽带密码&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;在脚本开始的时候，我们通过 &lt;code&gt;curl -s http://baidu.com&lt;/code&gt; 来检测是否已经通过认证。如果尚未认证，curl 返回的结果如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ curl -s http://baidu.com &lt;span style="color:#6272a4"&gt;# -s, 不输出任务进度&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;!--
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;?xml &lt;span style="color:#8be9fd;font-style:italic"&gt;version&lt;/span&gt;&lt;span style="color:#ff79c6"&gt;=&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;&amp;#34;1.0&amp;#34;&lt;/span&gt; &lt;span style="color:#8be9fd;font-style:italic"&gt;encoding&lt;/span&gt;&lt;span style="color:#ff79c6"&gt;=&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;&amp;#34;UTF-8&amp;#34;&lt;/span&gt;?&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;WISPAccessGatewayParam xmlns:xsi&lt;span style="color:#ff79c6"&gt;=&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;&amp;#34;http://www.w3.org/2001/XMLSchema-instance&amp;#34;&lt;/span&gt; xsi:noNamespaceSchemaLocation&lt;span style="color:#ff79c6"&gt;=&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;&amp;#34;http://www.acmewisp.com/WISPAccessGatewayParam.xsd&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;Proxy&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;MessageType&amp;gt;110&amp;lt;/MessageType&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;NextURL&amp;gt;http://172.25.249.8/eportal/index.jsp?userip&lt;span style="color:#ff79c6"&gt;=&lt;/span&gt;&amp;lt;内网IP&amp;gt;&amp;amp;&lt;span style="color:#8be9fd;font-style:italic"&gt;wlanacname&lt;/span&gt;&lt;span style="color:#ff79c6"&gt;=&lt;/span&gt;&amp;amp;&lt;span style="color:#8be9fd;font-style:italic"&gt;nasip&lt;/span&gt;&lt;span style="color:#ff79c6"&gt;=&lt;/span&gt;171.88.130.251&amp;amp;&lt;span style="color:#8be9fd;font-style:italic"&gt;wlanparameter&lt;/span&gt;&lt;span style="color:#ff79c6"&gt;=&lt;/span&gt;&amp;lt;MAC地址&amp;gt;&amp;lt;/NextURL&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;ResponseCode&amp;gt;200&amp;lt;/ResponseCode&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;/Proxy&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;/WISPAccessGatewayParam&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;--&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果已经认证，curl 返回的结果如下：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;$ curl -s http://baidu.com
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;html&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;meta http-equiv&lt;span style="color:#ff79c6"&gt;=&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;&amp;#34;refresh&amp;#34;&lt;/span&gt; &lt;span style="color:#8be9fd;font-style:italic"&gt;content&lt;/span&gt;&lt;span style="color:#ff79c6"&gt;=&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;&amp;#34;0;url=http://www.baidu.com/&amp;#34;&lt;/span&gt;&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&amp;lt;/html&amp;gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;我们可以观察到，在尚未认证时，返回的结果中含有关键词 &lt;code&gt;NextURL&lt;/code&gt;（当然，其他与已认证时返回结果不同的内容都可以）。因此，我们使用 &lt;code&gt;KEYWORD&lt;/code&gt; 变量来判断认证状态，如果尚未认证，&lt;code&gt;KEYWORD&lt;/code&gt; 就不为空，反之 &lt;code&gt;KEYWORD&lt;/code&gt; 就为空。&lt;/p&gt;
&lt;p&gt;因此，你可以在认证前、认证后分别执行 &lt;code&gt;curl http://baidu.com&lt;/code&gt;，找到前者含有而后者没有的&lt;strong&gt;特征性内容&lt;/strong&gt;，将其放在 &lt;code&gt;grep&lt;/code&gt; 命令后。&lt;/p&gt;
&lt;p&gt;如果尚未认证，脚本就会使用 &lt;code&gt;curl&lt;/code&gt; 发送 HTTP-POST 请求进行认证，并检查返回的结果中是否有 &lt;code&gt;success&lt;/code&gt; 字样。如果有，则代表认证成功；如果没有，脚本则会记录下返回的提示信息。&lt;/p&gt;
&lt;h3 id="将脚本上传到路由器"&gt;将脚本上传到路由器&lt;/h3&gt;
&lt;p&gt;打开 macOS 终端，使用 ssh 连接到路由器：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ssh admin@192.168.123.1 &lt;span style="color:#6272a4"&gt;# Padavan 的默认网关 IP 为 192.168.123.1，用户名为 admin&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;输入默认密码 &lt;code&gt;admin&lt;/code&gt; 即可 ssh 登录到路由器。随后执行以下命令：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;cd&lt;/span&gt; /etc/storage &lt;span style="color:#6272a4"&gt;# 进入存储脚本的目录&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;vi auto_login.sh &lt;span style="color:#6272a4"&gt;# 新建并编辑自动登录脚本&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 vi 编辑器下，按 &lt;code&gt;i&lt;/code&gt; 进入编辑模式，将之前准备好的脚本粘贴上去，然后按 &lt;code&gt;esc&lt;/code&gt; 退出编辑模式，随后输入 &lt;code&gt;:wq&lt;/code&gt; 并回车即可保存。再执行以下命令赋予脚本执行权限：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;chmod +x auto_login.sh
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;完成后，执行 &lt;code&gt;exit&lt;/code&gt; 即可断开 ssh 连接。&lt;/p&gt;
&lt;p&gt;登录到路由器后台，在 &lt;code&gt;系统管理 &amp;gt; 恢复/导出/上传设置 &amp;gt; 保存 /etc/storage/ 内容到闪存&lt;/code&gt; 后点击 &lt;code&gt;提交&lt;/code&gt;。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/auto-web-login-using-padavan/07.png"/&gt;&lt;figcaption&gt;
&lt;h4&gt;保存脚本到路由器闪存&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;最后，在 &lt;code&gt;自定义设置 &amp;gt; 脚本 &amp;gt; 在 WAN 上行/下行启动后执行&lt;/code&gt; 的内容后添加一行：&lt;code&gt;/etc/storage/auto_login.sh&lt;/code&gt;，并点击页面最下方的 &lt;code&gt;应用本页面设置&lt;/code&gt; 即可。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/auto-web-login-using-padavan/08.png"/&gt;&lt;figcaption&gt;
&lt;h4&gt;设置 WAN 启动后自动认证&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;如果你还不放心，那么还可以借助 crontab 每隔一段时间检查认证状态并自动认证，只需要打开 &lt;code&gt;系统管理 &amp;gt; 服务 &amp;gt; Cron 守护程序&lt;/code&gt;，然后在 &lt;code&gt;计划任务&lt;/code&gt; 中填入 crontab 命令并应用设置即可：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;*/20 * * * * /etc/storage/auto_login.sh
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# 此处是每 20 分钟运行一次自动认证脚本&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# Crontab 格式可参考 https://crontab.guru&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/auto-web-login-using-padavan/09.png"/&gt;&lt;figcaption&gt;
&lt;h4&gt;配置 Crontab&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h3 id="小结"&gt;小结&lt;/h3&gt;
&lt;p&gt;此时，你的路由器应该已经可以自动完成校园有线网的认证过程了。对于晚上要断电的学校（🌚 比如我校），再购买一个路由器 UPS 即可真正实现 24*7 不间断 WiFi 供应。&lt;/p&gt;
&lt;p&gt;然而，如果你的寝室断电后有线网络信号也会被切断，那么你可以利用 Padavan 的 crontab 在断电时切换到无线中继模式，并中继开放的校园 WiFi。对于我校而言，中继电信校园 WiFi 时，上述自动认证脚本一样可用。具体的实现过程，此处就不再赘述。&lt;/p&gt;
&lt;p&gt;🌝 什么？你说校园 WiFi 也会被关闭？那你为什么不老老实实用流量呢？&lt;/p&gt;
&lt;hr&gt;
&lt;h3 id="题外话"&gt;题外话&lt;/h3&gt;
&lt;p&gt;得益于上面提到的 &lt;code&gt;NextURL&lt;/code&gt; 字段，其实获取内网 IP 与 MAC 地址也可以这么写，这也是上面在 macOS 中验证 cURL 可用性时采用的方法：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;CURRENT_IP&lt;/span&gt;&lt;span style="color:#ff79c6"&gt;=&lt;/span&gt;&lt;span style="color:#ff79c6"&gt;$(&lt;/span&gt;curl -s http://baidu.com | grep NextURL | cut -d &lt;span style="color:#f1fa8c"&gt;&amp;#39;/&amp;#39;&lt;/span&gt; -f5 | cut -d &lt;span style="color:#f1fa8c"&gt;&amp;#39;&amp;amp;&amp;#39;&lt;/span&gt; -f1 | cut -d &lt;span style="color:#f1fa8c"&gt;&amp;#39;?&amp;#39;&lt;/span&gt; -f2 | cut -d &lt;span style="color:#f1fa8c"&gt;&amp;#39;=&amp;#39;&lt;/span&gt; -f2&lt;span style="color:#ff79c6"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;MAC_ADDRESS&lt;/span&gt;&lt;span style="color:#ff79c6"&gt;=&lt;/span&gt;&lt;span style="color:#ff79c6"&gt;$(&lt;/span&gt;curl -s http://baidu.com | grep NextURL | cut -d &lt;span style="color:#f1fa8c"&gt;&amp;#39;/&amp;#39;&lt;/span&gt; -f5 | cut -d &lt;span style="color:#f1fa8c"&gt;&amp;#39;&amp;amp;&amp;#39;&lt;/span&gt; -f4 | cut -d &lt;span style="color:#f1fa8c"&gt;&amp;#39;=&amp;#39;&lt;/span&gt; -f2 | tr -d &lt;span style="color:#f1fa8c"&gt;&amp;#39;&amp;lt;&amp;#39;&lt;/span&gt;&lt;span style="color:#ff79c6"&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;另外还有一点，把 &lt;code&gt;queryString&lt;/code&gt; 中两次 URL encode 过的字段再 decode 回来其实也是能成功的，而且如果要用 iOS Shortcuts 来完成自动化认证的话还必须先 decode 回来。&lt;/p&gt;
&lt;p&gt;在参考了少数派的 &lt;a href="https://sspai.com/post/58189"&gt;这篇文章&lt;/a&gt; 后，咱也用 Shortcuts 实现了 iOS 设备上的自动认证，你可以 &lt;a href="https://www.icloud.com/shortcuts/0f2aae92fb24495083f20c9dcadc0497"&gt;点这里&lt;/a&gt; 安装这个 Shortcut 的模版。&lt;del&gt;但是 iOS Shortcuts 做不到抓取 &lt;code&gt;NextURL&lt;/code&gt; 也没法直接获得 MAC 地址，所以实现上不是很完美。&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;或者，当你已经连接到路由器时，可以通过 Shortcuts 的「Run script over SSH」在路由器上直接运行认证脚本，只需要在 shortcut 设置中填入路由器的 IP、用户名 (admin)、登录密码，执行的命令中填入 &lt;code&gt;/bin/sh --login /etc/storage/auto_login.sh&lt;/code&gt; 即可。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id="参考及感谢"&gt;参考及感谢&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;🔗 &lt;a href="https://jakting.com/archives/drcom-autologin-padavan-tgbot.html"&gt;Dr.COM校园网多设备解决方案——路由器 Padavan/LuCI 固件自动网页认证+Telegram Bot 定时发送连接情况&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id="-注"&gt;↩︎ 注&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p id="ref01"&gt;
对 &lt;code&gt;%253D&lt;/code&gt; 进行两次 URL decode 后即可得到 &lt;code&gt;=&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>军训二三事</title><link>https://blog.hly0928.com/post/several-things-about-military-training/</link><pubDate>Wed, 28 Aug 2019 04:00:00 +0800</pubDate><author> Steven</author><guid>https://blog.hly0928.com/post/several-things-about-military-training/</guid><description>&lt;p&gt;嗯，正如前文所说，Steven 马上要开学了。换句话说，咱很快就要迎来「大学的第一道坎」—— 军训。&lt;/p&gt;
&lt;p&gt;说到军训，我总是会想起中学时候的两次经历。&lt;/p&gt;
&lt;p&gt;出于这样那样&lt;del&gt;奇奇怪怪&lt;/del&gt;的原因，我的两次军训经历都不「完整」，或者说，与众不同。回想起来，有几个片段还是印象颇深。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;初中军训一共七天，而我似乎是因为发烧之类的身体问题，头两天都没去。因此第三天早上还不得不追着教官问我该站哪儿 —— 这对当时非常社恐的我来说，着实是难堪无比的体验。除此之外还有些细节 —— 跟身高相当、同为全班最矮的男同学讨论某电视古装剧、第一次戴上的眼镜总因为流汗而滑下来……这些零零碎碎的记忆在我回想的时候总是挥之不去。&lt;/p&gt;
&lt;p&gt;后面几天里，有一次不知因为什么原因，我们教官命令我们立刻绕操场跑一圈回来 —— 我就非常不幸地冲进了别人班所站方队里。那教官本想叫住我刁难一番，不过我做了个手势 ⬇️&lt;/p&gt;
&lt;p&gt;🙏&lt;/p&gt;
&lt;p&gt;说实话，没有什么比上面这个 emoji 更生动形象的描述了。而我也就莫名其妙地逃过一劫。&lt;/p&gt;
&lt;p&gt;还有一处印象很深。因为初中离家很近（大概五分钟的步行时间吧），而军训又不提供午餐，所以我每次回家吃完饭，都还有一个多小时的休息时间 —— 那会儿我就用初代 i3 + 集显的电脑玩网游，玩得不亦乐乎。我记得很清楚，当时玩的是「战争前线」—— 这游戏似乎也已经停服许久了….&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;高中军训…有几天？说实话，我也不知道。军训前的暑假，我恰好做了个不大不小的手术，也因此名正言顺地免训，在家里躺着玩了一周多。不过，坏处也是有的 —— 开学之后跟新同学不甚熟络，甚至有人疑惑「我是哪儿来的新同学？」要说对这次军训唯一的印象，大概就是「交完材料，扭头就走」吧。&lt;/p&gt;
&lt;p&gt;高一暑假，&lt;del&gt;天杀的&lt;/del&gt;学校竟然让我们回去补训。多亏我妈神通广大，找到某医生朋友，证明我膝盖有疾，持诊断书辅以我的迫真演技，再次逃过一劫。这次的印象，依旧是「交完材料，扭头就走」…可惜并不如上次那么顺利。门口的保安不肯放行，坚称学生「只进不出」，僵持许久才得以出门。&lt;del&gt;出门时不忘对保安和军训辱骂一番，感到一种精神胜利的畅快。&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;高二暑假，补课繁忙，再无补训之事。因而高中算是成功躲过军训，庆幸庆幸。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;前几日在空间里看到某考入北大的学霸同学，正在为他「体检不通过，暂缓军训」愤愤不平。我恐怕是难以理解这种心情的吧。倘若我也「体检不通过」，心中定当暗喜，毕竟「靠军训收心」这种深思熟虑，绝非我等摸鱼之辈能有。两日后该同学复检通过，欣喜不已，换做我恐怕会是希望落空的遗憾吧。&lt;/p&gt;
&lt;p&gt;对于这种热爱军训、根正苗红之青年，我们暂且不表；最让我难以理解的，还是那些「开头把教官骂成 🐷，结尾又不舍地哭成 🐷」的同学们。「斯德哥尔摩综合症」能有如此生动的体现，已然成了每次军训的常见情景。我是做不到这样的，毕竟不知道「可爱」的教官们是不是转过身去，就熟练地在微博上发出一句「废青 NMSL」之类的国骂呢？&lt;/p&gt;
&lt;p&gt;写到这也差不多了。本 blog 有个挺大的问题，就是咱废话太多，每篇文章平均都在千字以上，写着困难，读着更困难。本来本文只是想写写回忆，一不小心又逾千字了。就此作结吧。&lt;/p&gt;</description></item><item><title>大学新生与永远的「萌新」｜（少数派的）新人报道</title><link>https://blog.hly0928.com/post/fresh-guy-report-on-sspai/</link><pubDate>Fri, 23 Aug 2019 01:30:00 +0800</pubDate><author> Steven</author><guid>https://blog.hly0928.com/post/fresh-guy-report-on-sspai/</guid><description>&lt;p&gt;本文为 &lt;a href="https://sspai.com"&gt;少数派&lt;/a&gt; 新人报道文，写作格式参考了《&lt;a href="https://sspai.com/post/53144"&gt;欢迎成为少数派 Matrix 作者&lt;/a&gt;》。原文地址在 &lt;a href="https://sspai.com/post/56322"&gt;这里&lt;/a&gt;，欢迎去帮咱点下 Like（逃&lt;/p&gt;
&lt;h3 id="q1介绍你自己"&gt;Q1：介绍你自己。&lt;/h3&gt;
&lt;p&gt;Hi！你可以叫我 Steven。正如标题所言，我是一名即将进入大学校园的大一新生。身为文科生的我，阴差阳错地考入了电子科技大学 —— 当然读的还是管理方面的专业（不知道我派有没有成电的学长学姐呢 🤣）。同时，身为土生土长成都人的我，又要在熟悉的地方度过四年大学时光。&lt;/p&gt;
&lt;p&gt;这并不是我在少数派的第一次投稿。之前抱着尝试的心态写的《&lt;a href="https://sspai.com/post/55176"&gt;Oh My Zsh 配置指南&lt;/a&gt;》有幸登上我派首页，着实令我受宠若惊。也正是在初投稿之后，我才发现了「新人报道」这一栏目，于是在这里（重新）介绍一下自己。&lt;/p&gt;
&lt;p&gt;把我 &lt;a href="https://blog.hly0928.com"&gt;Blog&lt;/a&gt; 上的《&lt;a href="https://blog.hly0928.com/about-me/"&gt;关于我&lt;/a&gt;》一文稍加浓缩提炼，用一句话概括下自己吧：身高永远一米六；性格无比内向；没有特殊的爱好、没有突出的特长；伪索粉、真果粉、Apple 全家桶在用；永远的「萌新」。&lt;/p&gt;
&lt;h3 id="q2你目前正在主力使用的设备有哪些"&gt;Q2：你目前正在主力使用的设备有哪些？&lt;/h3&gt;
&lt;p&gt;2016 款 MacBook Pro 13&amp;quot;（无触控条）、iPhone XS 和 Apple Watch Series 4。另外也有一代 AirPods、HomePod 和 PS4，但基本都处于吃灰状态。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/fresh-guy-report-on-sspai/01.png"/&gt;&lt;figcaption&gt;
&lt;h4&gt;常用设备全家福（我派的新鼠标垫光荣成为背景版🌚）&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;h4 id="macbook-pro-13"&gt;MacBook Pro 13&amp;quot;&lt;/h4&gt;
&lt;p&gt;陪了我快三年的笔电，我用它完成了学校作业 PPT、写博文、建站等等或大或小的事，也逐渐熟悉并习惯了 macOS。虽然它双核 i5 的性能放在今天已稍显羸弱，但我相信它还能再战三年 🙈。&lt;/p&gt;
&lt;h4 id="iphone-xs"&gt;iPhone XS&lt;/h4&gt;
&lt;p&gt;没有太多可说的。问题依旧是老生常谈的问题 —— 信号差、续航差、发热量大；优点也依旧是众所周知的优点 —— Apple logo、工业设计还有那「绑架」众用户的 iOS。&lt;/p&gt;
&lt;h4 id="apple-watch-series-4"&gt;Apple Watch Series 4&lt;/h4&gt;
&lt;p&gt;对于不怎么运动的我来说，Apple Watch 更多地是一个通知提醒器、一件饰品。尽管 4 代 Apple Watch 仍需要每天一充，其舒适的佩戴感还是让它没有吃灰 🌚。&lt;/p&gt;
&lt;h3 id="q3哪些-app-对你的工作--学习--生活最重要"&gt;Q3：哪些 App 对你的工作 / 学习 / 生活最重要？&lt;/h3&gt;
&lt;p&gt;先放一下主屏：&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/fresh-guy-report-on-sspai/02.png"/&gt;&lt;figcaption&gt;
&lt;h4&gt;我的手机主屏&lt;/h4&gt;
&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;p&gt;我采用的是「1+1」的排列方法，即第一屏铺开放最常用的 app，第二屏用文件夹整理其余的 app。所以，我最重要的 app 基本都在第一屏，而它们基本可以分为五个大类 —— 系统自带、通讯联络、生活常用、音乐 &amp;amp; 阅读和…（🌚 你懂的）。由于暑期作业要求打卡，所以把扇贝单词放到了首屏最后 —— 嗯，好像有点违和…&lt;/p&gt;
&lt;p&gt;第二屏中也并非没有重要的 app，只是它们没有那么常用。比如剪贴板扩展工具 &lt;a href="https://apps.apple.com/cn/app/pin-%E5%89%AA%E8%B4%B4%E6%9D%BF%E6%89%A9%E5%B1%95/id1039643846"&gt;Pin&lt;/a&gt;、密码管理器 &lt;a href="https://apps.apple.com/cn/app/1password-password-manager/id568903335"&gt;1Password&lt;/a&gt;，以及美团、淘宝、高德等「国内必备」应用。&lt;/p&gt;
&lt;h3 id="q4-选答部分说一个你很喜欢但还少有人知道的-app"&gt;Q4 (选答部分)：说一个你很喜欢、但还少有人知道的 App。&lt;/h3&gt;
&lt;p&gt;推荐 &lt;a href="https://apps.apple.com/us/app/%E5%90%8E%E7%BB%AD-%E6%9C%89%E8%AE%B0%E5%BF%86%E7%9A%84%E6%96%B0%E9%97%BB/id1390488970"&gt;后续&lt;/a&gt;，一个非常良心的新闻聚合类应用。由于种种原因，你需要切换到非国区 App Store 才能获取此应用，或者访问其 &lt;a href="https://houxu.app"&gt;网页版&lt;/a&gt;。我派也有 &lt;a href="https://sspai.com/post/53915"&gt;文章&lt;/a&gt; 详细介绍了这个 app。&lt;/p&gt;
&lt;h3 id="q5-选答部分在你订阅的付费服务当中哪一些是不可或缺的"&gt;Q5 (选答部分)：在你订阅的付费服务当中哪一些是不可或缺的？&lt;/h3&gt;
&lt;p&gt;当然是 &lt;a href="https://1password.com"&gt;1Password&lt;/a&gt; 和 &lt;a href="https://ulysses.app"&gt;Ulysses&lt;/a&gt;。我 Blog 早先的博文解释了原因：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;🔗 &lt;a href="https://blog.hly0928.com/post/1password-app-review/"&gt;从「1 password」到 1Password —— 密码管理器上手小记&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;🔗 &lt;a href="https://blog.hly0928.com/post/why-do-i-use-ulysses-after-its-shift-to-subscription/"&gt;明明是「坑钱软件」，可我为什么选择使用 Ulysses？&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="q6-选答部分-自定义问题为什么是永远的萌新"&gt;Q6 (选答部分-自定义问题)：为什么是「永远的萌新」？&lt;/h3&gt;
&lt;p&gt;写到最后，也应该解释标题的后半部分了。我对新鲜事物往往很有兴趣，却又从不深入研究，所以才造就了上文的「没有特殊的爱好、没有突出的特长」。不过，马上就要步入大学了，希望今后我能成为「永远谦虚」的萌新，而不是「半途而废」的萌新。&lt;/p&gt;
&lt;p&gt;好了，新文章已经在&lt;del&gt;鸽&lt;/del&gt;写了。再会～&lt;/p&gt;</description></item><item><title>让你的 Mac 提前用上 macOS Catalina 的 Shell —— Oh My Zsh 配置指南</title><link>https://blog.hly0928.com/post/set-up-oh-my-zsh-on-macos/</link><pubDate>Wed, 12 Jun 2019 00:50:00 +0800</pubDate><author> Steven</author><guid>https://blog.hly0928.com/post/set-up-oh-my-zsh-on-macos/</guid><description>&lt;p&gt;本文同步发布于 &lt;a href="https://sspai.com/post/55176"&gt;少数派&lt;/a&gt;，欢迎去帮咱点个 Like（逃。&lt;/p&gt;
&lt;p&gt;在月初召开的 WWDC 2019 上，Apple 公布了下一代 macOS —— &lt;a href="https://www.apple.com/macos/catalina-preview/"&gt;macOS Catalina&lt;/a&gt;。除了全新的音乐和电视等 app、支持 iPad 作为外置显示器等显而易见的更新，macOS Catalina 还为专业用户带来了一项重大变化 —— zsh 将取代 bash，成为操作系统的默认 shell。&lt;/p&gt;
&lt;p&gt;尽管 Apple 没有对这一改变作出解释，但根据 The Verge 的 &lt;a href="https://www.theverge.com/2019/6/4/18651872/apple-macos-catalina-zsh-bash-shell-replacement-features"&gt;猜测&lt;/a&gt;，这可能与 GPLv3 协议有关。macOS 目前使用的 bash 3.2 版本基于 GPLv2 协议，但新版 bash 已经转移到了 GPLv3 协议。GPLv3 协议对 Apple 这样的大公司有着更严格的限制，这可能是 Apple 不再将 bash 作为默认 shell 的原因。&lt;/p&gt;
&lt;p&gt;而相比 bash 来说，zsh 也拥有许多更强大的功能：更智能的自动补全、命令选项提示、更丰富的主题，等等。在今秋体验到 macOS Catalina 正式版之前，我们可以先将默认 shell 切换到 zsh，熟悉一下新版 shell 的功能。&lt;/p&gt;
&lt;p&gt;本文的目标：&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/set-up-oh-my-zsh-on-macos/01.png" width="80%"/&gt;
&lt;/figure&gt;
&lt;h3 id="zsh-与-oh-my-zsh"&gt;Zsh 与 Oh My Zsh&lt;/h3&gt;
&lt;p&gt;zsh 本体有着强大的功能，但碍于其复杂的配置，对普通用户而言并不太适合。但是，一个开源项目的出现打破了这一局面 —— 它就是本文的主角，&lt;a href="https://github.com/robbyrussell/oh-my-zsh"&gt;Oh My Zsh&lt;/a&gt;。借助 Oh My Zsh，你只需要进行极为简单的安装配置，就可以用上 zsh，并享受许多酷炫的功能。下面就让我们正式开始安装过程。&lt;/p&gt;
&lt;h3 id="安装-oh-my-zsh"&gt;安装 Oh My Zsh&lt;/h3&gt;
&lt;p&gt;macOS Mojave 已经自带了 zsh，所以我们直接安装 Oh My Zsh。安装过程极为简单，打开终端，执行一行命令即可：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;sh -c &lt;span style="color:#f1fa8c"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#ff79c6"&gt;$(&lt;/span&gt;curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh&lt;span style="color:#ff79c6"&gt;)&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在安装过程中会提示 &lt;code&gt;Do you want to change your default shell to zsh? [Y/n]&lt;/code&gt;（是否将默认 shell 切换到 zsh），按下 &lt;code&gt;Y&lt;/code&gt; 并回车即可。随后会提示 &lt;code&gt;Password for xxx&lt;/code&gt;，输入你的用户密码并回车即可。当你看见大大的 &lt;code&gt;Oh my zsh&lt;/code&gt; 标志时就表示 Oh My Zsh 已经安装成功了。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/set-up-oh-my-zsh-on-macos/02.png" width="80%"/&gt;
&lt;/figure&gt;
&lt;h3 id="基本设置"&gt;基本设置&lt;/h3&gt;
&lt;p&gt;安装好 Oh My Zsh 后，使用以下命令打开 zsh 的设置文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;vim ~/.zshrc
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 vim 编辑器下，你可以使用方向键移动光标，按 &lt;code&gt;i&lt;/code&gt; 进入编辑模式，编辑好后按 &lt;code&gt;esc&lt;/code&gt; 退出编辑模式，随后输入 &lt;code&gt;:wq&lt;/code&gt; 并回车即可保存。有关 vim 的更多使用方法你可以参考 &lt;a href="https://www.runoob.com/linux/linux-vim.html"&gt;这篇教程&lt;/a&gt;。另外，Mac 下的 vim 默认是没有显示行号 &amp;amp; 开启语法高亮的，你可以参考以下命令打开行号显示 &amp;amp; 语法高亮：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cp /usr/share/vim/vimrc ~/.vimrc &lt;span style="color:#6272a4"&gt;# 复制 vim 配置模版&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;echo&lt;/span&gt; &lt;span style="color:#f1fa8c"&gt;&amp;#39;syntax on&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; ~/.vimrc &lt;span style="color:#6272a4"&gt;# 开启语法高亮&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;echo&lt;/span&gt; &lt;span style="color:#f1fa8c"&gt;&amp;#39;set nu!&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; ~/.vimrc &lt;span style="color:#6272a4"&gt;# 开启行号显示&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;zsh 的配置文件中提供了详细的注释，你可以根据注释修改相关设置，满足自己的要求。例如，你想关闭 zsh 的自动更新，则定位到 &lt;code&gt;DISABLE_AUTO_UPDATE&lt;/code&gt; 一行，根据前面的注释，删除行前的注释符号 &lt;code&gt;#&lt;/code&gt; 即可。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/set-up-oh-my-zsh-on-macos/03.png" width="80%"/&gt;
&lt;/figure&gt;
&lt;p&gt;保存退出之后，使用以下命令使 zsh 的配置立即生效：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;source&lt;/span&gt; ~/.zshrc
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="设置主题"&gt;设置主题&lt;/h3&gt;
&lt;p&gt;Oh My Zsh 自带了大量主题文件。你可以执行以下命令查看自带的主题：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ls ~/.oh-my-zsh/themes
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对于自带主题的样式和呈现效果，你可以前往 Oh My Zsh &lt;a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Themes"&gt;官方 Wiki&lt;/a&gt; 查看。&lt;/p&gt;
&lt;p&gt;在这里，我选择使用 &lt;a href="https://github.com/agnoster/agnoster-zsh-theme"&gt;agnoster&lt;/a&gt; 作为我的主题。我们需要通过编辑 zsh 配置文件来修改主题：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;vim ~/.zshrc
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;定位到 &lt;code&gt;ZSH_THEME&lt;/code&gt; 一行，将双引号中的内容修改为自己选择的主题名即可。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/set-up-oh-my-zsh-on-macos/04.png" width="80%"/&gt;
&lt;/figure&gt;
&lt;p&gt;保存退出后，执行以下命令使 zsh 的配置立即生效：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;source&lt;/span&gt; ~/.zshrc
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; 我现在使用的主题是 &lt;a href="https://github.com/romkatv/powerlevel10k"&gt;Powerlevel10k&lt;/a&gt;，它不仅简洁美观、性能优异，还提供 &lt;a href="https://github.com/romkatv/powerlevel10k#instant-prompt"&gt;Instant prompt&lt;/a&gt; 等功能以优化你的使用体验，强烈推荐。使用以下命令安装：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git clone --depth&lt;span style="color:#ff79c6"&gt;=&lt;/span&gt;&lt;span style="color:#bd93f9"&gt;1&lt;/span&gt; https://github.com/romkatv/powerlevel10k.git &lt;span style="color:#f1fa8c"&gt;${&lt;/span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;ZSH_CUSTOM&lt;/span&gt;&lt;span style="color:#ff79c6"&gt;:-&lt;/span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;$HOME&lt;/span&gt;/.oh-my-zsh/custom&lt;span style="color:#f1fa8c"&gt;}&lt;/span&gt;/themes/powerlevel10k
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;随后别忘了在 &lt;code&gt;~/.zshrc&lt;/code&gt; 中将主题修改为 &lt;code&gt;powerlevel10k/powerlevel10k&lt;/code&gt; 并使其生效，同时首次启用 powerlevel10k 主题时会弹出设置向导，请根据个人需要进行相关设置。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;注意：&lt;/strong&gt; Instant prompt 功能可能会导致 GPG 无法签名 Git commits，需要修改 &lt;code&gt;~/.zshrc&lt;/code&gt;，具体请参考我之前写的《&lt;a href="https://blog.hly0928.com/post/sign-git-commits-with-gpg-on-macos"&gt;macOS 下使用 GPG 签名 Git commits&lt;/a&gt;》中「配置 gpg-agent 环境变量」这一部分。&lt;/p&gt;
&lt;h3 id="安装-powerline-字体"&gt;安装 Powerline 字体&lt;/h3&gt;
&lt;p&gt;主题设置完成后，终端中却出现了乱码的字符：&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/set-up-oh-my-zsh-on-macos/05.png" width="80%"/&gt;
&lt;/figure&gt;
&lt;p&gt;这是由于我使用的 agnoster 主题中含有特殊字符，需要安装 &lt;a href="https://github.com/powerline/fonts"&gt;Powerline&lt;/a&gt; 字体支持才能正常显示。打开终端，参考以下命令安装 Powerline 字体：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;cd&lt;/span&gt; ~/Downloads &lt;span style="color:#ff79c6"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git clone https://github.com/powerline/fonts.git &lt;span style="color:#6272a4"&gt;# 将 Powerline 字体文件下载到「下载」文件夹中&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;cd&lt;/span&gt; fonts &lt;span style="color:#ff79c6"&gt;&amp;amp;&amp;amp;&lt;/span&gt; ./install.sh &lt;span style="color:#6272a4"&gt;# 安装所有 Powerline 字体&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;cd&lt;/span&gt; &lt;span style="color:#ff79c6"&gt;&amp;amp;&amp;amp;&lt;/span&gt; rm -rf ~/Downloads/fonts &lt;span style="color:#6272a4"&gt;# 删除下载的字体文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;随后，我们按 &lt;code&gt;⌘,&lt;/code&gt; 打开终端偏好设置，在描述文件 &amp;gt; 文本中更改字体。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/set-up-oh-my-zsh-on-macos/06.png" width="80%"/&gt;
&lt;/figure&gt;
&lt;p&gt;在弹出的窗口中选择一款 Powerline 字体（所有可选项请参考 Powerline 的 &lt;a href="https://github.com/powerline/fonts"&gt;GitHub 页面&lt;/a&gt;），调整一下字体大小即可。在这里我选择了 DejaVu Sans Mono for Powerline 字体 &lt;del&gt;（逮虾户！）&lt;/del&gt;，大小设置为 14 磅。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/set-up-oh-my-zsh-on-macos/07.png" width="60%"/&gt;
&lt;/figure&gt;
&lt;p&gt;此时回到终端，发现表示文件目录的箭头已经可以正常显示了：&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/set-up-oh-my-zsh-on-macos/08.png" width="80%"/&gt;
&lt;/figure&gt;
&lt;h3 id="配置终端颜色方案"&gt;配置终端颜色方案&lt;/h3&gt;
&lt;p&gt;主题上的配置至此就差不多了，然而 macOS Mojave 默认终端的黑底白字看起来还是有些不舒服。在这里，我们不妨使用 &lt;a href="https://github.com/mbadolato/iTerm2-Color-Schemes"&gt;iTerm 2 版本&lt;/a&gt; 的 Solarized 配色方案来进一步美化终端。首先，使用以下命令下载 iTerm 2 配色方案：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;cd&lt;/span&gt; ~/Downloads &lt;span style="color:#ff79c6"&gt;&amp;amp;&amp;amp;&lt;/span&gt; git clone https://github.com/mbadolato/iTerm2-Color-Schemes.git &lt;span style="color:#6272a4"&gt;# 将配色方案下载到「下载」文件夹中&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下载完毕后，我们按 &lt;code&gt;⌘,&lt;/code&gt; 打开终端偏好设置，点击描述文件 &amp;gt; ⚙︎ ⌄ &amp;gt; 导入…。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/set-up-oh-my-zsh-on-macos/09.png" width="70%"/&gt;
&lt;/figure&gt;
&lt;p&gt;在弹出的窗口中，定位到 &lt;code&gt;下载 &amp;gt; iTerm2-Color-Schemes &amp;gt; terminal&lt;/code&gt;，双击 &lt;code&gt;Solarized Dark.terminal&lt;/code&gt; 导入暗色的 Solarized 配色方案。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/set-up-oh-my-zsh-on-macos/10.png" width="70%"/&gt;
&lt;/figure&gt;
&lt;p&gt;随后，我们在描述文件中选中 Solarized Dark，点击「默认」将其设为默认配色方案；别忘了把字体改为 Powerline 字体并调整大小。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/set-up-oh-my-zsh-on-macos/11.png" width="70%"/&gt;
&lt;/figure&gt;
&lt;h3 id="其他细节修改"&gt;其他细节修改&lt;/h3&gt;
&lt;p&gt;重启一下终端 —— 到这里，我们漂亮的终端就已经基本完成了。不过还有一些细节需要注意：&lt;/p&gt;
&lt;h4 id="窗口标题--窗口大小"&gt;窗口标题 &amp;amp; 窗口大小&lt;/h4&gt;
&lt;p&gt;在终端偏好设置 &amp;gt; 描述文件 &amp;gt; Solarized Dark &amp;gt; 窗口下，可以自定义终端窗口的默认标题及大小，你可以根据需要自行修改。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/set-up-oh-my-zsh-on-macos/12.png" width="70%"/&gt;
&lt;/figure&gt;
&lt;h4 id="声明终端类型"&gt;声明终端类型&lt;/h4&gt;
&lt;p&gt;打开终端偏好设置 &amp;gt; 描述文件 &amp;gt; Solarized Dark &amp;gt; 高级 &amp;gt; 声明终端为：，选择 &lt;code&gt;xterm-256color&lt;/code&gt; 以确保终端颜色能够正确显示。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/set-up-oh-my-zsh-on-macos/13.png" width="70%"/&gt;
&lt;/figure&gt;
&lt;h4 id="当前账户提示"&gt;当前账户提示&lt;/h4&gt;
&lt;p&gt;还有一项让我不爽的地方 —— 文件目录前那个长长的 &lt;code&gt;demo@Stevens-MacBook-Pro&lt;/code&gt;。通过修改主题配置文件，我们就能去掉它。使用以下命令编辑 agnoster 主题的配置文件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;cp ~/.oh-my-zsh/themes/agnoster.zsh-theme ~/.oh-my-zsh/custom/themes/agnoster.zsh-theme &lt;span style="color:#6272a4"&gt;# 复制 agnoster 主题配置模版&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;vim ~/.oh-my-zsh/custom/themes/agnoster.zsh-theme &lt;span style="color:#6272a4"&gt;# 编辑配置文件&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;定位到以下内容：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#6272a4"&gt;# Context: user@hostname (who am I and where am I)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;prompt_context&lt;span style="color:#ff79c6"&gt;()&lt;/span&gt; &lt;span style="color:#ff79c6"&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff79c6"&gt;if&lt;/span&gt; &lt;span style="color:#ff79c6"&gt;[[&lt;/span&gt; &lt;span style="color:#f1fa8c"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;$USER&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;&amp;#34;&lt;/span&gt; !&lt;span style="color:#ff79c6"&gt;=&lt;/span&gt; &lt;span style="color:#f1fa8c"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;$DEFAULT_USER&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;&amp;#34;&lt;/span&gt; &lt;span style="color:#ff79c6"&gt;||&lt;/span&gt; -n &lt;span style="color:#f1fa8c"&gt;&amp;#34;&lt;/span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;$SSH_CLIENT&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;&amp;#34;&lt;/span&gt; &lt;span style="color:#ff79c6"&gt;]]&lt;/span&gt;; &lt;span style="color:#ff79c6"&gt;then&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; prompt_segment black default &lt;span style="color:#f1fa8c"&gt;&amp;#34;%(!.%{%F{yellow}%}.)%n@%m&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff79c6"&gt;fi&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ff79c6"&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;在 &lt;code&gt;prompt_segment black default &amp;quot;%(!.%{%F{yellow}%}.)%n@%m&amp;quot;&lt;/code&gt; 前面加一个注释符号 &lt;code&gt;#&lt;/code&gt;，保存退出，执行 &lt;code&gt;source ~/.zshrc&lt;/code&gt; 使配置立即生效即可。&lt;/p&gt;
&lt;h3 id="配置插件"&gt;配置插件&lt;/h3&gt;
&lt;p&gt;Oh My Zsh 支持许多强大的插件，可以实现语法高亮、命令自动补全等功能。你可以执行以下命令查看自带的插件：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ls ~/.oh-my-zsh/plugins/
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;对于自带插件的功能及使用，你可以前往 Oh My Zsh &lt;a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Plugins"&gt;官方 Wiki&lt;/a&gt; 查看。&lt;/p&gt;
&lt;p&gt;要启用某个插件，只需要用 &lt;code&gt;vim ~/.zshrc&lt;/code&gt; 编辑 zsh 配置文件，定位到 &lt;code&gt;plugins&lt;/code&gt; 一行，在括号中添加需要的插件名称，以空格分隔。保存退出后，别忘了执行 &lt;code&gt;source ~/.zshrc&lt;/code&gt; 使配置立即生效。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/set-up-oh-my-zsh-on-macos/14.png" width="80%"/&gt;
&lt;/figure&gt;
&lt;h4 id="我使用的插件"&gt;我使用的插件：&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;git&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;默认启用的插件，提供了各种 &lt;code&gt;git&lt;/code&gt; 命令的缩写。其 &lt;a href="https://github.com/robbyrussell/oh-my-zsh/tree/master/plugins/git/"&gt;官方说明&lt;/a&gt; 提供了所有缩写的参考。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;z&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;自带插件，添加到配置文件中即可启用，可以帮助你快速跳转到访问过的文件夹。具体使用方法请自行 Google 或参考 &lt;a href="https://github.com/rupa/z"&gt;GitHub 文档&lt;/a&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;autoupdate-oh-my-zsh-plugins&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以自动升级 &lt;code&gt;$ZSH_CUSTOM&lt;/code&gt; 下的自定义插件。使用以下命令安装：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git clone https://github.com/TamCore/autoupdate-oh-my-zsh-plugins &lt;span style="color:#8be9fd;font-style:italic"&gt;$ZSH_CUSTOM&lt;/span&gt;/plugins/autoupdate
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下载完成后，别忘了把 &lt;code&gt;autoupdate&lt;/code&gt; 添加到配置文件的 &lt;code&gt;plugins&lt;/code&gt; 中，并执行 &lt;code&gt;source ~/.zshrc&lt;/code&gt; 使配置生效。&lt;/p&gt;
&lt;p&gt;之后，在 Oh My Zsh 进行自动更新时，也会同步检查自定义插件的更新。你可以通过修改 &lt;code&gt;~/.zshrc&lt;/code&gt; 中的 &lt;code&gt;UPDATE_ZSH_DAYS&lt;/code&gt; 来定义自动检查更新的间隔天数，另外你也可以执行 &lt;code&gt;upgrade_oh_my_zsh_custom&lt;/code&gt; 来手动检查自定义插件的更新。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;zsh-syntax-highlighting&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;输入正确的命令会以绿色高亮显示，输入错误则会显示其他的颜色。使用以下命令安装：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git clone https://github.com/zsh-users/zsh-syntax-highlighting.git &lt;span style="color:#f1fa8c"&gt;${&lt;/span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;ZSH_CUSTOM&lt;/span&gt;&lt;span style="color:#ff79c6"&gt;:-&lt;/span&gt;~/.oh-my-zsh/custom&lt;span style="color:#f1fa8c"&gt;}&lt;/span&gt;/plugins/zsh-syntax-highlighting
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下载完成后，别忘了把 &lt;code&gt;zsh-syntax-highlighting&lt;/code&gt; 添加到配置文件的 &lt;code&gt;plugins&lt;/code&gt; 中，并执行 &lt;code&gt;source ~/.zshrc&lt;/code&gt; 使配置生效。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;zsh-autosuggestions&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;输入命令时，会用浅色字体给出建议的命令，按 &lt;kbd&gt;→&lt;/kbd&gt; 即可自动补全。使用以下命令安装：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git clone https://github.com/zsh-users/zsh-autosuggestions &lt;span style="color:#f1fa8c"&gt;${&lt;/span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;ZSH_CUSTOM&lt;/span&gt;&lt;span style="color:#ff79c6"&gt;:-&lt;/span&gt;~/.oh-my-zsh/custom&lt;span style="color:#f1fa8c"&gt;}&lt;/span&gt;/plugins/zsh-autosuggestions
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下载完成后，别忘了把 &lt;code&gt;zsh-autosuggestions&lt;/code&gt; 添加到配置文件的 &lt;code&gt;plugins&lt;/code&gt; 中，并执行 &lt;code&gt;source ~/.zshrc&lt;/code&gt; 使配置生效。&lt;/p&gt;
&lt;p&gt;为了让提示的字体颜色正确显示，我们还需要执行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;echo&lt;/span&gt; &lt;span style="color:#f1fa8c"&gt;&amp;#34;ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE=&amp;#39;fg=24&amp;#39;&amp;#34;&lt;/span&gt; &amp;gt;&amp;gt; ~/.zshrc &lt;span style="color:#6272a4"&gt;# 设置建议命令的文字颜色&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你可以修改 &lt;code&gt;fg=&lt;/code&gt; 后的数字来指定建议命令的文字颜色，数字与颜色的对应表请参考 &lt;a href="https://upload.wikimedia.org/wikipedia/commons/1/15/Xterm_256color_chart.svg"&gt;这里&lt;/a&gt;。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;zsh-osx-autoproxy&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;可以自动读取 macOS 的系统代理配置并为命令行设置环境变量。使用以下命令安装：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;git clone https://github.com/sukkaw/zsh-osx-autoproxy &lt;span style="color:#f1fa8c"&gt;${&lt;/span&gt;&lt;span style="color:#8be9fd;font-style:italic"&gt;ZSH_CUSTOM&lt;/span&gt;&lt;span style="color:#ff79c6"&gt;:-&lt;/span&gt;~/.oh-my-zsh/custom&lt;span style="color:#f1fa8c"&gt;}&lt;/span&gt;/plugins/zsh-osx-autoproxy
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;下载完成后，别忘了把 &lt;code&gt;zsh-osx-autoproxy&lt;/code&gt; 添加到配置文件的 &lt;code&gt;plugins&lt;/code&gt; 中，并执行 &lt;code&gt;source ~/.zshrc&lt;/code&gt; 使配置生效。&lt;/p&gt;
&lt;h3 id="小结"&gt;小结&lt;/h3&gt;
&lt;p&gt;至此，你已经完成了 Oh My Zsh 在 macOS 下的基本配置。现在你获得了一个更漂亮、更强大的终端，相信这能让你在终端下进行操作时事半功倍。&lt;/p&gt;</description></item><item><title>Blog 更新公告：样式修改，RSS 全文输出，and more</title><link>https://blog.hly0928.com/post/blog-update-01/</link><pubDate>Sun, 19 May 2019 03:30:00 +0800</pubDate><author> Steven</author><guid>https://blog.hly0928.com/post/blog-update-01/</guid><description>&lt;p&gt;嗯…这两天花了&lt;del&gt;不少&lt;/del&gt;一点时间更新了一下 Blog，这里稍微记录一下。&lt;/p&gt;
&lt;h3 id="配色和样式调整"&gt;配色和样式调整&lt;/h3&gt;
&lt;p&gt;配色上的调整相信你已经看到了，总之…红黑配色赛高！&lt;del&gt;（其实是红灰啦）&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;另外，如果你在 PC 的宽屏幕上浏览本 Blog，你会发现正文内容两侧有了一定留白，让阅读体验更佳。移动端不受此影响。同时，我对页面中标题、图片与段落之间的间距进行了微调，避免像之前那样过于紧凑。&lt;/p&gt;
&lt;h3 id="rss-全文输出"&gt;RSS 全文输出&lt;/h3&gt;
&lt;p&gt;之前我提到过 Hugo 默认的 RSS 输出只提供摘要，想要阅读全文还是得跳转到原网页，或是使用 Mercury 等全文输出插件，很不方便。事实上，稍微修改一下 Hugo 默认的 RSS 模版就能实现全文输出。以下是自带的默认 RSS 模版：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-xml" data-lang="xml"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;&lt;span style="color:#ff79c6"&gt;&amp;lt;rss&lt;/span&gt; &lt;span style="color:#50fa7b"&gt;version=&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;&amp;#34;2.0&amp;#34;&lt;/span&gt; &lt;span style="color:#50fa7b"&gt;xmlns:atom=&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;&amp;#34;http://www.w3.org/2005/Atom&amp;#34;&lt;/span&gt;&lt;span style="color:#ff79c6"&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff79c6"&gt;&amp;lt;channel&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff79c6"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;{{ if eq .Title .Site.Title }}{{ .Site.Title }}{{ else }}{{ with .Title }}{{.}} on {{ end }}{{ .Site.Title }}{{ end }}&lt;span style="color:#ff79c6"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff79c6"&gt;&amp;lt;link&amp;gt;&lt;/span&gt;{{ .Permalink }}&lt;span style="color:#ff79c6"&gt;&amp;lt;/link&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff79c6"&gt;&amp;lt;description&amp;gt;&lt;/span&gt;Recent content {{ if ne .Title .Site.Title }}{{ with .Title }}in {{.}} {{ end }}{{ end }}on {{ .Site.Title }}&lt;span style="color:#ff79c6"&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff79c6"&gt;&amp;lt;generator&amp;gt;&lt;/span&gt;Hugo -- gohugo.io&lt;span style="color:#ff79c6"&gt;&amp;lt;/generator&amp;gt;&lt;/span&gt;{{ with .Site.LanguageCode }}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff79c6"&gt;&amp;lt;language&amp;gt;&lt;/span&gt;{{.}}&lt;span style="color:#ff79c6"&gt;&amp;lt;/language&amp;gt;&lt;/span&gt;{{end}}{{ with .Site.Author.email }}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff79c6"&gt;&amp;lt;managingEditor&amp;gt;&lt;/span&gt;{{.}}{{ with $.Site.Author.name }} ({{.}}){{end}}&lt;span style="color:#ff79c6"&gt;&amp;lt;/managingEditor&amp;gt;&lt;/span&gt;{{end}}{{ with .Site.Author.email }}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff79c6"&gt;&amp;lt;webMaster&amp;gt;&lt;/span&gt;{{.}}{{ with $.Site.Author.name }} ({{.}}){{end}}&lt;span style="color:#ff79c6"&gt;&amp;lt;/webMaster&amp;gt;&lt;/span&gt;{{end}}{{ with .Site.Copyright }}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff79c6"&gt;&amp;lt;copyright&amp;gt;&lt;/span&gt;{{.}}&lt;span style="color:#ff79c6"&gt;&amp;lt;/copyright&amp;gt;&lt;/span&gt;{{end}}{{ if not .Date.IsZero }}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff79c6"&gt;&amp;lt;lastBuildDate&amp;gt;&lt;/span&gt;{{ .Date.Format &amp;#34;Mon, 02 Jan 2006 15:04:05 -0700&amp;#34; | safeHTML }}&lt;span style="color:#ff79c6"&gt;&amp;lt;/lastBuildDate&amp;gt;&lt;/span&gt;{{ end }}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {{ with .OutputFormats.Get &amp;#34;RSS&amp;#34; }}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {{ printf &amp;#34;&lt;span style="color:#ff79c6"&gt;&amp;lt;atom:link&lt;/span&gt; &lt;span style="color:#50fa7b"&gt;href=&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;%q&lt;/span&gt; &lt;span style="color:#50fa7b"&gt;rel=&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;\&amp;#34;self\&amp;#34;&lt;/span&gt; &lt;span style="color:#50fa7b"&gt;type=&lt;/span&gt;&lt;span style="color:#f1fa8c"&gt;%q&lt;/span&gt; &lt;span style="color:#ff79c6"&gt;/&amp;gt;&lt;/span&gt;&amp;#34; .Permalink .MediaType | safeHTML }}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {{ end }}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {{ range .Pages }}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff79c6"&gt;&amp;lt;item&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff79c6"&gt;&amp;lt;title&amp;gt;&lt;/span&gt;{{ .Title }}&lt;span style="color:#ff79c6"&gt;&amp;lt;/title&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff79c6"&gt;&amp;lt;link&amp;gt;&lt;/span&gt;{{ .Permalink }}&lt;span style="color:#ff79c6"&gt;&amp;lt;/link&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff79c6"&gt;&amp;lt;pubDate&amp;gt;&lt;/span&gt;{{ .Date.Format &amp;#34;Mon, 02 Jan 2006 15:04:05 -0700&amp;#34; | safeHTML }}&lt;span style="color:#ff79c6"&gt;&amp;lt;/pubDate&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {{ with .Site.Author.email }}&lt;span style="color:#ff79c6"&gt;&amp;lt;author&amp;gt;&lt;/span&gt;{{.}}{{ with $.Site.Author.name }} ({{.}}){{end}}&lt;span style="color:#ff79c6"&gt;&amp;lt;/author&amp;gt;&lt;/span&gt;{{end}}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff79c6"&gt;&amp;lt;guid&amp;gt;&lt;/span&gt;{{ .Permalink }}&lt;span style="color:#ff79c6"&gt;&amp;lt;/guid&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff79c6"&gt;&amp;lt;description&amp;gt;&lt;/span&gt;{{ .Summary | html }}&lt;span style="color:#ff79c6"&gt;&amp;lt;/description&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff79c6"&gt;&amp;lt;/item&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; {{ end }}
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff79c6"&gt;&amp;lt;/channel&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt; &lt;span style="color:#ff79c6"&gt;&amp;lt;/rss&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;要实现全文输出，我们只需要在 &lt;code&gt;layouts/&lt;/code&gt; 下建立一个 &lt;code&gt;rss.xml&lt;/code&gt; 文件，复制上述模版并将 &lt;code&gt;&amp;lt;description&amp;gt;{{ .Summary | html }}&amp;lt;/description&amp;gt;&lt;/code&gt; 改成 &lt;code&gt;&amp;lt;description&amp;gt;{{ .Content | html }}&amp;lt;/description&amp;gt;&lt;/code&gt; 即可。&lt;/p&gt;
&lt;p&gt;如果&lt;del&gt;真的有人&lt;/del&gt;你使用 RSS 订阅本 Blog，相信这会带来更好的体验。&lt;/p&gt;
&lt;h3 id="重写-tags"&gt;重写 Tags&lt;/h3&gt;
&lt;p&gt;之前的 Tags 有些重复，而且在 Tags &lt;a href="https://blog.hly0928.com/tags/"&gt;页面&lt;/a&gt; 里看上去也不太美观，于是重新分类整理了一下 Tags，并全部使用中文。&lt;/p&gt;
&lt;h3 id="something-more"&gt;Something more…&lt;/h3&gt;
&lt;p&gt;还有些其他的事 —— 经过稍微的折腾，我把 Blog 的 web server 从 Apache 换成了 Nginx &lt;del&gt;（嗯，没有为什么）&lt;/del&gt;。同时，经过另一番折腾，本 Blog 终于能正常显示 &lt;a href="https://github.com/laozhu/hugo-nuo"&gt;Hugo-nuo&lt;/a&gt; 主题自带的 404 页面了。你可以访问本 Blog 下一个不存在的网址（比如 &lt;a href="https://blog.hly0928.com/donotexist/"&gt;这个&lt;/a&gt;）来&lt;del&gt;查看这有趣的 404 页面。&lt;/del&gt; 如果你对上面的折腾过程有兴趣，我会在稍后写「借助 HyperApp &amp;amp; Hugo 搭建个人博客」一文时详细说说。&lt;/p&gt;</description></item><item><title>用 IFTTT 实现 Blog 更新时自动发推</title><link>https://blog.hly0928.com/post/post-blog-updates-to-twitter-using-ifttt/</link><pubDate>Sun, 12 May 2019 22:00:00 +0800</pubDate><author> Steven</author><guid>https://blog.hly0928.com/post/post-blog-updates-to-twitter-using-ifttt/</guid><description>&lt;p&gt;最近把 Blog 从 Blogspot 平台迁移到了自己的 VPS 上，这之后发现了一点不便之处：之前用的 Blogger to Twitter 的 IFTTT applet 不再可用了。由于我懒得每次更新 Blog 之后再手动推送到 Twitter，就建立了一个新的 applet 来实现这一功能。&lt;/p&gt;
&lt;p&gt;原理上很简单。我们利用 IFTTT 监听 Blog 的 RSS，一旦有新内容就推送到 Twitter 上。下面是详细配置：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开 &lt;a href="https://ifttt.com/my_applets"&gt;IFTTT - My Applets&lt;/a&gt;，登录账号，点击 New Applet&lt;/li&gt;
&lt;li&gt;“this” 中选择 RSS Feed &amp;gt; New feed item，填入你 Blog 的 RSS 地址（比如本 Blog 的地址是 &lt;a href="https://blog.hly0928.com/index.xml"&gt;https://blog.hly0928.com/index.xml&lt;/a&gt; ）&lt;/li&gt;
&lt;li&gt;“that” 中选择 Twitter &amp;gt; Post a tweet，编辑一下 Tweet text&lt;/li&gt;
&lt;li&gt;点击 Create action &amp;gt; Finish，完成&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;完整配置：&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/post-blog-updates-to-twitter-using-ifttt/01.png"/&gt;
&lt;/figure&gt;
&lt;p&gt;之后 Blog 的更新就会自动推送到 Twitter 上了。&lt;/p&gt;</description></item><item><title>借助 HyperApp 搭建自己的 Tiny Tiny RSS &amp; RSSHub 服务</title><link>https://blog.hly0928.com/post/set-up-own-tiny-tiny-rss-service-using-hyperapp/</link><pubDate>Sun, 12 May 2019 21:00:00 +0800</pubDate><author> Steven</author><guid>https://blog.hly0928.com/post/set-up-own-tiny-tiny-rss-service-using-hyperapp/</guid><description>&lt;h3 id="前言--在-2019-年我为什么还需要-rss"&gt;前言 —— 在 2019 年，我为什么还需要 RSS？&lt;/h3&gt;
&lt;p&gt;在社交媒体、推荐算法大行其道的今天，RSS 作为一种稍显「落后」的阅读方式已然式微。然而，相比 Twitter 等平台几乎实时的信息传递与「刷不完」的信息流，RSS 真的就一无是处了吗？我认为不是。RSS 作为一种阅读方式，拥有以下难以取代的优点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;能方便地对信息来源进行 &lt;strong&gt;分类整理&lt;/strong&gt;，避免杂乱&lt;/li&gt;
&lt;li&gt;能获得 &lt;strong&gt;更好的阅读体验&lt;/strong&gt;，去除无用的冗余信息&lt;/li&gt;
&lt;li&gt;能 (借助一些服务) 在多平台 &lt;strong&gt;同步阅读进度&lt;/strong&gt;，清楚哪些「已读」哪些「未读」&lt;/li&gt;
&lt;li&gt;能兼容绝大部分网页 (尤其是个人&lt;strong&gt;博客&lt;/strong&gt;)，不再错过一些博客的更新&lt;/li&gt;
&lt;li&gt;能增加信息获取过程中的效率&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外，与 Twitter 等社交媒体相比，RSS 还有一个最大的好处 —— 提供了从 &lt;strong&gt;信息筛选&lt;/strong&gt; 到 &lt;strong&gt;文章阅读&lt;/strong&gt; 的 &lt;strong&gt;完整&lt;/strong&gt; 体验。你在 Twitter 上能看到的，往往只是一篇文章的标题和链接，如果你想要继续阅读，就必须跳转到原网页，这样的体验是 &lt;strong&gt;割裂&lt;/strong&gt; 的。而 RSS 则不同，你不必再跳转到浏览器中，甚至可以自定义文章的呈现效果（字体、字号、明暗模式等）。这种完整的阅读体验也是我选择 RSS 的重要原因。&lt;/p&gt;
&lt;h3 id="为什么是-tiny-tiny-rss"&gt;为什么是 Tiny Tiny RSS？&lt;/h3&gt;
&lt;p&gt;在真正考虑搭建自己的 RSS 服务之前，我也尝试过一些主流的 RSS 服务，比如 &lt;a href="https://feedly.com"&gt;Feedly&lt;/a&gt;、&lt;a href="https://www.inoreader.com"&gt;Inoreader&lt;/a&gt;。诚然，这些服务都算得上「好用」，但总有这样或那样功能上的限制。如果要解除限制，就必须订阅收费服务。从少数派上 &lt;a href="https://sspai.com/post/44420"&gt;这篇文章&lt;/a&gt; 整理的内容来看，Feedly ($65/年)、Inoreader ($15/30/50/年) 的年费都算得上是一笔不小的开销。&lt;/p&gt;
&lt;p&gt;仅仅为了实现 RSS 这一并不算复杂的需求，而花费大量金钱，未免让人觉得有些不值。相比之下，VPS 的价格与上述服务相差无几，还能实现许多 RSS 之外的功能（搭梯子、建站等等），所以购买 VPS 再搭建自己的 RSS 服务无疑是一个不错的选择。加上我本来也一直在续费 VPS，正好借此机会让手上的服务器发挥梯子之外的价值。&lt;/p&gt;
&lt;p&gt;确定了自己搭 RSS 服务之后，剩下的就是选择一个开源的解决方案。这里我选择了 Tiny Tiny RSS，主要是受少数派上 &lt;a href="https://sspai.com/post/41302"&gt;这篇文章&lt;/a&gt; 的影响，后文也有不少设置会参考这篇文章的内容。&lt;/p&gt;
&lt;h3 id="开始前的准备"&gt;开始前的准备&lt;/h3&gt;
&lt;p&gt;&lt;del&gt;废话了这么多，&lt;/del&gt; 终于到了开始搭建的环节。在此之前你需要准备：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;VPS 一台（最好已经参考 &lt;a href="https://blog.hly0928.com/post/vps-simple-setup/"&gt;这篇文章&lt;/a&gt; 进行了简单设置）&lt;/li&gt;
&lt;li&gt;一个已经正确解析到 VPS 上的域名&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.hyperapp.fun/zh/"&gt;HyperApp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;PC（最好是 Mac，本文操作将以 Mac 为例）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id="安装-nginx-proxy--nginx-ssl-support"&gt;安装 Nginx Proxy &amp;amp; Nginx SSL Support&lt;/h3&gt;
&lt;p&gt;这一部分请参考 HyperApp &lt;a href="https://www.hyperapp.fun/zh/SSL.html"&gt;官方文档&lt;/a&gt;（网站被墙，可能需要梯子）。确保 Nginx Proxy 和 Nginx SSL Support 已经正确安装并运行后继续下一步。如果你之前 &lt;a href="https://blog.hly0928.com/post/vps-simple-setup/#section-01"&gt;编辑&lt;/a&gt; 了 ufw 的 &lt;code&gt;after.rules&lt;/code&gt; 以解决 ufw 对 Docker 容器无效的问题，记得允许外部网络访问 Nginx Proxy 发布的端口：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ufw route allow from any to any port &lt;span style="color:#bd93f9"&gt;80&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;ufw route allow from any to any port &lt;span style="color:#bd93f9"&gt;443&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="创建-ttrss-容器网络"&gt;创建 TTRSS 容器网络&lt;/h3&gt;
&lt;p&gt;为了让 Tiny Tiny RSS 容器能够访问到 PostgreSQL 数据库，我们不妨创建一个专有的 &lt;code&gt;ttrss-network&lt;/code&gt; 容器网络&lt;sup&gt;&lt;a href="#ref01"&gt;[1]&lt;/a&gt;&lt;/sup&gt;。ssh 到服务器上，随后执行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;docker network create ttrss-network
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="安装-postgresql"&gt;安装 PostgreSQL&lt;/h3&gt;
&lt;p&gt;在安装 Tiny Tiny RSS 之前，我们需要先安装数据库来存储 RSS 服务运行的记录。这里我们采用 Tiny Tiny RSS 推荐的 PostgreSQL 作为数据库。&lt;/p&gt;
&lt;p&gt;转到 HyperApp 的商店中，选择 &lt;code&gt;Docker Image&lt;/code&gt; 并选择你的服务器，进入配置页面，然后按以下配置填写&lt;sup&gt;&lt;a href="#ref02"&gt;[2]&lt;/a&gt;&lt;/sup&gt;：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Image&lt;/td&gt;
&lt;td&gt;&lt;code&gt;postgres:alpine&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Options&lt;/td&gt;
&lt;td&gt;&lt;code&gt;--restart unless-stopped -v /srv/docker/postgres/data:/var/lib/postgresql/data -e POSTGRES_PASSWORD=&amp;lt;数据库密码&amp;gt; --network=ttrss-network --network-alias=postgres&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Command&lt;/td&gt;
&lt;td&gt;（留空）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Args&lt;/td&gt;
&lt;td&gt;（留空）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;# 请自行设置数据库密码&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;点击保存，然后在应用页面找到刚刚添加的 PostgreSQL，将其安装在你的服务器上。&lt;/p&gt;
&lt;h3 id="安装-tiny-tiny-rss"&gt;安装 Tiny Tiny RSS&lt;/h3&gt;
&lt;p&gt;转到 HyperApp 的商店中，选择 &lt;code&gt;Docker Image&lt;/code&gt; 并选择你的服务器，进入配置页面，然后按以下配置填写：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Image&lt;/td&gt;
&lt;td&gt;&lt;code&gt;wangqiru/ttrss&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Options&lt;/td&gt;
&lt;td&gt;&lt;code&gt;--restart unless-stopped --expose 80 -v /srv/docker/ttrss/feed-icons:/var/www/feed-icons -e SELF_URL_PATH=https://&amp;lt;你的域名&amp;gt; -e DB_HOST=postgres -e DB_PORT=5432 -e DB_USER=postgres -e DB_PASS=&amp;lt;数据库密码&amp;gt; --network=ttrss-network&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Command&lt;/td&gt;
&lt;td&gt;（留空）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Args&lt;/td&gt;
&lt;td&gt;（留空）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;注意其中的 &lt;code&gt;SELF_URL_PATH&lt;/code&gt; 后要改为 &lt;code&gt;https://你的域名&lt;/code&gt;，数据库密码即为上面设置的密码。&lt;/p&gt;
&lt;p&gt;点击下方的 &lt;code&gt;Show Nginx and SSL options&lt;/code&gt;，然后按以下配置填写：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Domain&lt;/td&gt;
&lt;td&gt;与你上面 &lt;code&gt;SELF_URL_PATH&lt;/code&gt; 中的域名一致，如 &lt;code&gt;rss.example.com&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Port&lt;/td&gt;
&lt;td&gt;&lt;code&gt;80&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HTTPS&lt;/td&gt;
&lt;td&gt;Redirect http to https&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSL-Domain&lt;/td&gt;
&lt;td&gt;（自动填写，应该与上面的 &lt;code&gt;Domain&lt;/code&gt; 一致）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Email&lt;/td&gt;
&lt;td&gt;用来管理域名证书的邮箱&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;点击保存，然后在应用页面找到刚刚添加的 Tiny Tiny RSS 服务，将其安装在你的服务器上。&lt;/p&gt;
&lt;p&gt;需要注意的是，Options 中的 &lt;code&gt;-v /srv/docker/ttrss/feed-icons:/var/www/feed-icons&lt;/code&gt; 用于持久化订阅源网站 icon，参考 &lt;a href="https://blog.spencerwoo.com/2020/03/ttrss-noteworthy"&gt;Tiny Tiny RSS：部署中的普遍问题与注意事项总结&lt;/a&gt;。安装后务必执行 &lt;code&gt;sudo chmod -R 777 /srv/docker/ttrss/feed-icons&lt;/code&gt; 赋予正确的文件权限。&lt;/p&gt;
&lt;p&gt;为了让处于 Docker 默认 &lt;code&gt;bridge&lt;/code&gt; 网络的 Nginx Proxy 能与 Tiny Tiny RSS 通信，我们还需要将 TTRSS 容器连接到 &lt;code&gt;bridge&lt;/code&gt; 网络上。ssh 到你的服务器，随后执行：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;docker container ls | grep wangqiru/ttrss | awk &lt;span style="color:#f1fa8c"&gt;&amp;#39;{print $1}&amp;#39;&lt;/span&gt; | xargs docker network connect bridge
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然后重启 TTRSS 容器：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;docker container ls | grep wangqiru/ttrss | awk &lt;span style="color:#f1fa8c"&gt;&amp;#39;{print $1}&amp;#39;&lt;/span&gt; | xargs docker restart
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id="section-01"&gt;开始使用 Tiny Tiny RSS&lt;/h3&gt;
&lt;p&gt;稍等片刻，你的 TTRSS 服务应该就跑起来了。此时，访问你在上一步中设置的域名，看到以下画面则表示配置成功：&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/set-up-own-tiny-tiny-rss-service-using-hyperapp/01.png" width="60%"/&gt;
&lt;/figure&gt;
&lt;p&gt;使用默认账号 &lt;code&gt;admin&lt;/code&gt; 和默认密码 &lt;code&gt;password&lt;/code&gt; 即可登录。登录后请第一时间修改密码，有条件的话还可以使用 &lt;a href="https://zh.wikipedia.org/wiki/%E5%9F%BA%E4%BA%8E%E6%97%B6%E9%97%B4%E7%9A%84%E4%B8%80%E6%AC%A1%E6%80%A7%E5%AF%86%E7%A0%81%E7%AE%97%E6%B3%95"&gt;TOTP&lt;/a&gt; 验证码进一步增加登录安全性。&lt;/p&gt;
&lt;p&gt;有关登录后的初次配置、导入并管理订阅与过滤器等内容，你可以参考少数派上 &lt;a href="https://sspai.com/post/41302"&gt;这篇文章&lt;/a&gt; 的第 2 部分。我在这里只提几个比较重要的地方：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主题。我们采用的 Docker 镜像自带了仿 Feedly / RSSHub 主题，你可以在 &lt;code&gt;Preferences &amp;gt; General &amp;gt; Theme&lt;/code&gt; 中选择 &lt;code&gt;feedly(-cozy)_auto.css&lt;/code&gt; 或 &lt;code&gt;rsshub.css&lt;/code&gt; 并保存启用。&lt;/li&gt;
&lt;li&gt;API 访问。为了使用第三方 RSS 阅读器访问我们自建的服务，务必勾选 &lt;code&gt;Preferences &amp;gt; General &amp;gt; Enable API&lt;/code&gt; 这一选项。&lt;/li&gt;
&lt;li&gt;如果你的订阅源较多而 VPS 硬盘较小，则应当将 &lt;code&gt;Preferences &amp;gt; Articles &amp;gt; Purge articles older than:&lt;/code&gt; 后的天数改小一些，建议不要超过 30 日。&lt;/li&gt;
&lt;li&gt;如果你喜欢直接展开文章而不是显示文章列表，你应该打开 &lt;code&gt;Preferences &amp;gt; Articles &amp;gt; Always expand articles&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另外，我在参考 &lt;a href="https://spencerwoo.com"&gt;@SpencerWoo&lt;/a&gt; 大佬的 &lt;a href="https://gist.github.com/spencerwooo/7a373a3c921a50953ec12f329452ee27"&gt;Tiny Tiny RSS Black (Pink) Theme&lt;/a&gt; 的基础上，写了一份优化 Feedly 主题效果的 CSS，主要修改了 Feedly 主题部分默认的字体大小、宽度、行高等，提升阅读体验。你可以在 &lt;a href="https://gist.github.com/hly0928/3921a86257c2e9a064a5e0ba5bcdc74d"&gt;这里 (Gist)&lt;/a&gt; 查看，将 CSS 内容复制到 &lt;code&gt;Preferences &amp;gt; General &amp;gt; Theme &amp;gt; Customize&lt;/code&gt; 中即可应用。&lt;/p&gt;
&lt;h3 id="使用-mercury-实现文章全文输出"&gt;使用 Mercury 实现文章全文输出&lt;/h3&gt;
&lt;p&gt;某些 RSS 订阅源只会给出文章前两三段的内容，查看全文还得跳转到网站才行，这显然会破坏 RSS 完整的阅读体验。许多付费的 RSS 服务也将全文输出作为一大卖点。而对于我们自建的 Tiny Tiny RSS，我们可以使用 Mercury 实现文章全文输出。&lt;/p&gt;
&lt;p&gt;我们还是先使用 HyperApp 创建 Mercury Parser API 的 docker 容器。转到 HyperApp 的商店中，选择 &lt;code&gt;Docker Image&lt;/code&gt; 并选择你的服务器，进入配置页面，然后按以下配置填写：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Image&lt;/td&gt;
&lt;td&gt;&lt;code&gt;wangqiru/mercury-parser-api&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Options&lt;/td&gt;
&lt;td&gt;&lt;code&gt;--restart unless-stopped --expose 3000 --network=ttrss-network --network-alias=mercury-parser-api&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Command&lt;/td&gt;
&lt;td&gt;（留空）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Args&lt;/td&gt;
&lt;td&gt;（留空）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;点击保存，然后在应用页面找到刚刚添加的 Mercury 插件，将其安装在你的服务器上。&lt;/p&gt;
&lt;p&gt;随后，我们登录 TTRSS 的网页，在 &lt;code&gt;Preferences &amp;gt; Plugins&lt;/code&gt; 中勾选 &lt;code&gt;mercury_fulltext&lt;/code&gt; 一项，并点击下方的 &lt;code&gt;Enable selected plugins&lt;/code&gt; 启用插件。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/set-up-own-tiny-tiny-rss-service-using-hyperapp/02.png" width="80%"/&gt;
&lt;/figure&gt;
&lt;p&gt;之后转到 &lt;code&gt;Feeds &amp;gt; Mercury Fulltext settings&lt;/code&gt;，填入 &lt;code&gt;mercury-parser-api:3000&lt;/code&gt; 并保存。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/set-up-own-tiny-tiny-rss-service-using-hyperapp/03.png" width="80%"/&gt;
&lt;/figure&gt;
&lt;p&gt;如果你需要为某个订阅源启用 Mercury 全文输出，只需要在 &lt;code&gt;Feed&lt;/code&gt; 中 &lt;code&gt;单击该订阅源 &amp;gt; Plugins&lt;/code&gt;，勾上 &lt;code&gt;Get fulltext via Mercury Parser&lt;/code&gt; 后保存即可。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/set-up-own-tiny-tiny-rss-service-using-hyperapp/04.png" width="60%"/&gt;
&lt;/figure&gt;
&lt;p&gt;这样就实现了在任何客户端上，都能直接浏览 RSS 的文章全文。&lt;/p&gt;
&lt;h3 id="section-02"&gt;使用 Fever 让更多客户端支持 Tiny Tiny RSS&lt;/h3&gt;
&lt;p&gt;借助 Fever 模拟插件，我们可以让 iOS 上的 Reeder 等客户端支持 Tiny Tiny RSS。&lt;/p&gt;
&lt;p&gt;首先确认你已经 &lt;a href="#section-01"&gt;打开&lt;/a&gt; 了 Tiny Tiny RSS 的 API 访问。随后在 &lt;code&gt;Preferences &amp;gt; Plugins&lt;/code&gt; 中勾选 &lt;code&gt;fever&lt;/code&gt; 一项，并点击下方的 &lt;code&gt;Enable selected plugins&lt;/code&gt; 启用插件。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/set-up-own-tiny-tiny-rss-service-using-hyperapp/05.png" width="80%"/&gt;
&lt;/figure&gt;
&lt;p&gt;刷新页面，在 &lt;code&gt;Preferences&lt;/code&gt; 下就会出现一个名叫 &lt;code&gt;Fever Emulation&lt;/code&gt; 的板块。点击进入，并在这里为 Fever 插件设置一个登录密码。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/set-up-own-tiny-tiny-rss-service-using-hyperapp/06.png" width="80%"/&gt;
&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;# 此处的登录密码&lt;/em&gt; &lt;em&gt;&lt;strong&gt;不是&lt;/strong&gt;&lt;/em&gt; &lt;em&gt;Tiny Tiny RSS 网页的登录密码。当然你可以把二者设置得一样。&lt;/em&gt;&lt;/p&gt;
&lt;h3 id="reeder-客户端设置"&gt;Reeder 客户端设置&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://reederapp.com"&gt;Reeder&lt;/a&gt; 是 iOS / macOS 平台上一款设计出色的 RSS 阅读器，兼容 Fever API。尽管它在 iOS 平台还有另一个竞争对手：&lt;a href="https://www.goldenhillsoftware.com/unread/"&gt;Unread&lt;/a&gt;，但 Unread 对于使用 Docker 部署的 TTRSS 服务的支持似乎有一些问题，会出现 &lt;strong&gt;无法将文章标记为已读&lt;/strong&gt; 的严重 bug。所以在这里我建议使用 Reeder，&lt;del&gt;况且 Reeder 还要便宜 5 刀呢。&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;我们在 Reeder app 中选择 Add account &amp;gt; Fever，然后按以下配置填写：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Server&lt;/td&gt;
&lt;td&gt;&lt;code&gt;https://你的域名/plugins/fever/&lt;/code&gt;，如 &lt;code&gt;https://rss.example.com/plugins/fever/&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Email&lt;/td&gt;
&lt;td&gt;admin&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Password&lt;/td&gt;
&lt;td&gt;为 Fever 插件 &lt;a href="#section-02"&gt;设置&lt;/a&gt; 的密码&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;填好后点击 Sign in，在详细配置中建议关闭 &lt;code&gt;Refresh on server&lt;/code&gt; 节省服务器资源，随后回到文章列表，下拉刷新，便可以使用 Reeder 阅读你的 RSS 订阅内容了。&lt;/p&gt;
&lt;h3 id="借助-ifttt--telegram-实现-rss-更新推送"&gt;借助 IFTTT &amp;amp; Telegram 实现 RSS 更新推送&lt;/h3&gt;
&lt;p&gt;尽管 Reeder 拥有极佳的阅读体验，但相比各类付费 RSS 服务，自建 Tiny Tiny RSS + Reeder 还是有一个短板 —— 不能推送 RSS 订阅源的 &lt;strong&gt;更新通知&lt;/strong&gt;。另外，Reeder 自带的后台应用刷新，不仅要求 app 常驻在最近应用中，而且还只能以角标形式显示未读文章数，不能推送详细的文章信息，仍然不够方便。下文中借助 RSSHub 订阅的一些内容（比如视频更新、推文等）在 Reeder 中查看，也显得有些不合适。所以，我们不妨借助 IFTTT &amp;amp; Telegram 来实现 RSS 更新自动推送。&lt;/p&gt;
&lt;p&gt;首先，我们需要使用 Tiny Tiny RSS 中的一个过滤器功能：发布到 RSS 源。它可以将你指定的一些 RSS 订阅源更新自动发布到一个 RSS 源中。打开 &lt;code&gt;Preferences &amp;gt; Filters&lt;/code&gt;，选择 &lt;code&gt;Create filter&lt;/code&gt;。在 &lt;code&gt;Match&lt;/code&gt; 中填入过滤参数（支持正则表达式）；如果你想要推送所有的订阅源更新，则填入 &lt;code&gt;.*&lt;/code&gt;，&lt;code&gt;field&lt;/code&gt; 中选择 &lt;code&gt;Link in All feeds&lt;/code&gt; 即可。在 &lt;code&gt;Apply actions&lt;/code&gt; 中选择 &lt;code&gt;Publish article&lt;/code&gt;，随后保存规则。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/set-up-own-tiny-tiny-rss-service-using-hyperapp/07.png" width="60%"/&gt;
&lt;/figure&gt;
&lt;p&gt;这时我们的自动发布功能就配置完毕了。转到 &lt;code&gt;Preferences &amp;gt; Feeds &amp;gt; Published &amp;amp; shared articles / Generated feeds&lt;/code&gt; 下，点击 &lt;code&gt;Display URL&lt;/code&gt; 就能获得我们自动发布到的 RSS 地址了。记得 Copy 下来稍后要用。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/set-up-own-tiny-tiny-rss-service-using-hyperapp/08.png" width="70%"/&gt;
&lt;/figure&gt;
&lt;p&gt;下面配置 IFTTT。打开 &lt;a href="https://ifttt.com/my_applets"&gt;IFTTT - My Applets&lt;/a&gt;，登录账号，点击 New Applet。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;“this” 中选择 RSS Feed &amp;gt; New feed item，填入你刚刚获得的 RSS 地址&lt;/li&gt;
&lt;li&gt;“that” 中选择 Telegram &amp;gt; Send message，选择 Target chat（只想要推送的话就是 Private chat with @IFTTT），自定义一下 Message text 以及选择是否打开 Web page preview
&lt;em&gt;# 如果你之前没有绑定 Telegram 账户，按提示绑定即可，一分钟就能搞定～&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;点击 Create action &amp;gt; Finish，完成设置。这样之后的 RSS 更新就会通过 IFTTT 推送到你的 Telegram 上了。记得要给 &lt;a href="https://t.me/IFTTT"&gt;@IFTTT&lt;/a&gt; 通知权限。&lt;/p&gt;
&lt;p&gt;另外，欢迎订阅咱的 &lt;a href="https://t.me/stevens_rss_subscriptions"&gt;Telegram 频道&lt;/a&gt;，这里有咱订阅的所有 RSS 源更新（逃&lt;/p&gt;
&lt;h3 id="安装并使用-rsshub"&gt;安装并使用 RSSHub&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;RSSHub 是一个轻量、易于扩展的 RSS 生成器，可以给任何奇奇怪怪的内容生成 RSS 订阅源。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;借助 &lt;a href="https://github.com/DIYgod/RSSHub"&gt;RSSHub&lt;/a&gt;，我们可以订阅普通 RSS 订阅不到的内容，比如 B 站 UP 主更新、Telegram 频道更新，等等。我们依旧使用 HyperApp 部署 RSSHub 的 Docker 容器。转到 HyperApp 的商店中，选择 &lt;code&gt;Docker Image&lt;/code&gt; 并选择你的服务器，进入配置页面，然后按以下配置填写：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Image&lt;/td&gt;
&lt;td&gt;&lt;code&gt;diygod/rsshub&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Options&lt;/td&gt;
&lt;td&gt;&lt;code&gt;--restart unless-stopped --expose 1200 -e DEBUG_INFO=false -e CACHE_EXPIRE=1200 -e CACHE_CONTENT_EXPIRE=1800&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Command&lt;/td&gt;
&lt;td&gt;（留空）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Args&lt;/td&gt;
&lt;td&gt;（留空）&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;其中 &lt;code&gt;CACHE_EXPIRE&lt;/code&gt; 后的数值是路由缓存过期时间，&lt;code&gt;CACHE_CONTENT_EXPIRE&lt;/code&gt; 后的数值是内容缓存过期时间，单位均为秒。&lt;/p&gt;
&lt;p&gt;如果你不希望任何人都能访问到你的 RSSHub 服务，那么你可以在 Options 末尾添加访问控制选项：&lt;code&gt;-e WHITELIST=&amp;lt;你的服务器 IP&amp;gt; -e ACCESS_KEY=&amp;lt;访问密钥&amp;gt;&lt;/code&gt;。这样，就只有你的 TTRSS 服务器或是有正确访问密钥的用户才能使用你的 RSSHub 服务了&lt;sup&gt;&lt;a href="#ref03"&gt;[3]&lt;/a&gt;&lt;/sup&gt;。&lt;/p&gt;
&lt;p&gt;如果你想用 Nginx 反代 RSSHub 服务，则点击下方的 &lt;code&gt;Show Nginx and SSL options&lt;/code&gt;，然后按以下配置填写：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Domain&lt;/td&gt;
&lt;td&gt;你为 RSSHub 设置的域名（注意&lt;strong&gt;不是&lt;/strong&gt; Tiny Tiny RSS 的域名）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Port&lt;/td&gt;
&lt;td&gt;&lt;code&gt;1200&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HTTPS&lt;/td&gt;
&lt;td&gt;Redirect http to https&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;SSL-Domain&lt;/td&gt;
&lt;td&gt;（自动填写，应该与上面的 &lt;code&gt;Domain&lt;/code&gt; 一致）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Email&lt;/td&gt;
&lt;td&gt;用来管理域名证书的邮箱&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;点击保存，然后在应用页面找到刚刚添加的 RSSHub，将其安装在你的服务器上。&lt;/p&gt;
&lt;p&gt;此时我们打开浏览器，访问 &lt;code&gt;https://你为RSSHub设置的域名&lt;/code&gt;，出现以下提示则代表 RSSHub 配置成功：&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/set-up-own-tiny-tiny-rss-service-using-hyperapp/09.png" width="60%"/&gt;
&lt;/figure&gt;
&lt;p&gt;然后你就可以在 Tiny Tiny RSS 中添加 RSSHub 支持的订阅源了，订阅源地址为 &lt;code&gt;https://你为RSSHub设置的域名/路由参数&lt;/code&gt;，相关路由参数请参考 RSSHub &lt;a href="https://docs.rsshub.app"&gt;官方文档&lt;/a&gt;。&lt;/p&gt;
&lt;h4 id="rsshub-中部分-rss-模块的配置"&gt;RSSHub 中部分 RSS 模块的配置&lt;/h4&gt;
&lt;p&gt;有部分服务（Youtube，Twitter 等）需要在配置 RSSHub 时填入相关参数才能订阅 RSS，具体的服务列表和参数类型你可以参考 RSSHub &lt;a href="https://docs.rsshub.app/install/#%E9%83%A8%E5%88%86-rss-%E6%A8%A1%E5%9D%97%E9%85%8D%E7%BD%AE"&gt;官方文档&lt;/a&gt;。下面以 &lt;strong&gt;Youtube&lt;/strong&gt; 为例解释一下如何配置。&lt;/p&gt;
&lt;p&gt;根据 RSSHub 的 &lt;a href="https://docs.rsshub.app/install/#%E9%83%A8%E5%88%86-rss-%E6%A8%A1%E5%9D%97%E9%85%8D%E7%BD%AE"&gt;官方文档&lt;/a&gt;，我们需要提供 &lt;code&gt;YouTube API Key&lt;/code&gt;。打开 Google 的 API &lt;a href="https://console.developers.google.com/"&gt;申请页面&lt;/a&gt;，点击左边的 Library &amp;gt; 搜索 “Youtube” &amp;gt; 选择 &lt;code&gt;YouTube Data API v3&lt;/code&gt; &amp;gt; Manage &amp;gt; Create credentials &amp;gt; 选择 API, Web server 和 Public data 三项，随后就可以在 Credentials 一栏中找到可用的 API Key 了。&lt;/p&gt;
&lt;figure class="zoomable"&gt;&lt;img src="https://blog.hly0928.com/media/posts/set-up-own-tiny-tiny-rss-service-using-hyperapp/10.png" width="80%"/&gt;
&lt;/figure&gt;
&lt;p&gt;获得 API Key 后，我们回到 HyperApp 中，修改 RSSHub 的设置：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;项目&lt;/th&gt;
&lt;th&gt;内容&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Image&lt;/td&gt;
&lt;td&gt;&lt;code&gt;diygod/rsshub&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Options&lt;/td&gt;
&lt;td&gt;&lt;code&gt;--restart unless-stopped --expose 1200 -e DEBUG_INFO=false -e CACHE_EXPIRE=1200 -e CACHE_CONTENT_EXPIRE=1800 -e YOUTUBE_KEY=&amp;lt;你的 API Key&amp;gt;&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Command&lt;/td&gt;
&lt;td&gt;（留空）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Args&lt;/td&gt;
&lt;td&gt;（留空）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;em&gt;# 其实就是在 Options 末尾加上环境变量&lt;/em&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;点击保存，然后在应用页面找到 RSSHub，选择 Update config 更新配置。&lt;/p&gt;
&lt;h3 id="小结"&gt;小结&lt;/h3&gt;
&lt;p&gt;本文是这个 Blog 建立以来最长的一篇文章。由于使用了 Docker 和 HyperApp 等自动化工具，实际操作起来并不算复杂，半小时左右就能搞定。不过我在配置中也踩了不少的坑，浪费了不少的时间，比如上文提到的 Docker network 不能连接 TTRSS 与 PostgreSQL、Unread 无法标记文章已读等问题……说到这里，我想再次摘录少数派 &lt;a href="https://sspai.com/post/41302"&gt;这篇文章&lt;/a&gt; 中的一段内容：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;当然，一旦涉及到这种 DIY 操作，总是要回应的质疑是：这么做值得吗？毕竟，「RSS 已死」不是什么新鲜论调了。这么说的人中，有的是 RSS 曾经的忠实用户，感慨曾经活跃的第三方软件和服务逐渐冷却；有的是新世代新闻、阅读服务的开发者，鄙弃 RSS 的老旧和刻板。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;值得与否我不知道，但我清楚的是：如果你像我一样讨厌推荐算法与无尽的信息流，RSS 不失为一个很好的选择。而有句话叫「工欲善其事，必先利其器」，那么，花上几小时的时间配置自己的 RSS 服务，也是有用且有必要的事情。&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id="-注"&gt;↩︎ 注&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p id="ref01"&gt;
这里参考了 &lt;a href="https://acuario.xyz/posts/set-up-tiny-tiny-rss-with-hyperapp"&gt;使用 HyperApp 搭建 Tiny Tiny RSS&lt;/a&gt;。不过，由于 HyperApp 无法自定义容器名，而该文章中也没有设置 postgres 容器的 network-alias，因此按照该文的方法会导致 TTRSS 无法连接到 postgres 数据库。&lt;/li&gt;
&lt;li&gt;&lt;p id="ref02"&gt;
这里我们使用 &lt;a href="https://docs.docker.com/engine/reference/commandline/run"&gt;docker run&lt;/a&gt; 的 &lt;code&gt;--network-alias&lt;/code&gt; 参数指定了 postgres 容器的网络别名，解决了上述问题，使 TTRSS 能够通过 &lt;code&gt;postgres&lt;/code&gt; 这一别名连接到 postgres 数据库。更多信息参见 &lt;a href="https://docs.docker.com/config/containers/container-networking"&gt;Docker Documentation - Container networking&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;&lt;p id="ref03"&gt;
更多信息参见 &lt;a href="https://docs.rsshub.app/install/#pei-zhi-fang-wen-kong-zhi-pei-zhi"&gt;RSSHub 文档 - 访问控制配置&lt;/a&gt;。&lt;/li&gt;
&lt;/ol&gt;</description></item><item><title>Hugo 文章日期设定上的小问题</title><link>https://blog.hly0928.com/post/hugo-post-date-issue/</link><pubDate>Sun, 12 May 2019 03:45:00 +0800</pubDate><author> Steven</author><guid>https://blog.hly0928.com/post/hugo-post-date-issue/</guid><description>&lt;p&gt;今天在用 Hugo 生成静态页面的时候，遇到了一个小问题 —— 文章的发布日期只要标记为今天，就无法生成该页面。&lt;/p&gt;
&lt;p&gt;不过，借助万能的 Google，我还是找到了原因。&lt;/p&gt;
&lt;p&gt;Hugo 在生成静态页面的时候，不会生成超过当前时间的文章；而 Hugo 默认采用的是 &lt;a href="https://zh.wikipedia.org/wiki/%E6%A0%BC%E6%9E%97%E5%B0%BC%E6%B2%BB%E6%A8%99%E6%BA%96%E6%99%82%E9%96%93"&gt;格林尼治平时&lt;/a&gt; (GMT)，比北京时间 (UTC+8) 晚了 8 个小时。也就是说，当北京时间在 08:00 之前，而你又将文章发布日期设在当天时，Hugo 就默认不会生成这个页面。&lt;/p&gt;
&lt;p&gt;至于解决方案，有两种方法。一是使用 Hugo 的 &lt;code&gt;--buildFuture&lt;/code&gt; 参数，二是在文章的 Markdown 文件中指定时区，下文详细解释一下。&lt;/p&gt;
&lt;h4 id="使用---buildfuture-参数"&gt;使用 &lt;code&gt;--buildFuture&lt;/code&gt; 参数&lt;/h4&gt;
&lt;p&gt;这是比较简单的方式，你只需要在用 Hugo 生成页面时加上 &lt;code&gt;--buildFuture&lt;/code&gt; 参数即可：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;hugo --buildFuture
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;用 Hugo 本地服务器预览页面时，也可以使用本参数：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-bash" data-lang="bash"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;hugo server --buildFuture
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id="指定文章时区"&gt;指定文章时区&lt;/h4&gt;
&lt;p&gt;以本文为例，如果不指定时区，那么 Markdown 文件头的格式是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-md" data-lang="md"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;date: 2019-05-12
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;指定为 UTC+8 时区的写法是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-md" data-lang="md"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;date: 2019-05-12T00:00:00+08:00
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;或者也可以用 timezone 指定时区：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre tabindex="0" style="color:#f8f8f2;background-color:#282a36;-moz-tab-size:2;-o-tab-size:2;tab-size:2;"&gt;&lt;code class="language-md" data-lang="md"&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;date: 2019-05-12
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;timezone: UTC+8
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;...
&lt;/span&gt;&lt;/span&gt;&lt;span style="display:flex;"&gt;&lt;span&gt;---
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;你可以查看 Hugo 的 &lt;a href="https://gohugo.io/functions/format/"&gt;官方文档&lt;/a&gt; 了解更多信息。&lt;/p&gt;</description></item></channel></rss>