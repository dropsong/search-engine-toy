<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
<title>rqdmap | blog</title>
<link>https://rqdmap.top/</link>
<description>Recent content on rqdmap | blog</description>
<generator>Hugo -- gohugo.io</generator>
<language>zh-cn</language><atom:link href="https://rqdmap.top/index.xml" rel="self" type="application/rss+xml"/>
<item>
<title>nvim-cmp 支持前缀匹配优先的补全</title>
<link>https://rqdmap.top/posts/kmp_in_lua/</link>
<pubDate>Fri, 19 Apr 2024 20:53:39 +0800</pubDate>
<guid>https://rqdmap.top/posts/kmp_in_lua/</guid>
<description>在我的 Neovim 配置中, 一直使用的是 nvim-cmp 作为补全引擎, 由于其默认支持模糊查找, 因而补全列表中可能会出现前缀匹配优先级不如子序列的乱序问题, 举一个例子: 补全候选项中有 abc_variable 和 xaxbx 这两个词 输入 ab, nvim-cmp 根据传入的比较函数进行逐个比较与排序; 但由于默认支持模糊查找, 且官方的补全函数中貌似没有前缀匹配优先的规</description>
</item>
<item>
<title>2023 年度总结</title>
<link>https://rqdmap.top/posts/2023-summary/</link>
<pubDate>Thu, 04 Jan 2024 23:58:04 +0800</pubDate>
<guid>https://rqdmap.top/posts/2023-summary/</guid>
<description>&lt;p&gt;尽管 2023 年不太特殊, 甚至容易发现不是素数(7*17*17), 不过对我个人而言 2023 是经历了许多、学习了许多的一年, 因此考虑做一个年度的自省与总结, 以期留下一些结构化的记忆以供后来者翻阅.&lt;/p&gt;</description>
</item>
<item>
<title>Python 进阶技巧: 类与继承</title>
<link>https://rqdmap.top/posts/class_in_python/</link>
<pubDate>Thu, 04 Jan 2024 23:16:51 +0800</pubDate>
<guid>https://rqdmap.top/posts/class_in_python/</guid>
<description>&lt;p&gt;本文主要介绍有关 Python 中类(class)与继承(inheritance)的一些高级使用知识与技巧, 包括:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;与类相关的若干内置函数&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多继承下的 MRO 序列与 C3 序列化方法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;super 类的使用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;魔术方法与类的实例化过程&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
</item>
<item>
<title>实用Linux桌面系统定制化方案</title>
<link>https://rqdmap.top/posts/rqdmap-linux/</link>
<pubDate>Sun, 03 Dec 2023 21:42:56 +0800</pubDate>
<guid>https://rqdmap.top/posts/rqdmap-linux/</guid>
<description>前前后后折腾自己使用的这套Linux桌面系统也有一年多的时间了, 但是由于其中涉及的事务纷繁细琐, 因而一直没有专门整理过一篇内容对其做系统的介绍. 不过由于这个周末又重构了之前的一套账单处理工具和一些常用脚本, 一下子便感觉到目前系统和功能服务已经愈发复杂起来了, 可以考虑对其做一个简单</description>
</item>
<item>
<title>Android微信记录备份方案</title>
<link>https://rqdmap.top/posts/wechat-dump/</link>
<pubDate>Mon, 20 Nov 2023 00:44:03 +0800</pubDate>
<guid>https://rqdmap.top/posts/wechat-dump/</guid>
<description>在还没有解锁root时, 我偶尔便会闲来无事查查看微信的用户记录导出方案, 一些方案是基于Windows的聊天记录解密, 如: windows取证之导出微信&amp;amp;QQ聊天记录, 还有一些是基于IOS系统的Itunes来做导出. 总的来说都不是很满足需求, 基于Windows的方案一来看评论</description>
</item>
<item>
<title>Pixel7刷机折腾小记</title>
<link>https://rqdmap.top/posts/pixel/</link>
<pubDate>Wed, 15 Nov 2023 23:36:02 +0800</pubDate>
<guid>https://rqdmap.top/posts/pixel/</guid>
<description>TL; DR 如何恢复Root? Pixel 自动推送的更新总是会覆盖掉 Root, 这边将简洁地给出如何恢复 Root 的过程以供查阅, 全部操作过程应当不超过15分钟. 因为是恢复root, 因而这里将不介绍adb工具套件的获取、bootloader的解锁等过程 从官方下载原厂固件文件, 注意: 选择的版本号需要与手机的操作系统版</description>
</item>
<item>
<title>字节后端实习申请记录</title>
<link>https://rqdmap.top/posts/%E5%AD%97%E8%8A%82%E6%90%9C%E7%B4%A2%E5%90%8E%E7%AB%AF%E5%AE%9E%E4%B9%A0/</link>
<pubDate>Thu, 14 Sep 2023 16:43:47 +0800</pubDate>
<guid>https://rqdmap.top/posts/%E5%AD%97%E8%8A%82%E6%90%9C%E7%B4%A2%E5%90%8E%E7%AB%AF%E5%AE%9E%E4%B9%A0/</guid>
<description>&lt;p&gt;&lt;b&gt;&lt;font color="red"&gt; 由于相关规定, 以下内容不应当得到公开传播, 因而设置访问密码! &lt;/font&gt;&lt;/b&gt;&lt;/p&gt;</description>
</item>
<item>
<title>Mac(x86派)的废物再利用</title>
<link>https://rqdmap.top/posts/mac%E6%B4%BE/</link>
<pubDate>Sat, 09 Sep 2023 19:48:33 +0800</pubDate>
<guid>https://rqdmap.top/posts/mac%E6%B4%BE/</guid>
<description>手头有一个退下来的mbp, 是老版本因而搭载的还是x86的CPU, 同时由于电源被我通过拓展坞充了次电而弄坏过, 因而一旦断电会光速关机.. 加上mbp真的是用到后面(大概4年)越用越卡, 让人怀疑macos是不是搞了什么鬼或怎么样.. 总之这台机子不太能当作主力机了, 退下来后也没怎么用过,</description>
</item>
<item>
<title>正定私募实习申请小记</title>
<link>https://rqdmap.top/posts/%E6%AD%A3%E5%AE%9A%E7%A7%81%E5%8B%9F%E5%AE%9E%E4%B9%A0/</link>
<pubDate>Thu, 07 Sep 2023 16:15:32 +0800</pubDate>
<guid>https://rqdmap.top/posts/%E6%AD%A3%E5%AE%9A%E7%A7%81%E5%8B%9F%E5%AE%9E%E4%B9%A0/</guid>
<description>&lt;p&gt;看到个家做低延迟交易系统的私募公司, 感觉方向蛮不错的, 实习薪资也好高, 就试着投了看看&amp;hellip; 简单记录一些该方向的过程与经历.&lt;/p&gt;</description>
</item>
<item>
<title>Rust项目结构与测试</title>
<link>https://rqdmap.top/posts/rust%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E6%B5%8B%E8%AF%95/</link>
<pubDate>Wed, 06 Sep 2023 16:05:50 +0800</pubDate>
<guid>https://rqdmap.top/posts/rust%E9%A1%B9%E7%9B%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E6%B5%8B%E8%AF%95/</guid>
<description>由于rqdmap/rust-in-competitive-programming项目冉冉升起, 希望对代码更加有条理地进行维护和组织, 因而学习一下cargo中有关项目, 包, 模块, 以及测试的一些内容, 做一个简单够用的知识学习与整理. 实际上是项目代码写了不少了, 整体结构也划分好了, 再来</description>
</item>
<item>
<title>不安全Rust: unsafe编程</title>
<link>https://rqdmap.top/posts/rust-unsafe/</link>
<pubDate>Tue, 22 Aug 2023 21:01:26 +0800</pubDate>
<guid>https://rqdmap.top/posts/rust-unsafe/</guid>
<description>在rCore-OS: 批处理系统 - rqdmap | blog初次见到了unsafe的相关代码, 当时并未系统学习, 只是草草了解, 这里补上相关的内容知识. Rust编译器提供了强大的编译期安全保障, 不过其仍然为我们提供了unsafe关键字, 供我们写一些 &amp;ldquo;不安全的&amp;rdquo; Rust黑魔法</description>
</item>
<item>
<title>Rust中的智能指针</title>
<link>https://rqdmap.top/posts/rust%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</link>
<pubDate>Tue, 01 Aug 2023 16:56:40 +0800</pubDate>
<guid>https://rqdmap.top/posts/rust%E6%99%BA%E8%83%BD%E6%8C%87%E9%92%88/</guid>
<description>通常说来, 指针是一个包含了内存地址的变量, 而内存地址引用/指向了另外的数据. 在Rust中, 最常见的指针类型是引用, 其借用其他的变量的值, 除了指向某个值以外就没有其他的功能了. 没有性能损耗, 是Rust中使用最多的指针. Rust中的智能指针则相比于一般指针更加复杂, 其中包含诸如长度、</description>
</item>
<item>
<title>rCore-OS: 批处理系统</title>
<link>https://rqdmap.top/posts/rcore2/</link>
<pubDate>Wed, 26 Jul 2023 19:29:04 +0800</pubDate>
<guid>https://rqdmap.top/posts/rcore2/</guid>
<description>系列文章 rCore操作系统实践 - rqdmap | blog 本章主要目的为设计和实现支持批处理操作的OS, 其相比于上一节的库OS而言, 主要的不同在于: OS自身运行在内核态; 支持其他应用运行在用户态并发出系统调用 一个接一个的运行不同的应用程序 为了实现这些目的, 本章节需要做的事情分为: 调整应用程序, 使其能</description>
</item>
<item>
<title>rCore-OS: 基本执行环境</title>
<link>https://rqdmap.top/posts/rcore1/</link>
<pubDate>Mon, 24 Jul 2023 19:30:54 +0800</pubDate>
<guid>https://rqdmap.top/posts/rcore1/</guid>
<description>系列文章 rCore操作系统实践 - rqdmap | blog 本章主要是讲解如何设计和实现建立在裸机上的执行环境, 并让应用程序能够在这样的执行环境中运行. 导言中说: 大多数程序员的第一行代码都从 Hello, world! 开始，当我们满怀着好奇心在编辑器内键入仅仅数个字节，再经过几行命令编译（靠的是编译器）、运行（靠的是操作系统</description>
</item>
<item>
<title>rCore操作系统实践</title>
<link>https://rqdmap.top/posts/rcore/</link>
<pubDate>Sun, 23 Jul 2023 20:38:23 +0800</pubDate>
<guid>https://rqdmap.top/posts/rcore/</guid>
<description>系列文章 rCore-OS: 基本执行环境 - rqdmap | blog rCore-OS: 批处理系统 - rqdmap | blog 在寻找Rust实践性的学习材料的过程中发现了rCore-OS项目, 其基于RISC-V架构实现一个用Rust写的操作系统; 教程看上去也不错, 十分的详实且成体系: rCore-Tutorial-Book-v3 3.6.0-alpha.1 文档 因而准备照着教程学习一下rcore-os, 并企图在过程中对Rus</description>
</item>
<item>
<title>网页字体精简方案</title>
<link>https://rqdmap.top/posts/%E7%BD%91%E9%A1%B5%E5%AD%97%E4%BD%93%E4%BC%98%E5%8C%96/</link>
<pubDate>Fri, 21 Jul 2023 02:13:05 +0800</pubDate>
<guid>https://rqdmap.top/posts/%E7%BD%91%E9%A1%B5%E5%AD%97%E4%BD%93%E4%BC%98%E5%8C%96/</guid>
<description>这是一个令人兴奋的想法! 其目的在于按需精简字体库, 以使得网页在保证显示效果的同时减少需要传输的数据量. 我个人使用的字体为思源黑的CJK+Iosevka的西文, 为了实现强制爱(x), 之前对于博客字体的处理方式都是用css指定本地的字体文件, 手动压一份woff2的Iosevka和思源</description>
</item>
<item>
<title>SUID与程序执行</title>
<link>https://rqdmap.top/posts/suid/</link>
<pubDate>Fri, 14 Jul 2023 15:08:34 +0800</pubDate>
<guid>https://rqdmap.top/posts/suid/</guid>
<description>在之前的博客ArchLinux调优: 显卡、声卡与电源 - rqdmap | blog中说明了如何使用开源的nvidia驱动并且关闭nvidia的供电来使得笔记本续航能力的提升. 通常来说我们不希望每次开机后都要手动向bbswitch写off字符串, 因而一般委以重任给dm; 不过像ly这样的纯终端dm貌</description>
</item>
<item>
<title>软件所实习体会与总结</title>
<link>https://rqdmap.top/posts/%E8%BD%AF%E4%BB%B6%E6%89%80%E5%AE%9E%E4%B9%A0/</link>
<pubDate>Fri, 07 Jul 2023 22:24:10 +0800</pubDate>
<guid>https://rqdmap.top/posts/%E8%BD%AF%E4%BB%B6%E6%89%80%E5%AE%9E%E4%B9%A0/</guid>
<description>眨眼间就在软件所搞了4个月不到点的科研实习, 今天汇报完最后一个项目, 彻底run了, 浅浅记录一些心得体会.. 实习本身任务不算重, 线上实习, 无严格的考勤, 每周3-4天, 期间总共做了三个研究项目: Kernel Mode Linux: 基于QEMU搭建内核调试环境 KML: 启用Kernel Model Linux KML: 实现机制研究 Sched_ext 拓展调度技术 sch</description>
</item>
<item>
<title>有关博客与笔记的思考</title>
<link>https://rqdmap.top/posts/thought_of_notes/</link>
<pubDate>Fri, 07 Jul 2023 11:09:29 +0800</pubDate>
<guid>https://rqdmap.top/posts/thought_of_notes/</guid>
<description>这是一些有关于博客内容的思考, 事实上在之前就有过一些想法, 曾经在about的Todo列表中写过: 增添弃坑等标签, 允许保留与查看这些博客, 但不在主页渲染 当时就意识到了目前百余篇博客中可能一大部分都是一些思想的碎屑, 或者是一些草稿纸上的笔记, 真正让人满意的、好的技术博客可能寥寥. 翻看</description>
</item>
<item>
<title>Bluespec与CPU(MIT6.375)</title>
<link>https://rqdmap.top/posts/bluespec-and-cpus/</link>
<pubDate>Sun, 25 Jun 2023 20:43:50 +0800</pubDate>
<guid>https://rqdmap.top/posts/bluespec-and-cpus/</guid>
<description>BUAA 6系高等机组实验作业, 使用bluespec工具链编程, 实现一个{,非}流水的右移器以及一个精简MIPS指令集CPU的一微小的部分. 课程疑似参考6.375 Complex Digital Systems - Spring 2006; 因为PPT的风格是一模一样的, 但是课程年份与内容应该可能有所出入, 不进行一个几乎是20年前课程的考据了. 环境搭建 实</description>
</item>
<item>
<title>Linux内核中的Rust使用</title>
<link>https://rqdmap.top/posts/linux%E5%86%85%E6%A0%B8%E4%B8%AD%E7%9A%84rust%E4%BD%BF%E7%94%A8/</link>
<pubDate>Mon, 05 Jun 2023 16:09:12 +0800</pubDate>
<guid>https://rqdmap.top/posts/linux%E5%86%85%E6%A0%B8%E4%B8%AD%E7%9A%84rust%E4%BD%BF%E7%94%A8/</guid>
<description>&lt;p&gt;内核代码选用Linux-6.3.4, 对其中有关Rust代码进行简单的分析.&lt;/p&gt;</description>
</item>
<item>
<title>ArchLinux: 蓝牙支持</title>
<link>https://rqdmap.top/posts/archlinux-bluetooth/</link>
<pubDate>Thu, 25 May 2023 02:09:43 +0800</pubDate>
<guid>https://rqdmap.top/posts/archlinux-bluetooth/</guid>
<description>由于有线版本只要1k, 带有蓝牙的双模则要2k5.. 不过由于蓝牙无线确实是十分的方便, 因而还需要测试一下本机的蓝牙模块. 主要参考&amp;lt;Bluetooth - ArchWiki&amp;gt;即可. 本机是Dell G5520 Nvidia, 可以修改ArchWiki对应的部分了:) Laptop/Dell - ArchWiki 安装几个相关的包: bluez: 蓝牙协议栈 bluez-utils:</description>
</item>
<item>
<title>NixOS: 选择与放弃</title>
<link>https://rqdmap.top/posts/nixos/</link>
<pubDate>Wed, 24 May 2023 17:50:09 +0800</pubDate>
<guid>https://rqdmap.top/posts/nixos/</guid>
<description>偶然听说了NixOS, 其万物皆配置文件的理念深深地吸引了我. 由于Arch下的pacman对于系统的监控总是不够地完全, 完全可能出现安装的某个包被卸载后一些配置/数据文件遗留在本机(经过测试, pacman -Rsun并不行, 后续考虑结合pacman -Ql写一些钩子函数), 或者是我修改了若干位于</description>
</item>
<item>
<title>华为终端BG申请小记</title>
<link>https://rqdmap.top/posts/huawei%E5%AE%9E%E4%B9%A0%E7%94%B3%E8%AF%B7/</link>
<pubDate>Wed, 26 Apr 2023 21:00:08 +0800</pubDate>
<guid>https://rqdmap.top/posts/huawei%E5%AE%9E%E4%B9%A0%E7%94%B3%E8%AF%B7/</guid>
<description>&lt;p&gt;&lt;b&gt;&lt;font color="red"&gt; 由于相关规定, 以下内容不应得到公开传播, 因而设置访问密码, 用作个人记录! &lt;/font&gt;&lt;/b&gt;&lt;/p&gt;</description>
</item>
<item>
<title>Neovim插件管理与配置</title>
<link>https://rqdmap.top/posts/nvim-config/</link>
<pubDate>Mon, 24 Apr 2023 16:40:28 +0800</pubDate>
<guid>https://rqdmap.top/posts/nvim-config/</guid>
<description>为Nvim添加了nvim-cmp插件栈&amp;hellip; 之前一直没有动手, 只单独安装了几个无复杂依赖的插件, 这次直接一口气从nvim-cmp补全插件, LSP相关, 代码块补全, 模糊查找等全部搞好了.. 其实际上高度耦合&amp;hellip; 代码块补全以及LSP最终必须全部集成到nvim-cm</description>
</item>
<item>
<title>ArchLinux调优: 显卡、声卡与电源</title>
<link>https://rqdmap.top/posts/archlinux%E8%B0%83%E4%BC%98/</link>
<pubDate>Sun, 23 Apr 2023 01:29:36 +0800</pubDate>
<guid>https://rqdmap.top/posts/archlinux%E8%B0%83%E4%BC%98/</guid>
<description>记录一些最近针对本机硬件设备驱动相关的调整与优化(?反向优化), 主要涉及到Nvidia独立显卡, Intel声卡以及电源管理等几个部分. 电源管理 在使用Windows时基本上是稳定1.5-2h左右, 去年刚配置好我的bspwm桌面系统后却能使用到4h&amp;hellip; 结果目前Linux的</description>
</item>
<item>
<title>阿里云C/C++研发实习申请小记</title>
<link>https://rqdmap.top/posts/aliyun%E5%AE%9E%E4%B9%A0/</link>
<pubDate>Sun, 16 Apr 2023 20:43:06 +0800</pubDate>
<guid>https://rqdmap.top/posts/aliyun%E5%AE%9E%E4%B9%A0/</guid>
<description>&lt;p&gt;找实习的时候有看了看阿里云的校招网站, 但是其实没有发现在哪里投递.. 最后其实根本就没有投递阿里云的岗位&lt;/p&gt;
&lt;p&gt;但是某一天忽然接到阿里云的人给我打电话&amp;hellip; 太神秘了, 要么是在BOOS第三方平台看到了, 要么是阿里云校招网站点击就会被记录?.. (但我也没登陆啊)&lt;/p&gt;
&lt;p&gt;下面就简单记录一下面试/机试的一些过程.&lt;/p&gt;
&lt;p&gt;&lt;b&gt;&lt;font color="red"&gt; 由于相关规定, 以下内容不应得到公开传播, 因而设置访问密码, 用作个人记录! &lt;/font&gt;&lt;/b&gt;&lt;/p&gt;</description>
</item>
<item>
<title>sched_ext机制研究</title>
<link>https://rqdmap.top/posts/scx/</link>
<pubDate>Sun, 09 Apr 2023 19:41:48 +0800</pubDate>
<guid>https://rqdmap.top/posts/scx/</guid>
<description>Slide 充斥着大量的谬误与个人的随意理解: sched_ext机制研究 简介 &amp;lt;The extensible scheduler class [LWN.net]&amp;gt; BPF背后的核心思想是, 它允许程序在运行时从用户空间加载到内核中; 与现在的Linux系统相比, 使用BPF进行调度有可能实现明显不同的调度行为. 那么, 为什么现在要提出BPF机制呢? 为了期待一场长时间的讨论,</description>
</item>
<item>
<title>Logisim开发单周期MIPS处理器</title>
<link>https://rqdmap.top/posts/logisim%E5%BC%80%E5%8F%91%E5%8D%95%E5%91%A8%E6%9C%9Fmips%E5%A4%84%E7%90%86%E5%99%A8/</link>
<pubDate>Thu, 06 Apr 2023 18:20:09 +0800</pubDate>
<guid>https://rqdmap.top/posts/logisim%E5%BC%80%E5%8F%91%E5%8D%95%E5%91%A8%E6%9C%9Fmips%E5%A4%84%E7%90%86%E5%99%A8/</guid>
<description>作为计组第一次实验的报告模板进行整理, 内容为使用Logisim开发单周期MIPS处理器, 支持的指令集仅有: addu, subu, ori, lw, wsw, beq, lui这7条, 其中addu以及subu不必要实现溢出. 实验环境 &amp;lt;Logisim-Ita/Logisim: Logisim Italian Fork&amp;gt; 对Linux的支持还算可以, 因而直接在Linux上进行实验即可. 总体设计 下图展示了该单周期处</description>
</item>
<item>
<title>Linux下修改文件的4个时间</title>
<link>https://rqdmap.top/posts/linux%E4%B8%8B%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E7%9A%844%E4%B8%AA%E6%97%B6%E9%97%B4/</link>
<pubDate>Fri, 24 Mar 2023 13:43:36 +0800</pubDate>
<guid>https://rqdmap.top/posts/linux%E4%B8%8B%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E7%9A%844%E4%B8%AA%E6%97%B6%E9%97%B4/</guid>
<description>由于一些原因&amp;hellip; 接触到了如何修改Linux(/windows)下文件4个时间的方式. 修改时间 修改Access time 与 Modify time: 1touch -a &amp;lt;file&amp;gt; -d &amp;#39;2000-01-01 08:15:23&amp;#39; 2touch -m &amp;lt;file&amp;gt; -d &amp;#39;2000-01-01 08:15:23&amp;#39; 而Change time与Birth time貌似是与fs相绑定的, 比如在Linux的ext4下打包一个zip, 传送至windows</description>
</item>
<item>
<title>clash+systemd自启动问题</title>
<link>https://rqdmap.top/posts/clash%E8%87%AA%E5%90%AF%E5%8A%A8%E9%97%AE%E9%A2%98/</link>
<pubDate>Fri, 24 Mar 2023 13:43:18 +0800</pubDate>
<guid>https://rqdmap.top/posts/clash%E8%87%AA%E5%90%AF%E5%8A%A8%E9%97%AE%E9%A2%98/</guid>
<description>通常来说, 参考网上最常见的guide来配置systemd + clash 没有问题: &amp;lt;Running Clash as a service · Dreamacro/clash Wiki&amp;gt; 1[Unit] 2Description=Clash daemon, A rule-based proxy in Go. 3After=network.target 4 5[Service] 6Type=simple 7Restart=always 8ExecStart=/usr/local/bin/clash -d /etc/clash 9 10[Install] 11WantedBy=multi-user.target 问题排查 但是在我的配置中(优先走的是url-test策略组)会出现一些问题: 开机自启后, 大概率会出现完全无法走proxy的情况, 而且该问题近期才出现, 因而并</description>
</item>
<item>
<title>KML: 实现机制研究</title>
<link>https://rqdmap.top/posts/kml%E6%9C%BA%E5%88%B6%E7%A0%94%E7%A9%B6/</link>
<pubDate>Thu, 16 Mar 2023 21:11:00 +0800</pubDate>
<guid>https://rqdmap.top/posts/kml%E6%9C%BA%E5%88%B6%E7%A0%94%E7%A9%B6/</guid>
<description>本文将参考作者给出的guide, 深入研究IA-32下KML机制的工作原理以及相关技术. 有关于KML技术的使用可以参考:&amp;lt;启用Kernel Model Linux - rqdmap | blog&amp;gt; 工作原理 To execute user programs in kernel mode, Kernel Mode Linux has a special start_thread (start_kernel_thread) routine, which is called in processing execve(2) and sets registers of a user process to specified initial values. The original start_thread routine sets CS segment register to __USER_CS. The start_kernel_thread routine sets the CS register to __KERNEL_CS. Thus, a user program is started as</description>
</item>
<item>
<title>duu: 按照大小排序的du指令</title>
<link>https://rqdmap.top/posts/duu/</link>
<pubDate>Mon, 13 Mar 2023 12:12:45 +0800</pubDate>
<guid>https://rqdmap.top/posts/duu/</guid>
<description>正确的办法! du -d 1 -h | sort -hr duu du 指令无法以可读的形式按照大小排序, du -d 1 -h | sort -nr并不正确, 因而写一个简单的脚本进行实现. 1use std::env; 2 3fn main() { 4 let args: Vec&amp;lt;String&amp;gt; = env::args().collect(); 5 assert!(args.len() &amp;gt;= 2); 6 7 if args[1].len() &amp;gt; 18 { 8 println!(&amp;#34;Number too large&amp;#34;); 9 return; 10 } 11 12 for c in args[1].chars() { 13 if !c.is_digit(10) { 14 println!(&amp;#34;Invalid number&amp;#34;); 15 return; 16 } 17 } 18 19 let nr_bytes = args[1].parse::&amp;lt;u64&amp;gt;().unwrap(); 20 /* KB -&amp;gt; MB -&amp;gt; GB */ 21 22 let mut level: usize = 0; 23 let mut tmp = nr_bytes;</description>
</item>
<item>
<title>Acme.sh+ZeroSSL证书部署</title>
<link>https://rqdmap.top/posts/nginx+zerossl%E8%AF%81%E4%B9%A6%E9%83%A8%E7%BD%B2/</link>
<pubDate>Fri, 10 Mar 2023 13:20:21 +0800</pubDate>
<guid>https://rqdmap.top/posts/nginx+zerossl%E8%AF%81%E4%B9%A6%E9%83%A8%E7%BD%B2/</guid>
<description>之前一直沿用的最老的服务器的ssl证书提供商FreeSSL首页 - FreeSSL.cn一个提供免费HTTPS证书申请的网站, 前阵子发现不知道怎么不太行了, 偶尔会出现证书不被信任的情况, 过一段时间可能会自己恢复&amp;hellip; 不过去官网查了下发现自己的账号下居然好像又没有这份证书&amp;h</description>
</item>
<item>
<title>KML: 启用Kernel Model Linux</title>
<link>https://rqdmap.top/posts/kml/</link>
<pubDate>Wed, 08 Mar 2023 10:58:52 +0800</pubDate>
<guid>https://rqdmap.top/posts/kml/</guid>
<description>KML简介 Kernel Mode Linux: Execute user processes in kernel mode 是一种允许用户程序运行于内核态的技术. 处于内核态的程序可以直接访问任意的内核空间, 无需再使用软中断和上下文切换等手段进行系统调用. 此外, 这些程序也会正常的参与分页和调度, 这样哪怕这些程序死循环, 整个系统也不会因此卡死. 如何使用KML? 编译了打好补丁的内</description>
</item>
<item>
<title>基于QEMU搭建内核调试环境</title>
<link>https://rqdmap.top/posts/%E5%9F%BA%E4%BA%8Eqemu%E6%90%AD%E5%BB%BA%E5%86%85%E6%A0%B8%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83/</link>
<pubDate>Mon, 06 Mar 2023 14:58:27 +0800</pubDate>
<guid>https://rqdmap.top/posts/%E5%9F%BA%E4%BA%8Eqemu%E6%90%AD%E5%BB%BA%E5%86%85%E6%A0%B8%E8%B0%83%E8%AF%95%E7%8E%AF%E5%A2%83/</guid>
<description>搞一份内核源码, 并尝试调试一个拓展内核功能的补丁Kernel-Mode-Linux; 对于该模块的调试与分析见后续博文&amp;lt;启用Kernel Model Linux&amp;gt; Linux内核编译 这里使用的是Linux4.4.12(4.0.*, 3.1*, 2.6.*系列也有尝试过), 并且还需要打上PREEMPT_RT实时内</description>
</item>
<item>
<title>Rust-泛型与特征</title>
<link>https://rqdmap.top/posts/rust-%E6%B3%9B%E5%9E%8B%E4%B8%8E%E7%89%B9%E5%BE%81/</link>
<pubDate>Wed, 22 Feb 2023 15:31:34 +0800</pubDate>
<guid>https://rqdmap.top/posts/rust-%E6%B3%9B%E5%9E%8B%E4%B8%8E%E7%89%B9%E5%BE%81/</guid>
<description>Rust的泛型(Generics)和特征(Trait)看的一个头两个大&amp;hellip; 需要仔细学习整理一下, rust_course的标题分类感觉有点confusing&amp;hellip; 泛型 如何使用泛型? 泛型函数: 1fn largest&amp;lt;T&amp;gt;(list: &amp;amp;[T]) -&amp;gt; T{ 2 .. 3} 泛型结构体: 1struct Point&amp;lt;T&amp;gt; { 2 x: T, 3 y: T, 4} 5 6fn main() { 7 let integer = Point { x:</description>
</item>
<item>
<title>Windows10+ArchLinux重安装</title>
<link>https://rqdmap.top/posts/windows+archlinux%E9%87%8D%E5%AE%89%E8%A3%85/</link>
<pubDate>Sat, 18 Feb 2023 23:26:27 +0800</pubDate>
<guid>https://rqdmap.top/posts/windows+archlinux%E9%87%8D%E5%AE%89%E8%A3%85/</guid>
<description>系列文章 原始问题: win11下第一次启动chrome卡死 - rqdmap | blog 昨天礼拜五, 晚上带了电脑回来准备鸭子杀, 刚开机就有不详的感觉, 哪有名字叫self-signed的证书 自己认证自己&amp;hellip; 更加让人觉得是中毒了&amp;hellip; 不过好像其实是和clash有关.. 不管了, 因为这就是</description>
</item>
<item>
<title>ArchLinux上安装zathura-develop</title>
<link>https://rqdmap.top/posts/archlinux%E4%B8%8A%E6%BA%90%E7%A0%81%E5%8C%85%E5%AE%89%E8%A3%85zathura/</link>
<pubDate>Mon, 13 Feb 2023 01:35:47 +0800</pubDate>
<guid>https://rqdmap.top/posts/archlinux%E4%B8%8A%E6%BA%90%E7%A0%81%E5%8C%85%E5%AE%89%E8%A3%85zathura/</guid>
<description>起因是因为Zathura作为一款我很喜欢的使用键盘移动的PDF阅读器, 居然拥有如此糟糕的划词功能(Text Select), 其划词功能通过一个方框框选出一片区域, Zathura自动提取出其中的文本, 并自动复制到剪贴板, 看上去很美好但是存在两个问题: 选区粒度粗, 不能做到精准到某个字符 划词不准确, 有</description>
</item>
<item>
<title>网络实验复杂组网</title>
<link>https://rqdmap.top/posts/%E5%A4%8D%E6%9D%82%E7%BB%84%E7%BD%91/</link>
<pubDate>Sat, 14 Jan 2023 00:51:29 +0800</pubDate>
<guid>https://rqdmap.top/posts/%E5%A4%8D%E6%9D%82%E7%BB%84%E7%BD%91/</guid>
<description>实验内容 本实验将模拟一个全国范围的银行主干网络, 采用总行数据中心、省行和地市行的三级架构，业务接入基于MPLS VPN体系结构进行部署。充分考虑网络的安全性和可靠性规划网络拓扑结构，根据业务接入需求统一规划VPN、IP地址和子网，采用设备备份、链路备份、路由备份等技术保证网络的可靠</description>
</item>
<item>
<title>网络实验MPLS/VPN</title>
<link>https://rqdmap.top/posts/mpls-vpn/</link>
<pubDate>Sun, 08 Jan 2023 23:55:43 +0800</pubDate>
<guid>https://rqdmap.top/posts/mpls-vpn/</guid>
<description>偷懒偷的都是自己的懒&amp;hellip; 虽然考完试了, 但是之前没有整理MPLS/VPN的内容, 确实对这块不敢说是很清楚&amp;hellip; 在此之前 曾经尝试了更新系统来修复打开chrome/任务管理器卡死的问题, 当时就提示说此次更新与vmware冲突, 需要卸载vmware&amp;hellip; 事</description>
</item>
<item>
<title>win11下第一次启动chrome卡死</title>
<link>https://rqdmap.top/posts/windows-chrome/</link>
<pubDate>Sun, 08 Jan 2023 22:20:12 +0800</pubDate>
<guid>https://rqdmap.top/posts/windows-chrome/</guid>
<description>系列文章 系统重装: Windows10+ArchLinux重安装 - rqdmap | blog 很魔幻的问题以及最后的解决办法&amp;hellip; TL; DR 问题描述: 机器为 Dell G5520, 自行更换过西数 2T 黑盘, 使用一段时间后出现第一次打开应用时(Chrome最为明显)整个系统直接卡死的问题, 有时等待5分钟左右可以自行恢复正常,</description>
</item>
<item>
<title>trash:取代危险的rm</title>
<link>https://rqdmap.top/posts/trash%E5%8F%96%E4%BB%A3%E5%8D%B1%E9%99%A9%E7%9A%84rm/</link>
<pubDate>Sun, 01 Jan 2023 13:23:27 +0800</pubDate>
<guid>https://rqdmap.top/posts/trash%E5%8F%96%E4%BB%A3%E5%8D%B1%E9%99%A9%E7%9A%84rm/</guid>
<description>rm 指令十分的危险&amp;hellip; 为此希望实现一个回收站. archwiki给出了一些可用的建议Trash management, 用下来体验不好, 打算自己搞一个. 第一版的trash自己解析了输入的参数.. 然后加上unix时间戳后mv到一个指定的公共磁盘分区上(因而其实性能也不太好, 尤其是大文件的删除时),</description>
</item>
<item>
<title>Linux文件权限</title>
<link>https://rqdmap.top/posts/linux%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90/</link>
<pubDate>Sun, 01 Jan 2023 12:48:34 +0800</pubDate>
<guid>https://rqdmap.top/posts/linux%E6%96%87%E4%BB%B6%E6%9D%83%E9%99%90/</guid>
<description>&lt;p&gt;其实对于Linux的文件权限一直一知半解, 之前使用php尝试访问sqlite的时候就发生了文件权限的惨案, 至今也不知道为什么会这样.. 当时的情况是, 将博客的public文件夹放置在服务器的&lt;code&gt;/usr/share/nginx/html&lt;/code&gt;下就会G, 哪怕对数据库文件+该文件所在的目录都设置了777权限后php还是无法访问该目录下的sqlite DB; 修改放置位置到&lt;code&gt;/srv/http/&lt;/code&gt;下就可以了, 而且不需要设置777, 设置为755即可.. 但是其实之前也考虑到文件权限等等, 因而将nginx和php-fpm的用户全部设置为了rqdmap, 而public文件的用户和组也全部都是rqdmap&amp;hellip; 为何放到&lt;code&gt;/srv&lt;/code&gt;下就可以了呢&amp;hellip; 疑案未决&amp;hellip;&lt;/p&gt;
&lt;p&gt;因而准备稍微系统看一下Linux的文件权限管理.&lt;/p&gt;</description>
</item>
<item>
<title>实现Hit Counter访客统计</title>
<link>https://rqdmap.top/posts/hit-counter/</link>
<pubDate>Mon, 19 Dec 2022 14:43:40 +0800</pubDate>
<guid>https://rqdmap.top/posts/hit-counter/</guid>
<description>&lt;p&gt;找了下网络上的但是不是很满意&amp;hellip; 所以打算自己通过前后端实现一下Hit Counter来进行访客统计. 后端总体通过nginx + php-fpm + sqlite实现.&lt;/p&gt;</description>
</item>
<item>
<title>网络实验(MPLS基础与考试)</title>
<link>https://rqdmap.top/posts/%E7%BD%91%E7%BB%9C%E5%AE%9E%E9%AA%8C%E4%B8%8B/</link>
<pubDate>Mon, 19 Dec 2022 12:20:09 +0800</pubDate>
<guid>https://rqdmap.top/posts/%E7%BD%91%E7%BB%9C%E5%AE%9E%E9%AA%8C%E4%B8%8B/</guid>
<description>&lt;p&gt;将所有的图片放在一个Markdown中太傻逼了, 超过了200张图片, 因而本篇博客再单独记录MPLS与网管的相关内容, 同时努力不再采用图片格式, 而是用Plain Text展示相关实验内容.&lt;/p&gt;
&lt;p&gt;不过比较怠惰, MPLS VPN只是结合着教材上做了一下实验, 没有进行记录; 网管则是觉得过于傻逼, 加上ensp也没有网管软件, 很多报文都没法复现, 直接跳过不管.&lt;/p&gt;</description>
</item>
<item>
<title>vim使用技巧</title>
<link>https://rqdmap.top/posts/vim%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</link>
<pubDate>Mon, 12 Dec 2022 23:34:58 +0800</pubDate>
<guid>https://rqdmap.top/posts/vim%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</guid>
<description>不知道怎么就放弃了VSC&amp;hellip; 极为朴素的用了3个月Vim&amp;hellip; 最近越发觉得不能够得心应手的进行编辑了, 因而感觉是时候系统地再精进一下Vim了 首先记一下VSC的一些问题&amp;hellip; 完全的OSS版本中, 许多插件都没有上线, 这样的VSC几乎无法使用了, 或许有什么</description>
</item>
<item>
<title>trojan+nginx共用443端口</title>
<link>https://rqdmap.top/posts/trojan+nginx%E5%85%B1%E7%94%A8443%E7%AB%AF%E5%8F%A3/</link>
<pubDate>Thu, 08 Dec 2022 19:41:35 +0800</pubDate>
<guid>https://rqdmap.top/posts/trojan+nginx%E5%85%B1%E7%94%A8443%E7%AB%AF%E5%8F%A3/</guid>
<description>&lt;p&gt;当远端服务器的443与80端口已经运行着Http Server后, 如何复用端口以允许trojan同样监听443呢?&lt;/p&gt;</description>
</item>
<item>
<title>Linux下为Chrome开启代理</title>
<link>https://rqdmap.top/posts/linux%E4%B8%8B%E4%B8%BAchrome%E5%BC%80%E5%90%AF%E4%BB%A3%E7%90%86/</link>
<pubDate>Wed, 07 Dec 2022 23:00:56 +0800</pubDate>
<guid>https://rqdmap.top/posts/linux%E4%B8%8B%E4%B8%BAchrome%E5%BC%80%E5%90%AF%E4%BB%A3%E7%90%86/</guid>
<description>由于没有使用集成的桌面环境, 因而chrome没法读取全局代理的信息, 每次更新AUR chrome后都需要手动修改&amp;hellip; 这里小小mark一下解决办法(或许今后可以做更加自动化的钩子什么的&amp;hellip; 再说) Rofi命令行启动的应该是桌面程序(?), 在这个地方:/usr/s</description>
</item>
<item>
<title>网络实验(OSPF,BGP与组播)</title>
<link>https://rqdmap.top/posts/%E7%BD%91%E7%BB%9C%E5%AE%9E%E9%AA%8C%E4%B8%8A/</link>
<pubDate>Sun, 27 Nov 2022 18:14:25 +0800</pubDate>
<guid>https://rqdmap.top/posts/%E7%BD%91%E7%BB%9C%E5%AE%9E%E9%AA%8C%E4%B8%8A/</guid>
<description>&lt;p&gt;本文章包含200张图片&amp;hellip; 请务必慎重打开该文章&amp;hellip;&lt;/p&gt;
&lt;p&gt;该博客主要为网络实验的全面复盘, 包括: OSPF, BGP, 组播, 网络管理与MPLS.&lt;/p&gt;
&lt;p&gt;参考了大量张力军老师的《计算机网络实验教程》, 通过ensp进行各项实验与分析.&lt;/p&gt;
&lt;p&gt;&lt;del&gt;后记, 本博客OSPF和组播的介绍比较系统比较好, 但是BGP不知道当时在整理的时候处于什么精神状态, 导致BGP的内容整理比较答辩&amp;hellip;&lt;/del&gt;&lt;/p&gt;</description>
</item>
<item>
<title>Stratovirt + Unikraft + Redis</title>
<link>https://rqdmap.top/posts/stratovirt/</link>
<pubDate>Sat, 19 Nov 2022 18:26:34 +0800</pubDate>
<guid>https://rqdmap.top/posts/stratovirt/</guid>
<description>尝试在stratovirt虚拟机上运行基于unikraft的redis, 并测试1G内存可以运行多少个实例, 但是行百里者半九十, 折腾了半天的网桥和DHCP, 又换了红帽, arch和debian系列的rootfs, 最终ubuntu总算把kraft成功build起来, 结果最后一步死活不行</description>
</item>
<item>
<title>ULK 中断与异常</title>
<link>https://rqdmap.top/posts/ulk-%E4%B8%AD%E6%96%AD%E4%B8%8E%E5%BC%82%E5%B8%B8/</link>
<pubDate>Sat, 03 Sep 2022 19:41:12 +0800</pubDate>
<guid>https://rqdmap.top/posts/ulk-%E4%B8%AD%E6%96%AD%E4%B8%8E%E5%BC%82%E5%B8%B8/</guid>
<description>中断被定义为一个事件, 该事件将改变处理的指令执行顺序. 中断分为同步中断和异步中断, 在Intel微处理器手册中, 它们分别被称为异常和中断. 中断是由定时器或IO设备产生的; 而异常是由程序的错误产生的, 或是由内核必须处理的异常条件(如缺页, 对内核服务的请求等)产生的, 前者内核通过发送信</description>
</item>
<item>
<title>ULK 内存管理</title>
<link>https://rqdmap.top/posts/ulk-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link>
<pubDate>Fri, 29 Jul 2022 19:50:44 +0800</pubDate>
<guid>https://rqdmap.top/posts/ulk-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</guid>
<description>页框管理 尽管奔腾处理器允许采取两种不同大小的页框:4KB和4MB(PAE被激活则是2MB),但是Linux采用4KB页框大小作为基本分配单元，基于两个原因: 由分页单元引发的缺页异常很容易得到解释:或者是页无权访问，或者是页不存在。在后一种情况下，内存分配器仅仅需要找到一个4KB空</description>
</item>
<item>
<title>6.828(2021)</title>
<link>https://rqdmap.top/posts/6.828-2021/</link>
<pubDate>Tue, 17 May 2022 19:56:46 +0800</pubDate>
<guid>https://rqdmap.top/posts/6.828-2021/</guid>
<description>代码存放于rqdmap/6.828-2021下的各个Branch中 Trap RISC-V的trap机制 在RISC-V中，使用ecall、发生exception和产生中断会使得CPU的控制流改变，转而去执行特殊任务以处理这些事件,这些事件被称为trap. 为了完成trap处理事件,RSIC-</description>
</item>
<item>
<title>Promela初探</title>
<link>https://rqdmap.top/posts/promela%E5%88%9D%E6%8E%A2/</link>
<pubDate>Mon, 29 Nov 2021 18:44:41 +0000</pubDate>
<guid>https://rqdmap.top/posts/promela%E5%88%9D%E6%8E%A2/</guid>
<description>由于要处理协议分析的大作业，接触了spin和Promela，下面整理一些内容作为记录。 基础语法 参考资料： Promela-维基百科 Promela-Manual 数据类型 内置的基础类型有：bit(u1), bool(u1), byte(u8), short(16), int(32)等， 这里前缀u表示无符号数。 声明一个变量可以类Ctypename name [ = anyexpr ]), 也可以使用这种</description>
</item>
<item>
<title>C内联汇编-AT&amp;T</title>
<link>https://rqdmap.top/posts/c%E5%86%85%E8%81%94%E6%B1%87%E7%BC%96/</link>
<pubDate>Wed, 13 Oct 2021 23:02:19 +0000</pubDate>
<guid>https://rqdmap.top/posts/c%E5%86%85%E8%81%94%E6%B1%87%E7%BC%96/</guid>
<description>GCC-Inline-Assembly-HOWTO GCC 汇编语法 GCC采用AT&amp;amp;T的汇编语法，这和intel汇编语法有一些不同： 操作数的顺序。intel语法通常是op dst src，在AT&amp;amp;T语法中则是op src dst 寄存器命名时需要加上%作为前缀 立即数的表示。AT&amp;amp;T立即数以$作为前缀，对于字符串常量而言也需要加上该前</description>
</item>
<item>
<title>ULK 进程</title>
<link>https://rqdmap.top/posts/ulk-%E8%BF%9B%E7%A8%8B/</link>
<pubDate>Mon, 04 Oct 2021 16:28:14 +0000</pubDate>
<guid>https://rqdmap.top/posts/ulk-%E8%BF%9B%E7%A8%8B/</guid>
<description>进程、轻量级进程和线程 进程是资源分配的实体，而线程是作业调度的基本单位。Linux使用轻量级进程来支持多线程应用程序，轻量级进程之间可以共享一部分资源，诸如地址空间、打开的文件等，通过将轻量级进程和线程关联起来就可以实现多线程应用程序。 进程描述符 进程描述符包含了与一个进程有关的所</description>
</item>
<item>
<title>ULK 内存寻址</title>
<link>https://rqdmap.top/posts/ulk-%E5%86%85%E5%AD%98%E5%AF%BB%E5%9D%80/</link>
<pubDate>Mon, 04 Oct 2021 16:28:08 +0000</pubDate>
<guid>https://rqdmap.top/posts/ulk-%E5%86%85%E5%AD%98%E5%AF%BB%E5%9D%80/</guid>
<description>绪论 绪论中从总体的框架介绍了一下操作系统、文件系统与Unix内核相关内容，不予过多赘述。 一个新学到的内容是可重入(内核，这意味着多个进程可以同时在内核下执行。这个特性太过于自然以至于让我一直没有注意到也没有在教材上见过，如果某个进程在内核态中被阻塞被挂起，那么它当然不应该影响到其</description>
</item>
<item>
<title>SEU夏令营回忆录_and_近况杂谈</title>
<link>https://rqdmap.top/posts/seu%E5%A4%8F%E4%BB%A4%E8%90%A5%E5%9B%9E%E5%BF%86%E5%BD%95-and-%E8%BF%91%E5%86%B5%E6%9D%82%E8%B0%88/</link>
<pubDate>Thu, 09 Sep 2021 22:58:25 +0000</pubDate>
<guid>https://rqdmap.top/posts/seu%E5%A4%8F%E4%BB%A4%E8%90%A5%E5%9B%9E%E5%BF%86%E5%BD%95-and-%E8%BF%91%E5%86%B5%E6%9D%82%E8%B0%88/</guid>
<description>&lt;p&gt;对一个月前的东南大学夏令营的回忆，并杂乱地记录一些近日杂谈..&lt;/p&gt;
&lt;h2 id="-1"&gt;-1&lt;/h2&gt;
&lt;p&gt;&lt;del&gt;现在电脑出了点问题都不知道是哪里爆炸了，有可能是挫比linux系统爆炸，有可能是挫比typora for linux兼容性不行，有可能是老键盘连接不稳定，还有可能自己误操作&amp;hellip;&amp;hellip;.为了正确写个mardown还重启了电脑&amp;hellip;&lt;/del&gt;&lt;/p&gt;
&lt;p&gt;更新博客一拖再拖&amp;hellip;当初面试完SEU后基本就彻底躺平，一直没有高兴记录博客；加上各种夏令营的具体情况理论上不得外传，显然不能发在部署在github的公开网页中，又想捣鼓有一下自定义theme的web前端后端技术，不过终归是无功而返&amp;hellip;中断的嵌套层数太多，让人彻底失去一项项补全的耐心了，也就一拖到底了&lt;del&gt;主要是打游戏躺平不香吗&lt;/del&gt;&lt;/p&gt;</description>
</item>
<item>
<title>iie夏令营记</title>
<link>https://rqdmap.top/posts/iie%E5%A4%8F%E4%BB%A4%E8%90%A5%E8%AE%B0/</link>
<pubDate>Sat, 31 Jul 2021 00:15:16 +0000</pubDate>
<guid>https://rqdmap.top/posts/iie%E5%A4%8F%E4%BB%A4%E8%90%A5%E8%AE%B0/</guid>
<description>&lt;p&gt;iie（伪）夏令营记&lt;/p&gt;</description>
</item>
<item>
<title>LinuxKernel</title>
<link>https://rqdmap.top/posts/linuxkernel/</link>
<pubDate>Sat, 17 Jul 2021 22:09:30 +0000</pubDate>
<guid>https://rqdmap.top/posts/linuxkernel/</guid>
<description>深入理解Linux内核学习笔记 前言 想要学习Linux内核的契机大抵源于读OS相关的paper时感到力不从心，就正好趁机学习一下素来感兴趣的内核知识。 写下“兴趣”二字后不禁想到日向晶也的论述，兴趣绝不能成为训练的动力，否则遇挫后兴趣消失也就自然放弃了训练；然而学习内核确实也没有什么</description>
</item>
<item>
<title>ECNU夏令营记</title>
<link>https://rqdmap.top/posts/ecnu%E5%A4%8F%E4%BB%A4%E8%90%A5%E8%AE%B0/</link>
<pubDate>Tue, 13 Jul 2021 23:35:04 +0000</pubDate>
<guid>https://rqdmap.top/posts/ecnu%E5%A4%8F%E4%BB%A4%E8%90%A5%E8%AE%B0/</guid>
<description>&lt;p&gt;华东师范大学计算机营游记&lt;/p&gt;</description>
</item>
<item>
<title>BMP-FS</title>
<link>https://rqdmap.top/posts/bmp-fs/</link>
<pubDate>Fri, 28 May 2021 20:14:56 +0000</pubDate>
<guid>https://rqdmap.top/posts/bmp-fs/</guid>
<description>BMP文件格式初探 实现BMP文件的放缩 搜索资料时找到，笑死。 此为课程设计的第四题,这道题体现了大作业的精髓:在抄中知道，在抄中学习，在抄中苟且。 BMP 文件结构 一般的情况如下所示，摘自wiki Structure name Optional Size Purpose Comments Bitmap file header No 14 bytes To store general information about the bitmap image file Not needed after the file is loaded in memory DIB header No Fixed-size (7 different versions exist) To store detailed information about the bitmap image and</description>
</item>
<item>
<title>qko-gym</title>
<link>https://rqdmap.top/acm/qko-gym/</link>
<pubDate>Fri, 02 Apr 2021 21:10:37 +0000</pubDate>
<guid>https://rqdmap.top/acm/qko-gym/</guid>
<description>Day1 hdu6643 因为例题不仅有点分治还涉及到了树上依赖背包的算法，才发现自己并不太会树形背包的若干优化算法，故学习。 树形背包 模板题 给出一颗依赖树，询问总重量限定下可能获得的最大价值。 物品的数量和重量的限制均不超过100 有不同的做法，复杂度也不同。 向上合并 随意采取$O(nm^2)$的算法即可在</description>
</item>
<item>
<title>arc-116</title>
<link>https://rqdmap.top/acm/arc-116/</link>
<pubDate>Sun, 28 Mar 2021 21:54:52 +0000</pubDate>
<guid>https://rqdmap.top/acm/arc-116/</guid>
<description>自以为A了一道精妙的DP题结果被第二道同样思想的DP卡死 D 总和给定下进行NIM必败态计数 给出n、m，表示总共有n堆可空石堆$ {a_i}$，要求满足$\sum a_i = m, \bigoplus a_i=0$，查询这样的序列的个数。 感觉上可以称之为非常经典的题目。 设置dp状态：dp[i]表示n堆石子和为i，异或</description>
</item>
<item>
<title>linux多线程</title>
<link>https://rqdmap.top/posts/linux%E5%A4%9A%E7%BA%BF%E7%A8%8B/</link>
<pubDate>Tue, 23 Mar 2021 12:45:36 +0000</pubDate>
<guid>https://rqdmap.top/posts/linux%E5%A4%9A%E7%BA%BF%E7%A8%8B/</guid>
<description>在linux下，Pthread是一套通用的线程库，由POSIX提出，具有较好的移植性。 使用头文件&amp;lt;pthread.h&amp;gt; 线程基本操作 线程的创建与退出 pthead_create 1int pthread_create(pthread_t *thread, pthread_attr_t * attr, void *(*start_routine)(void *), void *arg); 传入参数：thread为线程标识符，attr为线程属性设置，start_routine为线程函数起</description>
</item>
<item>
<title>Linux 下的 socket 编程</title>
<link>https://rqdmap.top/posts/socket/</link>
<pubDate>Tue, 23 Mar 2021 12:45:29 +0000</pubDate>
<guid>https://rqdmap.top/posts/socket/</guid>
<description>基础知识 socket常用函数 socket domain指定协议族，type指定socket类型，protocol指定协议（为0时自动选择type类型对应的默认协议） 1int socket(int domain, int type, int protocol); 返回值大于0成功；-1失败，错误类型保存在全局变量errno中。 bind 分配地址族中的特地地址给socket sockfd</description>
</item>
<item>
<title>edu-104-div2</title>
<link>https://rqdmap.top/acm/edu-104-div2/</link>
<pubDate>Tue, 16 Feb 2021 01:05:12 +0000</pubDate>
<guid>https://rqdmap.top/acm/edu-104-div2/</guid>
<description>被set爆锤的一场 如果自定义了比较符，那么应该要仔细的审查比较符的定义是否符合预期！特别是两个对象相等的情况！ 不然在进行set.erase()/set.insert()时会出现头de烂都看不出来的的bug</description>
</item>
<item>
<title>点分树</title>
<link>https://rqdmap.top/acm/%E7%82%B9%E5%88%86%E6%A0%91/</link>
<pubDate>Fri, 05 Feb 2021 18:27:17 +0000</pubDate>
<guid>https://rqdmap.top/acm/%E7%82%B9%E5%88%86%E6%A0%91/</guid>
<description>&lt;p&gt;&lt;strong&gt;&lt;a href="https://www.luogu.com.cn/problem/P6329"&gt;P6329 点分树模版 震波&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</description>
</item>
<item>
<title>cdq初步</title>
<link>https://rqdmap.top/acm/cdq%E5%88%9D%E6%AD%A5/</link>
<pubDate>Mon, 01 Feb 2021 18:16:42 +0000</pubDate>
<guid>https://rqdmap.top/acm/cdq%E5%88%9D%E6%AD%A5/</guid>
<description>&lt;p&gt;cdq分治 三维偏序问题&lt;/p&gt;</description>
</item>
<item>
<title>poj-1222</title>
<link>https://rqdmap.top/acm/poj-1222/</link>
<pubDate>Mon, 18 Jan 2021 21:56:04 +0000</pubDate>
<guid>https://rqdmap.top/acm/poj-1222/</guid>
<description>&lt;p&gt;给出一个5*6的01矩阵，每按一个格点就会将该格点及其4个方向上的格点（如果有的话）数值翻转，试给出一个方案使得最终所有格点均为0.&lt;/p&gt;</description>
</item>
<item>
<title>2020数据库实验</title>
<link>https://rqdmap.top/posts/2020%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C/</link>
<pubDate>Fri, 15 Jan 2021 23:04:14 +0000</pubDate>
<guid>https://rqdmap.top/posts/2020%E6%95%B0%E6%8D%AE%E5%BA%93%E5%AE%9E%E9%AA%8C/</guid>
<description>前端使用html，后台使用mysql数据库，使用php处理数据库，完成数据库课程的学籍管理系统大作业。 特此记录，有机会的话还是希望学习一番全栈的内容。 别的班好像做的都绘声绘色的，我们班验收者则寥寥，我太菜了 前台html服务 写的非常丑陋，很多冗余的代码，自己确实完全是个门外汉qaq</description>
</item>
<item>
<title>CF-edu102</title>
<link>https://rqdmap.top/acm/cf-edu102/</link>
<pubDate>Fri, 15 Jan 2021 20:03:50 +0000</pubDate>
<guid>https://rqdmap.top/acm/cf-edu102/</guid>
<description>&lt;p&gt;&lt;strong&gt;&lt;a href="https://codeforces.ml/contest/1473"&gt;Educational Codeforces Round 102 (Rated for Div. 2)&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</description>
</item>
<item>
<title>微信小程序</title>
<link>https://rqdmap.top/posts/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/</link>
<pubDate>Mon, 07 Dec 2020 23:44:05 +0000</pubDate>
<guid>https://rqdmap.top/posts/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/</guid>
<description>记一次微信小程序的搭建过程。 前端wxml+wxss+js，后端apache2+php+mysql 尽管为了完成微信小程序的基本功能只需要略知上述内容的皮毛即可，但是从零开始仍然是过程坎坷，花费了许多夜晚才略有成效；故特此记录。 后端apache服务器的配置 apache2 最初不知道从哪里安装了一个</description>
</item>
<item>
<title>2020-ccpc-weihai</title>
<link>https://rqdmap.top/acm/2020-ccpc-weihai/</link>
<pubDate>Sat, 21 Nov 2020 22:05:14 +0000</pubDate>
<guid>https://rqdmap.top/acm/2020-ccpc-weihai/</guid>
<description>G 线段树 区间修改、取模，区间哈希和查询 需要维护一个支持区间加1并对固定模数取模、区间哈希查询的线段树 开局就想写的一道题，写到最后艰难调出来后wa7，最终放弃上机辅助队友看别的题 晚上回去又调了很久，发现了几个错误 线段树哈希写错了，在求哈希和的时候不像普通的线段树区间和一样，查询哈希</description>
</item>
<item>
<title>opencup-gym102391</title>
<link>https://rqdmap.top/acm/opencup-gym102391/</link>
<pubDate>Wed, 11 Nov 2020 20:15:51 +0000</pubDate>
<guid>https://rqdmap.top/acm/opencup-gym102391/</guid>
<description>J RQD-IGVA树 树上DSU 最开始以为险段长度跟n无关，所以加了根[1, n]的线段进去就WA到死，后来改成[1, 1000000]即可。 大概是叫dsu on tree，可以处理一些与子树有关的询问，复杂度Onlogn 可惜IGVA不知道场上什么地方写挫了 场后10分钟A了 1const int maxn = 3e5 + 10; 2 3int</description>
</item>
<item>
<title>chanllage</title>
<link>https://rqdmap.top/acm/chanllage/</link>
<pubDate>Tue, 03 Nov 2020 22:21:00 +0000</pubDate>
<guid>https://rqdmap.top/acm/chanllage/</guid>
<description>有一些有趣但是大概需要高深数学知识的计算机问题悬而未决，特此记录。 张帆猜想 哈希冲突概率 有等式$(a_1^k+a_2^k+&amp;hellip;+a_n^k) % 2^{64}=(b_1^k+b_2^k+&amp;hellip;+b_n^k)% 2^{64}$， 定义“冲突“为：满足上述等式的两个多重集合{an}{bn}不完全相同。 希望说明：当n为1e5的级别时，k=2时</description>
</item>
<item>
<title>2020-ccpc-qinhuangdao</title>
<link>https://rqdmap.top/acm/2020-ccpc-qinhuangdao/</link>
<pubDate>Wed, 28 Oct 2020 19:23:04 +0000</pubDate>
<guid>https://rqdmap.top/acm/2020-ccpc-qinhuangdao/</guid>
<description>K 树dp 场上想了一个不太对的排序办法，真正的排序方法应该是将子树按照最深深度从低到高进行排序。然后随便维护一个dp数组表示从根节点派遣若干士兵遍历完i子树所需要的最小时间，每次尝试用子树的结果更新他们共同父节点的信息： 如果某节点是叶子，那么用其深度作为结果； 如果某节点不是叶子，将</description>
</item>
<item>
<title>2019-SWERC</title>
<link>https://rqdmap.top/acm/2019-swerc/</link>
<pubDate>Sat, 17 Oct 2020 00:09:31 +0000</pubDate>
<guid>https://rqdmap.top/acm/2019-swerc/</guid>
<description>参考博客： https://www.cnblogs.com/heyuhhh/p/12941654.html K 图上的路径存在问题(?) -&amp;gt;建反图进行染色 建反图，用rot的每个邻点去对整张图染色，被染色的点就意味着可以走到该颜色所代表的邻点。我们允许每个点最多被染色两次，这是因为rot的邻点一旦被超过一个点染色，那么就一定不合法；所以对图中每个点而言，如果其被染色次数大</description>
</item>
<item>
<title>2019-icpc-taipei</title>
<link>https://rqdmap.top/acm/2019-icpc-taipei/</link>
<pubDate>Sun, 04 Oct 2020 22:07:24 +0000</pubDate>
<guid>https://rqdmap.top/acm/2019-icpc-taipei/</guid>
<description>I 已知两数差，求所有可能的原本的序列 原序列长度小于等于62，序列值小于1000且两两不同。 如果已经还原出了原序列中的$i$个值，那么除去这i个值两两的差之后，差值集合中最大的数便可以基本确定下来：这个数一定是原序列中的某个数与a[1] = 0或者a[n]作差得到的，这点由“最大”保证</description>
</item>
<item>
<title>办公楼biu</title>
<link>https://rqdmap.top/acm/%E5%8A%9E%E5%85%AC%E6%A5%BCbiu/</link>
<pubDate>Fri, 04 Sep 2020 20:13:53 +0000</pubDate>
<guid>https://rqdmap.top/acm/%E5%8A%9E%E5%85%AC%E6%A5%BCbiu/</guid>
<description>给出一张图，求出其补图所有联通块的个数及其大小。 黑暗爆炸OJ 1098 容易想到$O(n^2)$的算法：对于每一个点，枚举所有邻点打上标记，然后找那些没有被打上标记的点，将这些点加入到一个联通块中。 如果使用链表，可以将复杂度优化到$O(n + m)$，非常的神奇。 本来是非常的神秘，后来qko学</description>
</item>
<item>
<title>24point</title>
<link>https://rqdmap.top/acm/24point/</link>
<pubDate>Wed, 02 Sep 2020 22:31:00 +0000</pubDate>
<guid>https://rqdmap.top/acm/24point/</guid>
<description>24点小游戏~ 1#include &amp;lt;iostream&amp;gt; 2 3#include &amp;lt;algorithm&amp;gt; 4#include &amp;lt;string&amp;gt; 5#include &amp;lt;vector&amp;gt; 6#include &amp;lt;stack&amp;gt; 7#include &amp;lt;queue&amp;gt; 8#include &amp;lt;set&amp;gt; 9#include &amp;lt;map&amp;gt; 10#include &amp;lt;unordered_map&amp;gt; 11#include &amp;lt;unordered_set&amp;gt; 12#include &amp;lt;random&amp;gt; 13#include &amp;lt;chrono&amp;gt; 14 15#include &amp;lt;cstdio&amp;gt; 16#include &amp;lt;cstring&amp;gt; 17#include &amp;lt;cmath&amp;gt; 18#include &amp;lt;ctime&amp;gt; 19#include &amp;lt;cstdlib&amp;gt; 20#include &amp;lt;cassert&amp;gt; 21 22#define itn int 23#define fro for 24#define scnaf scanf 25#define sacnf scanf 26#define manx maxn 27#define pritnf printf 28 29#define Fastin freopen(&amp;#34;in.txt&amp;#34;, &amp;#34;r&amp;#34;, stdin) 30#define Fastout freopen(&amp;#34;out.txt&amp;#34;, &amp;#34;w&amp;#34;, stdout) 31#define min(a, b) ((a) &amp;lt; (b)? (a): (b)) 32#define max(a, b) ((a) &amp;gt; (b)? (a): (b)) 33#define lowbit(x) ((x) &amp;amp; (-x)) 34#define ceil(n, p) (((n) +(p) - 1) / (p)) 35#define DBG(x) (void)(cout &amp;lt;&amp;lt; &amp;#34;L&amp;#34; &amp;lt;&amp;lt; __LINE__ &amp;lt;&amp;lt; &amp;#34;: &amp;#34; &amp;lt;&amp;lt; #x &amp;lt;&amp;lt; &amp;#34; = &amp;#34; &amp;lt;&amp;lt;( x) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;) 36#define clr(a, x) memset((a), x, sizeof (a)) 37#define TTT int __; scanf(&amp;#34;%d&amp;#34;, &amp;amp;__); while(__--) 38using</description>
</item>
<item>
<title>2019-XDU-onsite</title>
<link>https://rqdmap.top/acm/2019-xdu-onsite/</link>
<pubDate>Wed, 02 Sep 2020 20:10:45 +0000</pubDate>
<guid>https://rqdmap.top/acm/2019-xdu-onsite/</guid>
<description>1427 qko的宝可梦 （已补） 1428 qko的串 1429 qko的进化公式 1430 qko的树 1427 set对有序链的维护 set中每个节点拥有最小攻击力和最大攻击力，保证set中一定满足严格的偏序关系，即保证两个元素之间一定有某元素的最大值全部小于另一个元素的最小值。 初始将1号宝可梦插入到set中，然后遍历2-n</description>
</item>
<item>
<title>2020-牛客多校-10</title>
<link>https://rqdmap.top/acm/2020-%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1-10/</link>
<pubDate>Tue, 25 Aug 2020 15:38:23 +0000</pubDate>
<guid>https://rqdmap.top/acm/2020-%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1-10/</guid>
<description>C 思维 &amp;amp; 树 C* Namomo 2C 区间减1，代价为长度的平方，问将区间操作为全0的最小代价和最大代价。 1#include &amp;lt;iostream&amp;gt; 2 3#include &amp;lt;algorithm&amp;gt; 4#include &amp;lt;string&amp;gt; 5#include &amp;lt;vector&amp;gt; 6#include &amp;lt;stack&amp;gt; 7#include &amp;lt;queue&amp;gt; 8#include &amp;lt;set&amp;gt; 9#include &amp;lt;map&amp;gt; 10#include &amp;lt;unordered_map&amp;gt; 11#include &amp;lt;unordered_set&amp;gt; 12#include &amp;lt;random&amp;gt; 13#include &amp;lt;chrono&amp;gt; 14 15#include &amp;lt;cstdio&amp;gt; 16#include &amp;lt;cstring&amp;gt; 17#include &amp;lt;cmath&amp;gt; 18#include &amp;lt;ctime&amp;gt; 19#include &amp;lt;cstdlib&amp;gt; 20#include &amp;lt;cassert&amp;gt; 21 22#define itn int 23#define fro for 24#define scnaf scanf 25#define sacnf scanf 26#define Fastin freopen(&amp;#34;in.txt&amp;#34;, &amp;#34;r&amp;#34;, stdin) 27#define Fastout freopen(&amp;#34;out.txt&amp;#34;, &amp;#34;w&amp;#34;, stdout) 28#define manx maxn 29#define lowbit(x) ((x) &amp;amp; (-x)) 30#define ceil(n, p) (((n) +(p) - 1) / (p)) 31#define DBG(x) (void)(cout &amp;lt;&amp;lt; &amp;#34;L&amp;#34; &amp;lt;&amp;lt; __LINE__ &amp;lt;&amp;lt; &amp;#34;: &amp;#34; &amp;lt;&amp;lt; #x &amp;lt;&amp;lt; &amp;#34; = &amp;#34; &amp;lt;&amp;lt;( x) &amp;lt;&amp;lt; &amp;#39;\n&amp;#39;)</description>
</item>
<item>
<title>2020-hdu多校-3</title>
<link>https://rqdmap.top/acm/2020-hdu%E5%A4%9A%E6%A0%A1-3/</link>
<pubDate>Tue, 28 Jul 2020 20:11:40 +0000</pubDate>
<guid>https://rqdmap.top/acm/2020-hdu%E5%A4%9A%E6%A0%A1-3/</guid>
<description>1004 前缀和dp 预处理出前缀和，前缀和相同的两个点之间就可以合并成一个满足条件的数。 从后往前利用前缀和即可dp处理出最多的个数。 1009 模拟括号匹配 出现未配对的右括号就用最左边的*去匹配，出现未配对的左括号就用最右边的*去匹配。 差不多是这样 1005 并查集&amp;amp;计数 先统计一下所有点集在无边时的</description>
</item>
<item>
<title>2020-牛客多校-5</title>
<link>https://rqdmap.top/acm/2020-%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1-5/</link>
<pubDate>Mon, 27 Jul 2020 22:03:09 +0000</pubDate>
<guid>https://rqdmap.top/acm/2020-%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1-5/</guid>
<description>坑 I 数学构造题 想这类题的时候不能太过于从有限的角度去考虑无穷的角度，如果用有限的面积拓展到无限的面积，那么最多大概也就1/2, 5/9的情况，这不是最优的。应该用无限的观点去尝试构造，考虑一个金块最多可以贡献出4个信标，一个炼丹炉最多也可以贡献4个信标，并且认为这一个金块和一个炼丹</description>
</item>
<item>
<title>2020-牛客多校-6</title>
<link>https://rqdmap.top/acm/2020-%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1-6/</link>
<pubDate>Mon, 27 Jul 2020 20:09:49 +0000</pubDate>
<guid>https://rqdmap.top/acm/2020-%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1-6/</guid>
<description>有坑待补 具体数学 约瑟夫的Ok做法 B 线性无关的n维01向量个数 考虑每次加入元素时可取的元素个数。 假设当前已经取了i个线性无关向量，则它们可以张出一共$2^i$个向量，所以第i + 1个向量只有$2^n - 2 ^ i$种可取办法。 因而$f(n) = \prod_{i=0}^{n - 1}(2^n-2^i)/2^n$ 推导可得递推关系: $f(n) = (1 - 1/2^n)*f(n - 1)$ 线性处理出</description>
</item>
<item>
<title>2020-hdu多校-2</title>
<link>https://rqdmap.top/acm/2020-hdu%E5%A4%9A%E6%A0%A1-2/</link>
<pubDate>Thu, 23 Jul 2020 19:44:48 +0000</pubDate>
<guid>https://rqdmap.top/acm/2020-hdu%E5%A4%9A%E6%A0%A1-2/</guid>
<description>6763 1001 并查集 题目出锅了 虽然开局一堆人A的飞快，但是应该都是假算法？主要是出题人给的题解是假的 如果从每次都尽可能删除极大联通块的策略来考虑，那么可以用并查集维护信息。显然在一个极大联通块中可以将每个节点删去所有权值中的最小值，之后该点断裂，将原联通块分成若干个小联通块，反复进行上述操</description>
</item>
<item>
<title>2020-hdu多校-1</title>
<link>https://rqdmap.top/acm/2020-hdu%E5%A4%9A%E6%A0%A1-1/</link>
<pubDate>Wed, 22 Jul 2020 18:02:26 +0000</pubDate>
<guid>https://rqdmap.top/acm/2020-hdu%E5%A4%9A%E6%A0%A1-1/</guid>
<description>1006 1const itn maxn = 1e5 + 10; 2 3int n, m, w[maxn]; 4struct star{int to, next;}; 5 6int head[maxn], top = 0; 7int du[maxn], K; 8star edge[maxn &amp;lt;&amp;lt; 1]; 9void add(int u, int v){ 10 edge[top].to = v; 11 edge[top].next = head[u]; 12 head[u] = top++; 13} 14 15unordered_map&amp;lt;int, int&amp;gt; mp[maxn]; 16unordered_map&amp;lt;int, int&amp;gt; conv; 17 18int c[700][maxn], bitcnt = 0, zero[maxn]; 19void add(int id, int i, int x, int n){ 20 while(i &amp;lt;= n){ c[id][i] += x; i += lowbit(i);} 21} 22int query(int id, int i){ 23 int ans = 0; 24 while(i){ans += c[id][i]; i -= lowbit(i);} return ans; 25} 26 27void bitupdate(int u, int key, int op){ 28 assert(conv.count(u) == 1); 29 int id = conv[u]; add(id, key, op, du[u]); 30} 31 32//将u节点的邻接权值ke</description>
</item>
<item>
<title>网络流</title>
<link>https://rqdmap.top/acm/%E7%BD%91%E7%BB%9C%E6%B5%81/</link>
<pubDate>Tue, 14 Jul 2020 15:30:19 +0000</pubDate>
<guid>https://rqdmap.top/acm/%E7%BD%91%E7%BB%9C%E6%B5%81/</guid>
<description>两个定理的证明 https://www.cnblogs.com/cniwoq/p/9245813.html spfa的一些说明 https://blog.csdn.net/xiazdong/article/details/8193680 dinic 1const itn maxn = 1200 + 10; 2const int maxe = 120000 + 10; 3const ll inf = 1ll &amp;lt;&amp;lt; 60; 4 5struct star{int to, next, w;}; 6int head[maxn], top = 0; 7star edge[maxe &amp;lt;&amp;lt; 1]; 8 9void add(int u, int v, int w){ 10 edge[top].to = v; 11 edge[top].next = head[u]; 12 edge[top].w = w; 13 head[u] = top++; 14} 15 16int d[maxn], cur[maxn]; 17 18ll dfs(int s, int t, ll flow){ 19 if(flow == 0 || s == t) return flow; 20 21 ll res = 0, f; 22 for(int i = cur[s]; ~i; i = edge[i].next){ 23 cur[s] = i; 24 if(d[edge[i].to] == d[s] + 1){ 25 f = dfs(edge[i].to, t, min(flow, (ll)edge[i].w)); 26 edge[i].w -= f; edge[i</description>
</item>
<item>
<title>2020-牛客多校-1</title>
<link>https://rqdmap.top/acm/2020-%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1-1/</link>
<pubDate>Sun, 12 Jul 2020 19:12:59 +0000</pubDate>
<guid>https://rqdmap.top/acm/2020-%E7%89%9B%E5%AE%A2%E5%A4%9A%E6%A0%A1-1/</guid>
<description>F Periodicity Lemma 叉姐知乎专栏 https://zhuanlan.zhihu.com/which-way-did-the-bicycle-go 另一篇证明 https://zhuanlan.zhihu.com/p/89385360 原文 http://www.karlin.mff.cuni.cz/~holub/soubory/FineWilf.pdf 定理如下： 长为n的字符串S有循环节p、q，且满足p + q - gcd(p, q) &amp;lt;= n，那么有gcd(p, q)也是S的循环节。 已知上述结论后，那么为了比较$s^∞$与$t^∞$的字典序就可以只比较$|s| + |t| - gcd(|s|, |t|)$次。 真是高级的结论，证明及其数学思想留坑待</description>
</item>
<item>
<title>2016-icpc-beijing</title>
<link>https://rqdmap.top/acm/2016-icpc-beijing/</link>
<pubDate>Tue, 07 Jul 2020 23:44:24 +0000</pubDate>
<guid>https://rqdmap.top/acm/2016-icpc-beijing/</guid>
<description>H 二分答案然后跑圆的k次交即可。 因为学习完k次交后精疲力竭就不写完整这道题了。 贴一下用自己的码风写的板子。已更新入模版中。 给出n个圆的平面坐标和半径，能够获得所有圆k次交的面积。 1const int manx = 1e2 + 10; 2const double eps = 1e-8; 3const double pi = acos(-1); 4 5inline int sgn(double x){return x &amp;lt; -eps? -1: x &amp;gt; eps? 1: 0;} 6inline double sqr(double x){return x * x;} 7 8struct CIRCLE{ 9 double x, y, r, angle; 10 int d; 11</description>
</item>
<item>
<title>2016-icpc-qingdao</title>
<link>https://rqdmap.top/acm/2016-icpc-qingdao/</link>
<pubDate>Tue, 30 Jun 2020 16:00:03 +0000</pubDate>
<guid>https://rqdmap.top/acm/2016-icpc-qingdao/</guid>
<description>参考说明： added saltyfish/2016 ACM/ICPC Asia Regional Qingdao Onsite.page Fibnacci D 概率 1double qp(double a, int p){ 2 double ans = 1; 3 while(p){ 4 if(p &amp;amp; 1) ans *= a; 5 a *= a; p &amp;gt;&amp;gt;= 1; 6 } 7 return ans; 8} 9 10int n; 11int num[20]; 12double p[20], ans[20]; 13 14//除了x硬币其余硬币活不到第k轮的概率 15double sove(int x, int k){ 16 double ans = 1; 17 for(int i = 0; i &amp;lt; n; i++){ 18 if(i == x) continue; 19 ans *= qp((1 - qp(p[i], k)), num[i]); 20 } 21 return ans; 22} 23 24int main(){ 25// Fastin; 26 int t; scanf(&amp;#34;%d&amp;#34;, &amp;amp;t); while(t--){ 27 scanf(&amp;#34;%d&amp;#34;, &amp;amp;n); 28 fro(int i = 0; i &amp;lt; n; i++){</description>
</item>
<item>
<title>2017-ICPC-jakarta</title>
<link>https://rqdmap.top/acm/2017-icpc-jakarta/</link>
<pubDate>Sat, 27 Jun 2020 22:51:59 +0000</pubDate>
<guid>https://rqdmap.top/acm/2017-icpc-jakarta/</guid>
<description>B 动态维护两个序列之间的最小差值 尝试将图二分染色。如果不能二分染色，那么两人无论初始处于什么位置一定都有某种策略走到同一个节点；如果能够二分染色，题目则等价转化求$min{|u - v|}, u∈A, v∈B$，并且支持在线修改，这种情况是我们要着重处理的问题。 为此，利用multiset作为一</description>
</item>
<item>
<title>CF-1373E</title>
<link>https://rqdmap.top/acm/cf-1373e/</link>
<pubDate>Sat, 27 Jun 2020 18:09:30 +0000</pubDate>
<guid>https://rqdmap.top/acm/cf-1373e/</guid>
<description>其实是一道比较简单的暴力构造题（？） 但是因为没有往这方面去考虑所以就&amp;hellip; 正如之前看到过 第一个造原子弹的国家才是真正厉害的 因为这是开辟一条从0到1的道路 后面的效仿者已知结果可行再去效仿就容易很多 这道题中最麻烦的地方在于如果产生进位会如何影响结果。 如果一个数末尾有连续k个</description>
</item>
<item>
<title>CF-#651-div2</title>
<link>https://rqdmap.top/acm/cf-651-div2/</link>
<pubDate>Sun, 21 Jun 2020 21:38:35 +0000</pubDate>
<guid>https://rqdmap.top/acm/cf-651-div2/</guid>
<description>值得注意的题：F 树上二分 &amp;amp; 交互 A 显然是$floor(n/2)$ B 为什么一定存在呢？分奇偶项后就容易说明了。 C 最开始读错题了，以为必须要奇素因子&amp;hellip;不需要的话只需要分类考虑一下奇数因子的个数和2的个数即可。 B 为什么一定存在呢？分奇偶项后就容易说明了。 C 最开始读错题了，以</description>
</item>
<item>
<title>0619-weekly-test-B</title>
<link>https://rqdmap.top/acm/0619-weekly-test-b/</link>
<pubDate>Fri, 19 Jun 2020 21:38:03 +0000</pubDate>
<guid>https://rqdmap.top/acm/0619-weekly-test-b/</guid>
<description>题目要求我们写一个指定语法的程序，要求这个程序能够输出指定fibnacci数列中的某一项，询问至多不超过30项。 这道题目还是蛮新颖的，虽然不算很难，但是因为坑到我了&amp;hellip;所以还是写篇简短的博客记录一番。 这道题目可行的程序很多以至于WA了之后不知道怎么改，我的算法是初始化</description>
</item>
<item>
<title>对拍程序</title>
<link>https://rqdmap.top/acm/%E5%AF%B9%E6%8B%8D%E7%A8%8B%E5%BA%8F/</link>
<pubDate>Thu, 18 Jun 2020 21:55:46 +0000</pubDate>
<guid>https://rqdmap.top/acm/%E5%AF%B9%E6%8B%8D%E7%A8%8B%E5%BA%8F/</guid>
<description>因为今天打比赛队友对拍出了一个错误结果，所以我也趁机自己写了一番这个一直没有实现的技术，用起来还是很舒爽的。 1#include &amp;lt;iostream&amp;gt; 2 3int main(int argc, const char * argv[]) { 4 system(&amp;#34;g++ ~/Desktop/data/data/main.cpp -std=c++11 -o data.out&amp;#34;); 5 system(&amp;#34;g++ ~/Desktop/T/T/main.cpp -std=c++11 -o T.out&amp;#34;); 6 system(&amp;#34;g++ ~/Desktop/ttt/ttt/main.cpp -std=c++11 -o ttt.out&amp;#34;); 7 8 int times = -1; 9 scanf(&amp;#34;%d&amp;#34;, &amp;amp;times); 10 int cnt = 0; 11 while(times != 0){ 12 times--; 13 system(&amp;#34;./data.out &amp;gt;~/Desktop/in.txt&amp;#34;); 14 system(&amp;#34;./T.out &amp;lt; ~/Desktop/in.txt &amp;gt; ~/Desktop/out.txt&amp;#34;); 15 system(&amp;#34;./ttt.out &amp;lt; ~/Desktop/in.txt &amp;gt; ~/Desktop/ans.txt&amp;#34;); 16 if(system(&amp;#34;diff ~/Desktop/out.txt ~/Desktop/ans.txt&amp;#34;)){ 17 puts(&amp;#34;Differences occur!&amp;#34;); 18 break; 19 } 20 printf(&amp;#34;No.%d&amp;#39;s OK.\n&amp;#34;, cnt++); 21 } 22 return 0; 23}</description>
</item>
<item>
<title>template</title>
<link>https://rqdmap.top/acm/template/</link>
<pubDate>Wed, 17 Jun 2020 16:34:39 +0000</pubDate>
<guid>https://rqdmap.top/acm/template/</guid>
<description>1 字符串 trie树 实现一：数组实现的按键查找 1const int maxn = 2e5 + 10; 2const int maxsize = 26; 3struct TRIE{ 4 int ch[maxn][maxsize]; 5 int flag[maxn]; 6 int top = 1; 7 8 //按照实际条件进行修改 9 inline int getid(char c){return c - &amp;#39;a&amp;#39;;} 10 11 //插入长度为n的字符串s[0,..n - 1] 12 void insert(char s[maxn], int n){ 13 int u = 0; 14 for(int i = 0; i &amp;lt; n; i++){ 15 int id = getid(s[i]); 16 if(!ch[u][id]) ch[u][id] = top++; 17 u = ch[u][id]; 18 } 19 flag[u] = 1; 20 } 21 22 bool query(char s[maxn], int</description>
</item>
<item>
<title>利用可持久化01Trie解决区间异或一类问题</title>
<link>https://rqdmap.top/acm/%E5%88%A9%E7%94%A8%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%9601trie%E8%A7%A3%E5%86%B3%E5%8C%BA%E9%97%B4%E5%BC%82%E6%88%96%E4%B8%80%E7%B1%BB%E9%97%AE%E9%A2%98/</link>
<pubDate>Tue, 16 Jun 2020 22:16:25 +0000</pubDate>
<guid>https://rqdmap.top/acm/%E5%88%A9%E7%94%A8%E5%8F%AF%E6%8C%81%E4%B9%85%E5%8C%9601trie%E8%A7%A3%E5%86%B3%E5%8C%BA%E9%97%B4%E5%BC%82%E6%88%96%E4%B8%80%E7%B1%BB%E9%97%AE%E9%A2%98/</guid>
<description>为了补校赛网络的I题，就去看了异或粽子，然后就看到了Trie以及可持久化01Trie，进而就有了这篇博客qaq 借助这几道题学习一番可持久化01Trie的有关知识 参考博客：可持久化01Trie + 异或粽子 （精心) P4735 最大异或和 题目要求区间中某个位置p∈[L, R]使得a[p] ^ a[p + 1]^ ... ^</description>
</item>
<item>
<title>2017_CCPC_HARBIN</title>
<link>https://rqdmap.top/acm/2017-ccpc-harbin/</link>
<pubDate>Tue, 16 Jun 2020 19:40:08 +0000</pubDate>
<guid>https://rqdmap.top/acm/2017-ccpc-harbin/</guid>
<description>新博客的第一篇文章，打算吸取一下之前CSDN写完博客找不到题的教训：对于套题的补题应该设置一些比较明显的目录以待今后查阅，每个题目的题目以及知识点都予以简单的描述。 2017中国大学生程序设计竞赛-哈尔滨站 这好像是一场比较难(但是队友很顶)的训练赛，然而我又一次死在了计算几何上，并</description>
</item>
</channel>
</rss>